{   v_import("grammar.void");
}

{   v_import("printf.void");
}

{   voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
    voidc_enable_statement_grammar();
}


//---------------------------------------------------------------------
{
    char_ptr = LLVMPointerType(char, 0);

    v_add_local_symbol("char_ptr", LLVMOpaqueType, char_ptr);
}


//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("my_expr_module");

    v_set_module(module);
}


//---------------------------------------------------------------------
{
    module = v_get_module();

    oplist_g = LLVMAddGlobal(module, v_ast_opaque_generic_list_ptr, "expr_oplist");

    postfix_g = LLVMAddGlobal(module, voidc_opaque_visitor_ptr, "expr_opmap_postfix");
    prefix_g  = LLVMAddGlobal(module, voidc_opaque_visitor_ptr, "expr_opmap_prefix");
    infix_g   = LLVMAddGlobal(module, voidc_opaque_visitor_ptr, "expr_opmap_infix");

    oplist_z = LLVMConstNull(v_ast_opaque_generic_list_ptr);
    opmap_z  = LLVMConstNull(voidc_opaque_visitor_ptr);

    LLVMSetInitializer(oplist_g, oplist_z);

    LLVMSetInitializer(postfix_g, opmap_z);
    LLVMSetInitializer(prefix_g,  opmap_z);
    LLVMSetInitializer(infix_g,   opmap_z);

    v_add_local_symbol("expr_oplist", v_ast_opaque_generic_list_ptr, oplist_g);

    v_add_local_symbol("expr_opmap_postfix", voidc_opaque_visitor_ptr, postfix_g);
    v_add_local_symbol("expr_opmap_prefix",  voidc_opaque_visitor_ptr, prefix_g);
    v_add_local_symbol("expr_opmap_infix",   voidc_opaque_visitor_ptr, infix_g);
}


//---------------------------------------------------------------------
{ v_debug_print_module(2); }
{
    typ0 = v_alloca(LLVMTypeRef, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(char_ptr, typ0);
    v_store(int,      typ1);
    v_store(char_ptr, typ2);

    ft = LLVMFunctionType(void, typ0, 3, 0);

    //-----------------------------------------------------------------
    f = v_function_hack("add_op_postfix", ft);

    v_add_parameter_name(f, 0, "name");     //- "Syntactic" operation name
    v_add_parameter_name(f, 1, "prec");     //- Precedence
    v_add_parameter_name(f, 2, "vtag");     //- Visitor tag name
}
{
    num = v_ast_generic_list_get_size(expr_oplist);

    num_vp = v_cast(LLVMIntToPtr, num, void_ptr);

    op_quark = v_quark_from_string(name);

    voidc_visitor_set_void_method(expr_opmap_postfix, expr_opmap_postfix, op_quark, num_vp);




}











//---------------------------------------------------------------------
{
    ft = LLVMFunctionType(void, 0, 0, 0);

    //-----------------------------------------------------------------
    v_function_hack("expr_module_ctor", ft);
}
{
    printf("expr_module_ctor()\n");

    v_initialize(expr_oplist);      v_ast_make_generic_list_nil(expr_oplist, 0);

    v_initialize(expr_opmap_postfix);   voidc_make_visitor(expr_opmap_postfix);
    v_initialize(expr_opmap_prefix);    voidc_make_visitor(expr_opmap_prefix);
    v_initialize(expr_opmap_infix);     voidc_make_visitor(expr_opmap_infix);
}


//---------------------------------------------------------------------
{
    ft = LLVMFunctionType(void, 0, 0, 0);

    //-----------------------------------------------------------------
    v_function_hack("expr_module_dtor", ft);
}
{
    v_terminate(expr_opmap_infix);
    v_terminate(expr_opmap_prefix);
    v_terminate(expr_opmap_postfix);

    v_terminate(expr_oplist);

    printf("expr_module_dtor()\n");
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    module = v_get_module();

    typ0 = v_alloca(LLVMTypeRef, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    int32_t = LLVMInt32Type();

    ft = LLVMFunctionType(void, 0, 0, 0);
    fp = LLVMPointerType(ft, 0);

    v_store(int32_t,  typ0);
    v_store(fp,       typ1);
    v_store(char_ptr, typ2);

    elt_t = LLVMStructType(typ0, 3, 0);

    tab_t = LLVMArrayType(elt_t, 1);


    val0 = v_alloca(LLVMValueRef, 3);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);

    n0 = LLVMConstNull(int32_t);
    p0 = LLVMConstNull(char_ptr);

    fv = v_obtain_function("expr_module_ctor");

    v_store(n0, val0);
    v_store(fv, val1);
    v_store(p0, val2);

    elt_v = LLVMConstStruct(val0, 3, 0);

    v_store(elt_v, val1);

    tab_v = LLVMConstArray(elt_t, val1, 1);


    ctors_g = LLVMAddGlobal(module, tab_t, "llvm.global_ctors");

    LLVMSetLinkage(ctors_g, LLVMAppendingLinkage);

    LLVMSetInitializer(ctors_g, tab_v);


    fv = v_obtain_function("expr_module_dtor");

    v_store(fv, val1);

    elt_v = LLVMConstStruct(val0, 3, 0);

    v_store(elt_v, val1);

    tab_v = LLVMConstArray(elt_t, val1, 1);


    dtors_g = LLVMAddGlobal(module, tab_t, "llvm.global_dtors");

    LLVMSetLinkage(dtors_g, LLVMAppendingLinkage);

    LLVMSetInitializer(dtors_g, tab_v);
}

























//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    module = v_get_module();

    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_prepare_module_for_jit(module);

    //-----------------------------------------------------------------
    PH = v_alloca(LLVMOrcModuleHandle);

    LLVMOrcAddEagerlyCompiledIR(voidc_jit, PH, module,
                                voidc_resolver, 0
                               );

    //-----------------------------------------------------------------
    v_set_module(0);
}




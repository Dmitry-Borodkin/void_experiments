{   v_import("mainline.void");

    v_import("llvm-c/Support.void");

    v_import("printf.void");
}

{   v_enable_mainline(); }

//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
loadlib: (fname: *const char) ~> void
{
    ok = LLVMLoadLibraryPermanently(fname);

    msg: &*const char := v_undef();

    if (ok == 0)    msg := "ok";
    else            msg := "fail";

    printf("load %s: %s\n", fname, msg);
}

//---------------------------------------------------------------------
{
    loadlib("libGL.so");
    loadlib("libglfw.so");
}


//---------------------------------------------------------------------
//- ... <GLFW/glfw3.h>
//---------------------------------------------------------------------
glfwInit: () ~> int;
glfwTerminate: () ~> void;

struct GLFWwindow;
struct GLFWmonitor;

glfwCreateWindow: (width: int, height: int, title: *const char, monitor: *GLFWmonitor, share: *GLFWwindow) ~> *GLFWwindow;
glfwDestroyWindow: (*GLFWwindow) ~> void;

glfwMakeContextCurrent: (*GLFWwindow) ~> void;

glfwWindowShouldClose: (*GLFWwindow) ~> int;

glfwSwapBuffers: (*GLFWwindow) ~> void;

glfwPollEvents: () ~> void;


glfwGetFramebufferSize: (*GLFWwindow, pw: *int, ph: *int) ~> void;



glfwSetErrorCallback: (*((int, *const char) ~> void)) ~> *((int, *const char) ~> void);


//---------------------------------------------------------------------
error_callback: (err: int, msg: *const char) ~> void
{
    printf("Error: (%d) - %s\n", err, msg);
}


//---------------------------------------------------------------------
//- ... <GL/gl.h>
//---------------------------------------------------------------------
GL_COLOR_BUFFER_BIT = 0x00004000;
GL_POLYGON = 0x0009;

//---------------------------------------------------------------------
GLbitfield = unsigned;
GLenum     = unsigned;
GLfloat    = float(32);
GLint      = int;
GLsizei    = int;

//---------------------------------------------------------------------
glClear: (GLbitfield) ~> void;

glBegin: (GLenum) ~> void;
glEnd: () ~> void;

glColor3f: (red: GLfloat, green: GLfloat, blue: GLfloat) ~> void;

glVertex3f: (x: GLfloat, y: GLfloat, z: GLfloat) ~> void;

glFlush: () ~> void;

glViewport: (GLint, GLint, GLsizei, GLsizei) ~> void;


//---------------------------------------------------------------------
double = float(64);

sqrt: (double) ~> double;


//---------------------------------------------------------------------
{
    glfwSetErrorCallback(error_callback);

    glfwInit();

    window = glfwCreateWindow(640, 480, "Hello World", 0, 0);

    glfwMakeContextCurrent(window);

    kx = (0.75 * 0.5) / (sqrt(3) / 4);

    while (!glfwWindowShouldClose(window))
    {
        w: &int := v_undef();
        h: &int := v_undef();

        glfwGetFramebufferSize(window, &w, &h);

        glViewport(0, 0, w, h);

        glClear(GL_COLOR_BUFFER_BIT);

        x = (kx * h / w : GLfloat);

        glBegin(GL_POLYGON);
          glColor3f(1, 0, 0); glVertex3f(-x, -0.75, 0);
          glColor3f(0, 1, 0); glVertex3f( x, -0.75, 0);
          glColor3f(0, 0, 1); glVertex3f( 0,  0.75, 0);
        glEnd();

        glFlush();

        glfwSwapBuffers(window);

        glfwPollEvents();
    }

    glfwDestroyWindow(window);
    glfwTerminate();
}


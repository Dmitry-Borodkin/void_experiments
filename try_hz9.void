{   v_import("mainline.void");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_mainline();
}


//---------------------------------------------------------------------
double = float(64);


//---------------------------------------------------------------------
check: (a: double, b: double, c: double) ~> void
{
    s = a + b + c;

    ss = a*a + b*b + c*c;

    //- (x + s)^2 = 2*(x*x + ss)

    //- x*x + 2*x*s + s*s - 2*x*x - 2*ss = 0

    //- x*x - 2*s*x + (2*ss - s*s) = 0

    D = 4*s*s - 4*(2*ss - s*s);

    sqrt: (double) ~> double;

    sqrt_D = sqrt(D);

    x1 = (2*s + sqrt_D)/2;
    x2 = (2*s - sqrt_D)/2;

    printf("check(%g, %g, %g): (%g, %g)\n", a, b, c, x1, x2);
}



//---------------------------------------------------------------------
{
    check(-1, 2, 2);
}


{
    printf("%zd\n", v_std_string_t.size);
}


//=====================================================================
private
check_parent: (v: LLVMValueRef) ~> bool
{
    if (gv = LLVMIsAGlobalValue(v))
    {
        if (LLVMGetGlobalParent(gv))  v_return(true);
    }

    for (n = LLVMGetNumOperands(v), i: &int := 0; i < n; ++i)
    {
        if (check_parent(LLVMGetOperand(v, i)))  v_return(true);
    }

    v_return(false);
}

//---------------------------------------------------------------------
check_parent_intrinsic: (*void, *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    t  = v_find_type("int");
    t_ = v_type_get_llvm_type(t);

    v_set_result_type(t);
    v_set_result_value(LLVMConstInt(t_, 777, 0));

    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);

    name_q = v_ast_expr_identifier_get_name_q(arg0);

    name = v_quark_to_string(name_q);

    v = v_find_constant_value_q(name_q);

    if (!v)
    {
        printf("%s: not found\n", name);

        v_return();
    }

    {   s = LLVMPrintValueToString(v);

        printf("%s = %s\n", name, s);

        LLVMDisposeMessage(s);
    }

    s: &*const char := "false";

    if (check_parent(v)) s := "true";

    printf("check_parent(%s): %s\n", name, s);
}

{   v_add_intrinsic("check_parent", check_parent_intrinsic, 0);
}


//---------------------------------------------------------------------
qwe: &int[7] := v_undef();


{ v_debug_print_module(2); }
//---------------------------------------------------------------------
a = 8;

a_ = check_parent(a);

b = printf;

b_ = check_parent(b);

c: &int[2] := {};

c_ = check_parent(c);

d = c[1];

d_ = check_parent(d);

e: (*int)[] = { &d, &c[-7], &qwe[9] };

e_ = check_parent(e);

f: &(*int)[3] := e;

g = (0: *int)[-3];

g_ = check_parent(g);

h = b("(&g: int) = %d\n", (&g: int));

h_ = check_parent(h);



//---------------------------------------------------------------------
{   b("&d: %p\n", &d);

    b("&c[1]: %p\n", &c[1]);

}


{ v_debug_print_module(1); }
//---------------------------------------------------------------------
{
    n = 9'999'999'999;

    m = v_cast(9999999999, intptr_t);

    printf("n: %zd, %zd\n", (n: intptr_t), m);
}


//---------------------------------------------------------------------
{
    sqrt: (float(64)) ~> float(64);

    printf("sqrt(2) = %g\n", sqrt(2));          //- C's "double sqrt(double);"
}


//---------------------------------------------------------------------
{
    num_t = uint(13);

    v: vec(num_t, 5) = { 2, 3, 5, 7, 11 };

    u = 1.5 * v;

    w: vec(float(64), 5) = { 3.0, 4.5, 7.5, 10.5, 16.5 };

    f = u == w;

    for (i: &int := 0; i < 5; ++i)  printf("f[%d] = %d\n", i, (f[i] : int));

    g: vec(bool, 5) = true;

    for (i: &int := 0; i < 5; ++i)  printf("g[%d] = %d\n", i, (g[i] : int));
}



{   v_import("mainline.void");

    v_import("llvm-c/Core.void");
}

{ v_enable_mainline(); }

//---------------------------------------------------------------------
printf: (*const char, ...) ~> int;


//{ voidc_verify_jit_module_optimized(true); }
//{ v_debug_print_module(99); }


//---------------------------------------------------------------------
{
    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("enabled_q", q_ref, q("voidc.internal.generic_types_enabled"));

    v_add_symbol("q_type_generic_initialize_hooks",       q_ref, q("v.type_generic_initialize_hooks"));
    v_add_symbol("q_type_generic_obtain_llvm_type_hooks", q_ref, q("v.type_generic_obtain_llvm_type_hooks"));

    //-------------------------------------------------------------
    v_add_symbol("voidc_compile_quark_q", q_ref, q("voidc.compile_quark"));
    v_add_symbol("q_export_constant_q",   q_ref, q("v_export_constant_q"));
    v_add_symbol("q_add_constant_q",      q_ref, q("v_add_constant_q"));

    v_add_symbol("q_object_intrinsic_t", q_ref, q("v_object_intrinsic_t"));

    v_add_symbol("voidc_abstract_static_constant_q", q_ref, q("voidc.abstract_static_constant"));

    v_add_symbol("voidc_abstract_object_intrinsic_intrinsic_q", q_ref, q("voidc.abstract_object_intrinsic_intrinsic"));
}


//=====================================================================
{   voidc_unit_begin_module("generic_types_module"); }


//---------------------------------------------------------------------
private
get_hook: (qhooks: v_quark_t, qcons: v_quark_t, paux: **void) ~> *void
{
    any = v_get_property_q(qhooks);
    if (!any)   v_return(0);

    map = v_std_any_get_pointer(v_util_map_t, any);
    v_assert(map);

    any = v_map_find(map, qcons);
    if (!any)   v_return(0);

    p = *v_std_any_get_pointer(intptr_t[2], any);
    v_assert(p);

    fun = (p[0] : *void);
    aux = (p[1] : *void);

    if (paux) *paux := aux;

    v_return(fun);
}

//---------------------------------------------------------------------
private
set_hook: (qhooks: v_quark_t, qcons: v_quark_t, fun: *void, aux: *void) ~> void
{
    a: &*v_std_any_t := v_get_property_q(qhooks);
    if (!a)
    {
        map: &v_util_map_t := {};

        v_make_map(&map);

        any: &v_std_any_t := {};

        v_std_any_set_pointer(&any, &map);

        v_add_property_q(qhooks, &any);

        a := v_get_property_q(qhooks);
    }

    map = v_std_any_get_pointer(v_util_map_t, a);

    data: &intptr_t[2] :=
    {
        (fun: intptr_t),
        (aux: intptr_t),
    };

    any: &v_std_any_t := {};

    v_std_any_set_pointer(&any, &data);

    v_map_insert(map, map, qcons, &any);
}


//---------------------------------------------------------------------
private
hook_initialize_ft = (*void, *v_type_t) ~> void;

//---------------------------------------------------------------------
export
v_type_generic_get_initialize_hook: (qcons: v_quark_t, paux: **void) ~> *hook_initialize_ft
{
    v_return((get_hook(q_type_generic_initialize_hooks, qcons, paux) : *hook_initialize_ft));
}

//---------------------------------------------------------------------
export
v_type_generic_set_initialize_hook: (qcons: v_quark_t, fun: *hook_initialize_ft, aux: *void) ~> void
{
    set_hook(q_type_generic_initialize_hooks, qcons, fun, aux);
}

//---------------------------------------------------------------------
private
my_type_generic_initialize_ctx_t = struct
{
    fun: *hook_initialize_ft;
    aux: *void;
};

private
my_type_generic_initialize: (aux: *void, type: *v_type_t) ~> void
{
    v_assert(v_type_is_generic(type));

    block
    {
        aux: &*void := v_undef();

        fun = v_type_generic_get_initialize_hook(v_type_generic_get_cons(type), &aux);
        if (!fun)   v_break();

        fun(aux, type);

        v_return();
    }

    ctx = *(aux: *my_type_generic_initialize_ctx_t);

    ctx.fun(ctx.aux, type);
}


//---------------------------------------------------------------------
private
hook_obtain_llvm_type_ft = (*void, *v_type_t) ~> LLVMTypeRef;

//---------------------------------------------------------------------
export
v_type_generic_get_obtain_llvm_type_hook: (qcons: v_quark_t, paux: **void) ~> *hook_obtain_llvm_type_ft
{
    v_return((get_hook(q_type_generic_obtain_llvm_type_hooks, qcons, paux) : *hook_obtain_llvm_type_ft));
}

//---------------------------------------------------------------------
export
v_type_generic_set_obtain_llvm_type_hook: (qcons: v_quark_t, fun: *hook_obtain_llvm_type_ft, aux: *void) ~> void
{
    set_hook(q_type_generic_obtain_llvm_type_hooks, qcons, fun, aux);
}

//---------------------------------------------------------------------
private
my_type_generic_obtain_llvm_type_ctx_t = struct
{
    fun: *hook_obtain_llvm_type_ft;
    aux: *void;
};

private
my_type_generic_obtain_llvm_type: (aux: *void, type: *v_type_t) ~> LLVMTypeRef
{
    v_assert(v_type_is_generic(type));

    block
    {
        aux: &*void := v_undef();

        fun = v_type_generic_get_obtain_llvm_type_hook(v_type_generic_get_cons(type), &aux);
        if (!fun)   v_break();

        v_return(fun(aux, type));
    }

    ctx = *(aux: *my_type_generic_obtain_llvm_type_ctx_t);

    v_return(ctx.fun(ctx.aux, type));
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   t = v_generic_type(q_object_intrinsic_t, 0, 0);

    v_export_type_q(q_object_intrinsic_t, t);
}

//---------------------------------------------------------------------
private
my_abstract_object_intrinsic_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                         t: *v_type_t, v: LLVMValueRef,
                                         name: *const char, export: bool
                                        ) ~> void
{
//printf("my_abstract_object_intrinsic_intrinsic start %s\n", name);
//defer printf("my_abstract_object_intrinsic_intrinsic stop\n");

    v_assert(t == v_object_intrinsic_t);

    qname = v_quark_from_string(name);

    if (export) v_export_constant_q(qname, t, v);
    else        v_add_constant_q(qname, t, v);

    //-------------------------------------------------------------
    stmt_list = voidc_definitions_context_get_stmt_list();
    if (!stmt_list)  v_return();

    expr: &v_ast_expr_t[3] := {};

    elst: &v_ast_expr_list_t := {};

    stmt: &v_ast_stmt_t := {};

    v_ast_make_expr_integer(expr+0, qname);

    v_make_list(&elst, expr+0);

    v_ast_make_expr_identifier_q(expr+0, voidc_compile_quark_q);

    v_ast_make_expr_call(expr+0, expr+0, &elst);


    v_ast_make_expr_integer(expr+1, (v: v_quark_t));

    v_make_list(&elst, expr+1);

    v_ast_make_expr_identifier_q(expr+1, voidc_compile_quark_q);

    v_ast_make_expr_call(expr+1, expr+1, &elst);

    v_ast_make_expr_identifier(expr+2, "LLVMValueRef");

    v_make_list(&elst, expr+1, 2);

    v_ast_make_expr_identifier(expr+2, "v_cast");

    v_ast_make_expr_call(expr+2, expr+2, &elst);


    v_ast_make_expr_identifier_q(expr+1, q_object_intrinsic_t);


    if (export) v_ast_make_stmt_call(&stmt, 0, q_export_constant_q, expr, 3);
    else        v_ast_make_stmt_call(&stmt, 0, q_add_constant_q,    expr, 3);

    v_list_append(stmt_list, stmt_list, &stmt);
}

//---------------------------------------------------------------------
private
my_object_intrinsic_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);

    tag = v_ast_base_get_visitor_method_tag(arg0);

    quark: &v_quark_t := v_undef();

    if (tag == v_ast_expr_string_visitor_method_tag)
    {
        str = v_ast_expr_string_get_string(arg0);

        quark := v_quark_from_string(str);
    }
    else
    {
        v_assert(tag == v_ast_expr_identifier_visitor_method_tag);

        quark := v_ast_expr_identifier_get_name_q(arg0);
    }

    v_set_result_type(v_object_intrinsic_t);
    v_set_result_value((quark: LLVMValueRef));
}

//---------------------------------------------------------------------
private
my_postfix_call_object_intrinsic_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                             args: *v_ast_expr_list_t, t0: *v_type_t, v0: LLVMValueRef
                                            ) ~> void
{
    v_assert(t0 == v_object_intrinsic_t);

    quark = (v0: v_quark_t);

    void_aux: &*void := v_undef();

    void_fun = v_get_intrinsic_q(quark, &void_aux);

    fun = (void_fun: *((*void, *voidc_visitor_t, *v_ast_base_t) ~> void));

    fun(void_aux, vis, self);
}


//---------------------------------------------------------------------
private
type_generic_ctx_t = struct
{
    ini: my_type_generic_initialize_ctx_t;
    obt: my_type_generic_obtain_llvm_type_ctx_t;
};

//---------------------------------------------------------------------
export
v_enable_generic_types: () ~> void
{
    v_return_if(v_find_constant_q(enabled_q, 0, 0));

    v_add_constant_q(enabled_q, void, 0);

    //--------------------------------------------------------------
    ctx = *v_malloc(type_generic_ctx_t);

    v_add_cleaner(free, &ctx);

    ctx.ini.fun := v_type_get_initialize_hook(v_type_kind_generic, &ctx.ini.aux);
    ctx.obt.fun := v_type_get_obtain_llvm_type_hook(v_type_kind_generic, &ctx.obt.aux);

    v_type_set_initialize_hook(v_type_kind_generic, my_type_generic_initialize, &ctx.ini);
    v_type_set_obtain_llvm_type_hook(v_type_kind_generic, my_type_generic_obtain_llvm_type, &ctx.obt);

    //--------------------------------------------------------------
    v_add_intrinsic_q(voidc_abstract_object_intrinsic_intrinsic_q, my_abstract_object_intrinsic_intrinsic, 0);

    v_util_function_dict_set(voidc_abstract_static_constant_q, v_object_intrinsic_t,
                             voidc_abstract_object_intrinsic_intrinsic_q);

    v_add_intrinsic("v_object_intrinsic", my_object_intrinsic_intrinsic, 0);

    v_add_intrinsic("v.postfix_call_object_intrinsic_intrinsic", my_postfix_call_object_intrinsic_intrinsic, 0);

    v_util_function_dict_set(v_quark_from_string("v.op_postfix_call"), v_object_intrinsic_t,
                             v_quark_from_string("v.postfix_call_object_intrinsic_intrinsic"));
}


//=====================================================================
{   voidc_unit_end_module(); }



//=====================================================================
{
    v_enable_generic_types();
}


//=====================================================================
{   voidc_unit_begin_module("generic_types_test_module"); }

//{ v_debug_print_module(99); }
//---------------------------------------------------------------------
namespace my {

//---------------------------------------------------------------------
{
    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("vect_q", q_ref, q("vect"));
}


//---------------------------------------------------------------------
private
vect_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("vect_intrinsic start\n");
//defer printf("vect_intrinsic stop\n");

    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);
    arg1 = v_list_get_item(args, 1);

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(arg0, vis);

    elt = (v_get_result_value() : *v_type_t);

    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(arg1, vis);

    size_v = v_get_result_value();

    size = (LLVMConstIntGetZExtValue(size_v) : size_t);

    args: &(*v_type_generic_arg_t)[2] :=
    {
        v_type_generic_type_arg(elt),
        v_type_generic_number_arg(size),
    };

    typ = v_generic_type(vect_q, args, 2);

    v_set_result_type(v_static_type_t);
    v_set_result_value((typ: LLVMValueRef));
}


//---------------------------------------------------------------------
private
vect_obtain_llvm_type: (*void, typ: *v_type_t) ~> LLVMTypeRef
{
    args = v_type_generic_get_args(typ);

    elt  = v_type_generic_arg_type_get_type(args[0]);
    size = v_type_generic_arg_number_get_number(args[1]);

    rt = v_array_type(elt, size);

    rt_ = v_type_get_llvm_type(rt);

    v_type_set_cached_llvm_type(typ, rt_);

    v_return(rt_);
}


//---------------------------------------------------------------------


//---------------------------------------------------------------------
private
vect_initialize: (*void, typ: *v_type_t) ~> void
{


}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
enable_vect: () ~> void
{
    v_add_intrinsic_q(vect_q, vect_intrinsic, 0);

    v_type_generic_set_obtain_llvm_type_hook(vect_q, vect_obtain_llvm_type, 0);
}


//---------------------------------------------------------------------
}   //- namespace my


//=====================================================================
{   voidc_unit_end_module(); }






//{ voidc_verify_jit_module_optimized(true); }
//{ v_debug_print_module(99); }
//---------------------------------------------------------------------
namespace my {


//---------------------------------------------------------------------
qwe = v_object_intrinsic("my.qwe_intrinsic");

qwe_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    id0 = v_ast_expr_identifier_get_name(v_list_get_item(args, 0));
    id1 = v_ast_expr_identifier_get_name(v_list_get_item(args, 1));

    printf("my.qwe(%s, %s)\n", id0, id1);
}

{   v_add_intrinsic("my.qwe_intrinsic", qwe_intrinsic, 0);
}

//---------------------------------------------------------------------
{
    qwe(Hello, world);
}


//---------------------------------------------------------------------
unique_ptr = v_object_intrinsic("my.unique_ptr_intrinsic");

//---------------------------------------------------------------------
private
unique_ptr_q = v_quark_from_string("my.unique_ptr");        //- ???

private
unique_ptr_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(arg0, vis);

    elt = (v_get_result_value() : *v_type_t);

    arg = v_type_generic_type_arg(elt);

    typ = v_generic_type(unique_ptr_q, &arg, 1);

    v_set_result_type(v_static_type_t);
    v_set_result_value((typ: LLVMValueRef));
}

private
unique_ptr_obtain_llvm_type: (*void, typ: *v_type_t) ~> LLVMTypeRef
{
    rt = v_pointer_type(v_void_type(), 0);          //- Sic !?!

    rt_ = v_type_get_llvm_type(rt);

    v_type_set_cached_llvm_type(typ, rt_);

    v_return(rt_);
}


//---------------------------------------------------------------------
private
template_src: &const char[] :=          //- T - type parameter ...
"""
namespace my {

inlinehint
(v_initialize(_)): (sp: *unique_ptr(T), N: size_t) ~> void
{
    .memset: (s: *void, c: int, n: size_t) ~> *void;

    .memset(sp, 0, N*my.unique_ptr(int).size);
}

alwaysinline
(_.get()): (sp: &const unique_ptr(T)) ~> *T  =  *(&sp: **T);

alwaysinline
(_.get()): (sp: unique_ptr(T)) ~> *T  =  v_get_object_pointer(sp)->get();

inlinehint
(v_terminate(_)): (sp: *unique_ptr(T), N: size_t) ~> void
{
    for (i: &int := 0; i < N; ++i)
    {
        if (p = sp[i].get())  delete p;
    }
}


alwaysinline
(_.release()): (sp: &unique_ptr(T)) ~> *T
{
    r = sp.get();

    *(&sp: **T) := 0;

    v_return(r);
}

alwaysinline
(_.reset()): (sp: &unique_ptr(T), p: *T) ~> void
{
    if (pp = sp.get())  delete pp;

    *(&sp: **T) := p;
}


inlinehint
(v_move(_)): (dst: *unique_ptr(T), src: *unique_ptr(T), N: size_t) ~> void
{
    for (i: &int := 0; i < N; ++i)  dst[i].reset(src[i].release());
}


alwaysinline
(*_): (sp: &const unique_ptr(T)) ~> &T  =  *sp.get();

alwaysinline
(*_): (sp: unique_ptr(T)) ~> &T  =  *sp.get();

alwaysinline
(_->): (sp: &const unique_ptr(T)) ~> *T  =  sp.get();

alwaysinline
(_->): (sp: unique_ptr(T)) ~> *T  =  sp.get();


alwaysinline
(_:=_): (dst: &unique_ptr(T), src: &unique_ptr(T)) ~> &unique_ptr(T)
{
    dst.reset(src.release());       //- Kinda   v_move(&dst, &src);

    v_return(dst);
}

}   //- namespace my
""";


//---------------------------------------------------------------------
private
template_ast: &v_ast_generic_list_t := {};

private
fgetc_fun: (void_data: *void) ~> int
{
    cur_pos = *(void_data : *int);

    c = (template_src[cur_pos] : uint(8));

    if (!c) v_return(-1);

    ++cur_pos;

    v_return(c);
}

private
parse_template: () ~> void
{
    ctx: &v_peg_context_t[2] := {};

    my_ctx    = ctx + 0;
    saved_ctx = ctx + 1;

    grm: &v_peg_grammar_t := {};

    v_peg_get_grammar(&grm);

    cur_pos: &int := 0;

    v_peg_make_context(my_ctx, fgetc_fun, &cur_pos, &grm);

    v_peg_get_context(saved_ctx);
    defer v_peg_set_context(saved_ctx);

    v_peg_set_context(my_ctx);

    res: &v_std_any_t := {};

    v_peg_parse(&res, v_quark_from_string("unit_defn_list"));

    ast = v_std_any_get_pointer(v_ast_generic_list_t, &res);

    v_assert(ast);

    v_copy(&template_ast, ast);
}


//---------------------------------------------------------------------
private
my_compile_expr_identifier_ctx_t = struct
{
    fun: *((*void, *voidc_visitor_t, *v_ast_base_t) ~> void);
    aux: *void;

    par: *v_ast_expr_t;
};

private
my_compile_expr_identifier: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("my_compile_expr_identifier start\n");
//defer printf("my_compile_expr_identifier stop\n");

    ctx = *(aux: *my_compile_expr_identifier_ctx_t);

    qname = v_ast_expr_identifier_get_name_q((self: *v_ast_expr_t));

    if (qname == v_quark_from_string("T"))
    {
        v_ast_accept_visitor(ctx.par, vis);

        v_return();
    }

    ctx.fun(ctx.aux, vis, self);
}

//---------------------------------------------------------------------
private
instantiate_unique_ptr_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("instantiate_unique_ptr_intrinsic start\n");
//defer printf("instantiate_unique_ptr_intrinsic stop\n");

    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(arg0, vis);

    elt = (v_get_result_value() : *v_type_t);

    //-------------------------------------------------------------
    //- T - type parameter ...
    //-------------------------------------------------------------

    par: &v_ast_expr_t := {};

    v_ast_make_expr_compiled(&par, v_static_type_t, (elt: LLVMValueRef));

    ctx: &my_compile_expr_identifier_ctx_t := v_undef();

    q = v_quark_from_string("expr_identifier");

    void_fun = voidc_visitor_get_void_method(vis, q, &ctx.aux);

    ctx.fun := (void_fun: *((*void, *voidc_visitor_t, *v_ast_base_t) ~> void));

    ctx.par := &par;

    //-------------------------------------------------------------
    v_assert(vis == v_get_compiler());

    saved_vis: &voidc_visitor_t := {};

    v_copy(&saved_vis, vis);

    voidc_visitor_set_void_method(vis, vis, q, my_compile_expr_identifier, &ctx);

    n = v_list_get_size(&template_ast);

    for (i: &int := 0; i < n; ++i)
    {
        item = v_list_get_item(&template_ast, i);

        v_ast_accept_visitor(item, vis);
    }

    v_copy(vis, &saved_vis);

    //-------------------------------------------------------------
    tr: &*v_type_t    := v_undef();
    vr: &LLVMValueRef := v_undef();

    v_find_constant("true", &tr, &vr);

    v_set_result_type(tr);
    v_set_result_value(vr);
}


//---------------------------------------------------------------------
make_unique = v_object_intrinsic("my.make_unique_intrinsic");

//---------------------------------------------------------------------
private
make_unique_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("make_unique_intrinsic start\n");
//defer printf("make_unique_intrinsic stop\n");

    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(arg0, vis);

    elt = (v_get_result_value() : *v_type_t);

    arg = v_type_generic_type_arg(elt);

    tr = v_generic_type(unique_ptr_q, &arg, 1);

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    vr = v_obtain_special_result_value(vis, tr);        //- Sic !?!

    expr: &v_ast_expr_t := {};

    v_ast_make_expr_compiled(&expr, v_static_type_t, (elt: LLVMValueRef));

    list: &v_ast_expr_list_t := {};

    v_make_list(&list, &expr, 1);

    v_ast_make_expr_identifier(&expr, "v.op_prefix_new");           //- Sic!

    v_ast_make_expr_call(&expr, &expr, &list);

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(&expr, vis);

    ptr_v = v_get_result_value();

    builder = v_target_get_builder();

    LLVMBuildStore(builder, ptr_v, vr);             //- Sic !!!

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(tr, vr);
}


//---------------------------------------------------------------------
enable_unique_ptr: () ~> void
{
    v_add_intrinsic("my.unique_ptr_intrinsic", unique_ptr_intrinsic, 0);

    v_type_generic_set_obtain_llvm_type_hook(unique_ptr_q, unique_ptr_obtain_llvm_type, 0);

    v_add_intrinsic("v_instantiate_unique_ptr", instantiate_unique_ptr_intrinsic, 0);

    parse_template();

    v_add_intrinsic("my.make_unique_intrinsic", make_unique_intrinsic, 0);
}


//---------------------------------------------------------------------
}   //- namespace my


//---------------------------------------------------------------------
{
    my.enable_unique_ptr();
}

//---------------------------------------------------------------------
#if (v_instantiate_unique_ptr(int))             #endif

#if (v_instantiate_unique_ptr(v_std_string_t))  #endif


//---------------------------------------------------------------------
{ voidc_verify_jit_module_optimized(true); }
{ v_debug_print_module(99); }
{
    p: &my.unique_ptr(int) := {};

    p.reset(new int {77});

    printf("p: %d\n", *p);

    using namespace my;

    q: &unique_ptr(v_std_string_t)[3] := {};

    q[0].reset(new v_std_string_t);

    v_std_string_set(q[0].get(), "ZZZZZZZZZZZZZZZZZZZ");

    printf("q[0]: %s\n", v_std_string_get(q[0].get()));

}


//---------------------------------------------------------------------
struct some_t
{
    x: int;
    y: int;
};

#if (v_instantiate_unique_ptr(some_t))  #endif


//---------------------------------------------------------------------
{
    r = my.make_unique(some_t);

    r->x := 777;
    r->y := 888;

    printf("r: (%d, %d)\n", r->x, r->y);

}

some = my.make_unique(some_t);

{ *some := { 7777, 8888 }; }

{ printf("some: (%d, %d)\n", some->x, some->y); }



//---------------------------------------------------------------------
{
    my.enable_vect();
}

//---------------------------------------------------------------------
{ v_debug_print_module(1); }
{
    v: &vect(int, 4) := 0;

    u: &vect(vect(int, 5), 3) := 0;



}























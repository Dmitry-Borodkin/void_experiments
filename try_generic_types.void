{   v_import("mainline.void");

    v_import("llvm-c/Core.void");
}

{ v_enable_mainline(); }

//---------------------------------------------------------------------
printf: (*const char, ...) ~> int;


//{ voidc_verify_jit_module_optimized(true); }
//{ v_debug_print_module(99); }


//---------------------------------------------------------------------
{
    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("enabled_q", q_ref, q("voidc.internal.generic_types_enabled"));

    v_add_symbol("q_type_generic_initialize_hooks",       q_ref, q("v.type_generic_initialize_hooks"));
    v_add_symbol("q_type_generic_obtain_llvm_type_hooks", q_ref, q("v.type_generic_obtain_llvm_type_hooks"));
}


//=====================================================================
{   voidc_unit_begin_module("generic_types_module"); }


//---------------------------------------------------------------------
private
get_hook: (qhooks: v_quark_t, qcons: v_quark_t, paux: **void) ~> *void
{
    any = v_get_property_q(qhooks);
    if (!any)   v_return(0);

    map = v_std_any_get_pointer(v_util_map_t, any);
    v_assert(map);

    any = v_map_find(map, qcons);
    if (!any)   v_return(0);

    p = *v_std_any_get_pointer(intptr_t[2], any);
    v_assert(p);

    fun = (p[0] : *void);
    aux = (p[1] : *void);

    if (paux) *paux := aux;

    v_return(fun);
}

//---------------------------------------------------------------------
private
set_hook: (qhooks: v_quark_t, qcons: v_quark_t, fun: *void, aux: *void) ~> void
{
    a: &*v_std_any_t := v_get_property_q(qhooks);
    if (!a)
    {
        map: &v_util_map_t := {};

        v_make_map(&map);

        any: &v_std_any_t := {};

        v_std_any_set_pointer(&any, &map);

        v_add_property_q(qhooks, &any);

        a := v_get_property_q(qhooks);
    }

    map = v_std_any_get_pointer(v_util_map_t, a);

    data: &intptr_t[2] :=
    {
        (fun: intptr_t),
        (aux: intptr_t),
    };

    any: &v_std_any_t := {};

    v_std_any_set_pointer(&any, &data);

    v_map_insert(map, map, qcons, &any);
}


//---------------------------------------------------------------------
private
hook_initialize_ft = (*void, *v_type_t) ~> void;

//---------------------------------------------------------------------
export
v_type_generic_get_initialize_hook: (qcons: v_quark_t, paux: **void) ~> *hook_initialize_ft
{
    v_return((get_hook(q_type_generic_initialize_hooks, qcons, paux) : *hook_initialize_ft));
}

//---------------------------------------------------------------------
export
v_type_generic_set_initialize_hook: (qcons: v_quark_t, fun: *hook_initialize_ft, aux: *void) ~> void
{
    set_hook(q_type_generic_initialize_hooks, qcons, fun, aux);
}

//---------------------------------------------------------------------
private
my_type_generic_initialize_ctx_t = struct
{
    fun: *hook_initialize_ft;
    aux: *void;
};

private
my_type_generic_initialize: (aux: *void, type: *v_type_t) ~> void
{
    v_assert(v_type_is_generic(type));

    block
    {
        aux: &*void := v_undef();

        fun = v_type_generic_get_initialize_hook(v_type_generic_get_cons(type), &aux);
        if (!fun)   v_break();

        fun(aux, type);

        v_return();
    }

    ctx = *(aux: *my_type_generic_initialize_ctx_t);

    ctx.fun(ctx.aux, type);
}


//---------------------------------------------------------------------
private
hook_obtain_llvm_type_ft = (*void, *v_type_t) ~> LLVMTypeRef;

//---------------------------------------------------------------------
export
v_type_generic_get_obtain_llvm_type_hook: (qcons: v_quark_t, paux: **void) ~> *hook_obtain_llvm_type_ft
{
    v_return((get_hook(q_type_generic_obtain_llvm_type_hooks, qcons, paux) : *hook_obtain_llvm_type_ft));
}

//---------------------------------------------------------------------
export
v_type_generic_set_obtain_llvm_type_hook: (qcons: v_quark_t, fun: *hook_obtain_llvm_type_ft, aux: *void) ~> void
{
    set_hook(q_type_generic_obtain_llvm_type_hooks, qcons, fun, aux);
}

//---------------------------------------------------------------------
private
my_type_generic_obtain_llvm_type_ctx_t = struct
{
    fun: *hook_obtain_llvm_type_ft;
    aux: *void;
};

private
my_type_generic_obtain_llvm_type: (aux: *void, type: *v_type_t) ~> LLVMTypeRef
{
    v_assert(v_type_is_generic(type));

    block
    {
        aux: &*void := v_undef();

        fun = v_type_generic_get_obtain_llvm_type_hook(v_type_generic_get_cons(type), &aux);
        if (!fun)   v_break();

        v_return(fun(aux, type));
    }

    ctx = *(aux: *my_type_generic_obtain_llvm_type_ctx_t);

    v_return(ctx.fun(ctx.aux, type));
}


//---------------------------------------------------------------------
private
type_generic_ctx_t = struct
{
    ini: my_type_generic_initialize_ctx_t;
    obt: my_type_generic_obtain_llvm_type_ctx_t;
};

//---------------------------------------------------------------------
export
v_enable_generic_types: () ~> void
{
    v_return_if(v_find_constant_q(enabled_q, 0, 0));

    v_add_constant_q(enabled_q, void, 0);

    //--------------------------------------------------------------
    ctx = *v_malloc(type_generic_ctx_t);

    v_add_cleaner(free, &ctx);

    ctx.ini.fun := v_type_get_initialize_hook(v_type_kind_generic, &ctx.ini.aux);
    ctx.obt.fun := v_type_get_obtain_llvm_type_hook(v_type_kind_generic, &ctx.obt.aux);

    v_type_set_initialize_hook(v_type_kind_generic, my_type_generic_initialize, &ctx.ini);
    v_type_set_obtain_llvm_type_hook(v_type_kind_generic, my_type_generic_obtain_llvm_type, &ctx.obt);
}


//=====================================================================
{   voidc_unit_end_module(); }



//=====================================================================
{
    v_enable_generic_types();
}


//=====================================================================
{   voidc_unit_begin_module("generic_types_test_module"); }

//---------------------------------------------------------------------
namespace my {

//---------------------------------------------------------------------
{
    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("vect_q", q_ref, q("vect"));
}


//---------------------------------------------------------------------
private
vect_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("vect_intrinsic start\n");
//defer printf("vect_intrinsic stop\n");

    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);
    arg1 = v_list_get_item(args, 1);

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(arg0, vis);

    elt = (v_get_result_value() : *v_type_t);

    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(arg1, vis);

    size_v = v_get_result_value();

    size = (LLVMConstIntGetZExtValue(size_v) : size_t);

    args: &(*v_type_generic_arg_t)[2] :=
    {
        v_type_generic_type_arg(elt),
        v_type_generic_number_arg(size),
    };

    typ = v_generic_type(vect_q, args, 2);

    v_set_result_type(v_static_type_t);
    v_set_result_value((typ: LLVMValueRef));
}


//---------------------------------------------------------------------
private
vect_obtain_llvm_type: (*void, typ: *v_type_t) ~> LLVMTypeRef
{
    args = v_type_generic_get_args(typ);

    elt  = v_type_generic_arg_type_get_type(args[0]);
    size = v_type_generic_arg_number_get_number(args[1]);

    rt = v_array_type(elt, size);

    v_return(v_type_get_llvm_type(rt));
}


//---------------------------------------------------------------------
enable_vect: () ~> void
{
    v_add_intrinsic_q(vect_q, vect_intrinsic, 0);

    v_type_generic_set_obtain_llvm_type_hook(vect_q, vect_obtain_llvm_type, 0);
}


//---------------------------------------------------------------------
}   //- namespace my


//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
{
    my.enable_vect();
}

//---------------------------------------------------------------------
{ v_debug_print_module(99); }
{
    v: &vect(int, 4) := 0;

    u: &vect(vect(int, 5), 3) := 0;



}























{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();
}


//---------------------------------------------------------------------
{
    a: &int[2*3*4] := v_undef();

    for (i: &int := 0; i < 2*3*4; ++i)  a[i] := i;

    b = *(&a: *int[2][3][4]);

    for (i: &int := 0; i < 2; ++i)
    {
        for (j: &int := 0; j < 3; ++j)
        {
            for (k: &int := 0; k < 4; ++k)
            {
                printf("b[%d][%d][%d]: %d\n", i, j, k, b[i][j][k]);
            }
        }
    }
}


//---------------------------------------------------------------------
{
    aux: &*void := v_undef();

    q = v_quark_from_string;

    fun = voidc_visitor_get_intrinsic(voidc_compiler, q("v.op_infix_add"), &aux);

    v_add_intrinsic("crazy_add", fun, aux);
}

{   n = crazy_add(hzhzhz, 2, 3);

    printf("n: %d\n", n);
}


//---------------------------------------------------------------------
{   N = v_quark_from_string("ЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫ");

    for (q: &v_quark_t := 1; q <= N; ++q)
    {
        printf("%5d: %s\n", q, v_quark_to_string(q));
    }
}


//---------------------------------------------------------------------
v_source_filename_intrinsic: (vis: *voidc_visitor_t, *void, *v_ast_base_t) -> void
{
    len: &size_t := 0;

    module = v_get_module();

    str = LLVMGetSourceFileName(module, &len);

    llvm_ctx = v_target_get_llvm_ctx();

    val = LLVMConstStringInContext(llvm_ctx, str, (len: unsigned), 0);

    typ = v_array_type(char, len+1);

    v_adopt_result(typ, val);
}


//---------------------------------------------------------------------
{
    v_add_intrinsic("v_source_filename", v_source_filename_intrinsic, 0);

}


//---------------------------------------------------------------------
strdup: (*const char) -> *char;

dirname: (*char) -> *char;

free: (*void) -> void;

//---------------------------------------------------------------------
{ v_debug_print_module(1); }
{
    str = v_source_filename();

    printf("\n%s\n", str);

    buf = strdup(str);

    printf("\n%s\n", dirname(buf));

    free(buf);
}


//---------------------------------------------------------------------
{   path = v_alloca(v_std_string_t);
    v_initialize(path);
    defer v_terminate(path);

    v_find_file_for_import: (*v_std_string_t, *const char, *const char) -> void;

    v_find_file_for_import(path, "", "level-00");

    printf("\n%s\n", v_std_string_get(path));
}



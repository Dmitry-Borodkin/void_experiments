{   v_import("level-00");
    v_import("level-01");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_level_01(); }


//---------------------------------------------------------------------
v_aggregate_intrinsic: (vis: voidc_visitor_ptr, *void,
                        args: v_ast_expr_list_ptr, count: int) -> void
{
    N = v_list_get_size(args);

    expr = v_malloc(v_ast_opaque_expr_sptr, N);
    v_initialize(expr, N);
    defer
    {
        v_terminate(expr, N);
        v_free(expr);
    }

    v_list_get_items(args, 0, expr, N);


    t = v_get_result_type();

    v: &LLVMValueRef := LLVMGetUndef(v_type_get_llvm_type(t));


    builder = v_target_get_builder();

    i: &int := 0;

    if (v_type_is_vector(t))
    {
        et = v_type_vector_get_element_type(t);

        int_ = v_type_get_llvm_type(v_find_type("int"));

        loop
        {
            if (i >= N) v_break();

            v_set_result_type(et);

            v_ast_accept_visitor((expr+i : v_ast_base_ptr), vis);

            ev = v_get_result_value();

            iv = LLVMConstInt(int_, i, 0);

            v := LLVMBuildInsertElement(builder, v, ev, iv, "");

            ++i;
        }
    }
    else
    {
        ets: &*v_type_ptr := 0;

        et: &v_type_ptr := v_undef();

        if (v_type_is_struct(t))  ets := v_type_struct_get_element_types(t);
        else                      et  := v_type_array_get_element_type(t);

        loop
        {
            if (i >= N) v_break();

            if (ets)  et := ets[i];

            v_set_result_type(et);

            v_ast_accept_visitor((expr+i : v_ast_base_ptr), vis);

            ev = v_get_result_value();

            v := LLVMBuildInsertValue(builder, v, ev, i, "");

            ++i;
        }
    }

    v_set_result_type(t);
    v_set_result_value(v);
}

{   v_add_intrinsic("v_aggregate", v_aggregate_intrinsic, 0);
}


//---------------------------------------------------------------------
v_typed_intrinsic: (vis: voidc_visitor_ptr, *void,
                    args: v_ast_expr_list_ptr, count: int) -> void
{
    expr = v_alloca(v_ast_opaque_expr_sptr, 2);
    v_initialize(expr, 2);
    defer v_terminate(expr, 2);

    v_list_get_items(args, 0, expr, 2);

    tt = v_get_result_type();

    v_set_result_type(INVIOLABLE_TAG);

    v_ast_accept_visitor((expr+0 : v_ast_base_ptr), vis);       //- Type

    t = v_get_result_type();        //- ?

    v_ast_accept_visitor((expr+1 : v_ast_base_ptr), vis);       //- Value

    v = v_get_result_value();

    v_set_result_type(tt);

    v_adopt_result(t, v);
}

{   v_add_intrinsic("v_typed", v_typed_intrinsic, 0);
}


//---------------------------------------------------------------------
strcmp: (*const char, *const char) -> int;


//---------------------------------------------------------------------
v_struct_intrinsic: (vis: voidc_visitor_ptr, *void,
                     args: v_ast_expr_list_ptr, count: int) -> void
{
    packed: &bool := false;

    type: &v_type_ptr := 0;

    n1 = v_list_get_size(args);

    if (n1)
    block
    {
        expr = v_alloca(v_ast_opaque_expr_sptr);
        v_initialize(expr);
        defer v_terminate(expr);

        v_list_get_items(args, 0, expr);

        i: &int := 0;

        if (v_ast_base_get_visitor_method_tag((expr : v_ast_base_ptr)) == v_ast_expr_string_t_visitor_method_tag)
        {
            name = v_ast_expr_string_get_string(expr);

            type := v_struct_type_named(name);

            if (n1 == 1) v_break();

            i := 1;
        }

        if (i)  v_list_get_items(args, 1, expr);

        if (v_ast_base_get_visitor_method_tag((expr : v_ast_base_ptr)) == v_ast_expr_identifier_t_visitor_method_tag)
        {
            ident = v_ast_expr_identifier_get_name(expr);

            if (strcmp(ident, "packed") == 0) packed := true;
        }
    }

    if (count == 1)
    {
        v_set_result_type(type);
        v_set_result_value(0);

        v_return();
    }

    N = v_list_get_size(args+1);

    expr = v_malloc(v_ast_opaque_expr_sptr, N);
    v_initialize(expr, N);
    defer
    {
        v_terminate(expr, N);
        v_free(expr);
    }

    v_list_get_items(args+1, 0, expr, N);

    typs = v_malloc(v_type_ptr, N);
    defer v_free(typs);

    i: &int := 0;

    loop
    {
        if (i >= N) v_break();

        v_set_result_type(INVIOLABLE_TAG);

        v_ast_accept_visitor((expr+i : v_ast_base_ptr), vis);

        typs[i] := v_get_result_type();

        ++i;
    }

    if (type) v_type_struct_set_body(type, typs, N, packed);
    else      type := v_struct_type(typs, N, packed);

    v_set_result_type(type);
    v_set_result_value(0);
}

{   v_add_intrinsic("v_struct", v_struct_intrinsic, 0);
}


//---------------------------------------------------------------------
w: &int := 30;

//{ v_debug_print_module(1); }
{
    v: vec(int, 10) = v_aggregate(0, 1, 2, 3, 4, 5, w+6, w+7, w+8);

    i: &int := 0;

    loop
    {
        if (i >= 10) v_break();

        printf("v[%d]: %d\n", i, v[i]);

        ++i;
    }
}

//---------------------------------------------------------------------
c: &int := 10;

C: int = 20;

VV: int[10] = v_aggregate(  0,   1,   2,   3, C+4, C+5, C+6, C+7, C+8);

//{ v_debug_print_module(1); }
{
    vv: int[10] = v_aggregate(  0,   1,   2,   3, c+4, c+5, c+6, c+7, c+8);

//  v: &int[10] := vv;
    v: &int[10] := VV;

    i: &int := 0;

    loop
    {
        if (i >= 10) v_break();

        printf("v[%d]: %d\n", i, v[i]);

        ++i;
    }
}


//---------------------------------------------------------------------
{ v_debug_print_module(1); }

p: &*int := &c;


sss = v_struct("qwerty", packed)(int, bool, long);

sv: sss = v_aggregate(777, true, 999999);

s: &sss := sv;


qqq = v_struct("struct.asdfgh")(int, sss);

qv: qqq = v_aggregate(999, sv);

q: &qqq := qv;


r: &(*char)[5] := v_aggregate("zero", "one", "two", "three", "four");


rr: &char[2][5] := v_aggregate("a", "b", "c");

rrr = v_typed(char[2][5], v_aggregate("A", "B", "C", "D", "E"));


{
    vs = (&s : intptr_t);

    vs_0 = (&s[0] : intptr_t) - vs;
    vs_1 = (&s[1] : intptr_t) - vs;
    vs_2 = (&s[2] : intptr_t) - vs;

    printf("(%ld, %ld, %ld) %ld\n", vs_0, vs_1, vs_2, (&s+1 : intptr_t) - vs);


    rr[3] := "d";
    rr[4] := "e";

    printf("%s%s%s%s%s\n", rr[0], rr[1], rr[2], rr[3], rr[4]);

    rr := rrr;

    printf("%s%s%s%s%s\n", rr[0], rr[1], rr[2], rr[3], rr[4]);
}


//---------------------------------------------------------------------
{ v_debug_print_module(1); }

node_t = v_struct("struct.node_t");

node_t = v_struct("struct.node_t")(int, *node_t);


{   n0: &node_t := v_aggregate(0, 0);
    n1: &node_t := v_aggregate(1, &n0);
    n2: &node_t := v_aggregate(2, &n1);
    n3: &node_t := v_aggregate(3, &n2);
    n4: &node_t := v_aggregate(4, &n3);
    n5: &node_t := v_aggregate(5, &n4);
    n6: &node_t := v_aggregate(6, &n5);

    printf("\n");

    p: &*node_t := &n6;

    loop
    {
        if (!p) v_break();

        n = *p;

        printf("%d ", n[0]);

        p := n[1];
    }

    printf("\n");
}



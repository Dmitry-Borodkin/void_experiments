{
    v_import("voidc_target.void");
    v_import("voidc_types.void");

    v_import("if_then_else.void");
    v_import("block.void");
    v_import("loop.void");
    v_import("switch.void");
    v_import("expression.void");

    v_import("llvm-c/Support.void");
}

{   v_import("printf.void");
}

{   voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
    voidc_enable_statement_loop();
    voidc_enable_statement_switch();
    voidc_enable_expression();
}


//---------------------------------------------------------------------
{   ok = LLVMLoadLibraryPermanently("libcairo.so");

    printf("ok: %d\n", ok);
}


{
    surface_t = v_struct_type_named("struct.cairo_surface_t");

    surface_ref = v_pointer_type(surface_t, 0);

    v_add_type("cairo_surface_ref", surface_ref);

    cairo_t = v_struct_type_named("struct.cairo_t");

    cairo_ref = v_pointer_type(cairo_t, 0);

    v_add_type("cairo_ref", cairo_ref);


    v_add_type("double", v_f64_type());


}


{   typ0 = v_alloca(v_type_ptr, 5);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);
    typ4 = v_getelementptr(typ0, 4);

    v_store(int, typ0);
    v_store(int, typ1);
    v_store(int, typ2);

    ft = v_function_type(cairo_surface_ref, typ0, 3, false);

    v_export_symbol_type("cairo_image_surface_create", ft);

    v_store(cairo_surface_ref, typ0);

    ft = v_function_type(void, typ0, 1, false);

    v_export_symbol_type("cairo_surface_destroy", ft);
    v_export_symbol_type("cairo_surface_flush", ft);


    ft = v_function_type(cairo_ref, typ0, 1, false);

    v_export_symbol_type("cairo_create", ft);

    v_store(cairo_ref, typ0);

    ft = v_function_type(void, typ0, 1, false);

    v_export_symbol_type("cairo_destroy", ft);
    v_export_symbol_type("cairo_paint", ft);
    v_export_symbol_type("cairo_fill", ft);
    v_export_symbol_type("cairo_fill_preserve", ft);
    v_export_symbol_type("cairo_stroke", ft);


    v_store(double, typ1);
    v_store(double, typ2);
    v_store(double, typ3);

    ft = v_function_type(void, typ0, 4, false);

    v_export_symbol_type("cairo_set_source_rgb", ft);


    v_store(double, typ4);

    ft = v_function_type(void, typ0, 5, false);

    v_export_symbol_type("cairo_rectangle", ft);
    v_export_symbol_type("cairo_set_source_rgba", ft);


    ft = v_function_type(void, typ0, 2, false);

    v_export_symbol_type("cairo_set_line_width", ft);


    char_ptr = v_pointer_type(char, 0);

    v_store(cairo_surface_ref, typ0);
    v_store(char_ptr,          typ1);

    ft = v_function_type(int, typ0, 2, false);

    v_export_symbol_type("cairo_surface_write_to_png", ft);


}

//{ v_debug_print_module(1); }
{
    surface = cairo_image_surface_create(0, 800, 600);        //- "0" - ARGB32

    cr = cairo_create(surface);


    cairo_set_source_rgb(cr, 1, 1, 1);

    cairo_paint(cr);


    cairo_set_source_rgb(cr, 0, 0, 0);

    cairo_set_line_width(cr, 1);

    H = v_cast(1, double) / 2;

    i = *v_alloca(int) := 1;

    loop
    {
        if (i == 30) v_break();

        n = i*10 + H;

        cairo_rectangle(cr, n, n, 800-2*n, 600-2*n);

        ++i;
    }

    cairo_stroke(cr);


    cairo_destroy(cr);


    cairo_surface_flush(surface);

    cairo_surface_write_to_png(surface, "try_cairo.png");

    cairo_surface_destroy(surface);
}


//---------------------------------------------------------------------
{   typ = v_alloca(v_type_ptr);

    char_ptr = v_pointer_type(char, 0);

    v_store(char_ptr, typ);

    system_ft = v_function_type(int, typ, 1, false);

    v_export_symbol_type("system", system_ft);
}

{
    system("display try_cairo.png");
}



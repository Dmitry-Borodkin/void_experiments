{   v_import("mainline.void");

    v_import("llvm-c/Core.void");
    v_import("llvm-c/Target.void");

    v_import("printf.void");
}

{   v_enable_mainline();
}


//---------------------------------------------------------------------
{
    sz = intptr_t[3].size;

    l_cap: &int := v_undef();       //- long, capacity (flag "is_long")
    l_len: &int := v_undef();       //- long, length
    l_ptr: &int := v_undef();       //- long, pointer to data

    s_len: &int := v_undef();       //- short, length (flag "is_long")
    s_str: &int := v_undef();       //- short, data

    switch(LLVMByteOrder(v_target_get_data_layout()))       //- Sic!!!
    {
    case LLVMLittleEndian:

        l_cap := 0;         //- "is_long" in the first byte
        l_len := 1;
        l_ptr := 2;

        s_len := 0;         //- "is_long" in the first byte
        s_str := 1;

        v_break();

    case LLVMBigEndian:

        l_ptr := 0;
        l_len := 1;
        l_cap := 2;         //- "is_long" in the last byte

        s_str := 0;
        s_len := 1;         //- "is_long" in the last byte
    }

    l_typ: &(*v_type_t)[3] := v_undef();

    l_typ[l_cap] := size_t;
    l_typ[l_len] := size_t;
    l_typ[l_ptr] := v_pointer_type(char, 0);

    s_typ: &(*v_type_t)[2] := v_undef();

    s_typ[s_len] := v_uint_type(8);
    s_typ[s_str] := v_array_type(char, sz-1);

    l_struct = v_struct_type(l_typ, 3, false);
    s_struct = v_struct_type(s_typ, 2, false);

    v_add_type("l_struct_type", l_struct);
    v_add_type("s_struct_type", s_struct);

    int_ = v_type_get_llvm_type(int);

    v_add_constant("l_cap_field_number", int, LLVMConstInt(int_, l_cap, 0));
    v_add_constant("l_len_field_number", int, LLVMConstInt(int_, l_len, 0));
    v_add_constant("l_ptr_field_number", int, LLVMConstInt(int_, l_ptr, 0));

    v_add_constant("s_len_field_number", int, LLVMConstInt(int_, s_len, 0));
    v_add_constant("s_str_field_number", int, LLVMConstInt(int_, s_str, 0));
}


//=====================================================================
union string_t
{
    short: s_struct_type;
    long:  l_struct_type;

    raw:   intptr_t[3];
};

//---------------------------------------------------------------------
alwaysinline
(_.is_long): (self: &const string_t) -> bool
{
    v_return((self.long[l_cap_field_number] & 1 : bool));
}

inlinehint
(_.size): (self: &const string_t) -> size_t
{
    if (self.is_long)   v_return(self.long[l_len_field_number]);
    else                v_return(self.short[s_len_field_number] >> 1);
}

inlinehint
(_.capacity): (self: &const string_t) -> size_t
{
    if (self.is_long)   v_return(self.long[l_cap_field_number] >> 1);
    else                v_return(string_t.size - 2);
}


//---------------------------------------------------------------------
memcpy: (*void, *const void, size_t) -> *void;
memset: (*void, int, size_t) -> *void;

realloc: (*void, size_t) -> *void;


//---------------------------------------------------------------------
alwaysinline
(v_initialize(_)): (dst: *string_t, count: size_t) -> void
{
    memset(dst, 0, count*string_t.size);
}

inlinehint
(v_terminate(_)): (dst: *string_t, count: size_t) -> void
{
    for (i: &size_t := 0; i < count; ++i)
    {
        d_i = dst[i];

        if (d_i.is_long) v_free(d_i.long[l_ptr_field_number]);
    }
}

inlinehint
(v_copy(_)): (dst: *string_t, src: *const string_t, count: size_t) -> void
{
    for (i: &size_t := 0; i < count; ++i)
    {
        d_i = dst[i];
        s_i = src[i];

        if (d_i.is_long) v_free(d_i.long[l_ptr_field_number]);

        d_i.raw := s_i.raw;

        if (s_i.is_long)
        {
            s_sz = s_i.size;

            p = v_malloc(char, s_sz+1);

            memcpy(p, s_i.long[l_ptr_field_number], s_sz+1);

            d_i.long[l_ptr_field_number] := p;
            d_i.long[l_cap_field_number] := (s_sz << 1) | 1;
        }
    }
}

inlinehint
(v_move(_)): (dst: *string_t, src: *string_t, count: size_t) -> void
{
    v_terminate(dst, count);

    sz = count * string_t.size;

    memcpy(dst, src, sz);
    memset(src,   0, sz);
}

inlinehint
(v_transfer(_)): (dst: *string_t, src: *const string_t, count: size_t) -> void = derive;


//---------------------------------------------------------------------
inlinehint
(_.data): (str: &string_t) -> *char
{
    if (str.is_long)  v_return(str.long[l_ptr_field_number]);
    else              v_return(str.short[s_str_field_number]);
}

inlinehint
(_.set()): (str: &string_t, s: *const char) -> void
{
    strlen: (*const char) -> size_t;

    len = strlen(s);

    if (len > str.capacity)
    {
        if (str.is_long) v_free(str.long[l_ptr_field_number]);

        str.long[l_ptr_field_number] := v_malloc(char, len+1);
        str.long[l_cap_field_number] := (len << 1) | 1;
    }

    if (str.is_long)
    {
        str.long[l_len_field_number] := len;
    }
    else
    {
        str.short[s_len_field_number] := ((len << 1) : uint(8));
    }

    memcpy(str.data, s, len+1);
}

inlinehint
(_.append()): (str: &string_t, s: *const char) -> void
{
    strlen: (*const char) -> size_t;

    len = strlen(s);

    sz = str.size;

    sz_len = sz + len;

    if (sz_len > str.capacity)
    {
        if (str.is_long)
        {
            str.long[l_ptr_field_number] := (realloc(str.long[l_ptr_field_number], sz_len+1) : *char);
        }
        else
        {
            d = v_malloc(char, sz_len+1);

            memcpy(d, str.data, sz);

            str.long[l_ptr_field_number] := d;
        }

        str.long[l_cap_field_number] := (sz_len << 1) | 1;
    }

    memcpy(str.data+sz, s, len+1);

    if (str.is_long)
    {
        str.long[l_len_field_number] := sz_len;
    }
    else
    {
        str.short[s_len_field_number] := ((sz_len << 1) : uint(8));
    }
}





//---------------------------------------------------------------------
pr_string: (s: string_t) -> void
{
    s = *v_get_object_pointer(s);

    printf("d: %s, s: %zd, c: %zd\n", s.data, s.size, s.capacity);
}


//---------------------------------------------------------------------
//{   v_debug_print_module(2);
//
//    voidc_verify_jit_module_optimized(true);
//}
{
    s: &string_t := {};

    s.set("qwerty_________1");

    pr_string(s);

    s.set("qwerty_______________________________________________________________________________________2");

    pr_string(s);

    s.set("qwerty___________________3");

    pr_string(s);

    s.set("qwerty_____4");

    pr_string(s);

    s.append("asdfgh_____5");

    pr_string(s);
}


//---------------------------------------------------------------------
alwaysinline
(_:=_): (str: &string_t, val: string_t) -> &string_t
{
    v_copy(&str, v_get_object_pointer(val));

    v_return(str);
}

//---------------------------------------------------------------------
//{   v_debug_print_module(2);
//
//    voidc_verify_jit_module_optimized(true);
//}
{   s: &string_t[2] := {};

    s[0].set("1");
    s[1].set("0");

    pr_string(s[1]);

    for (i: &int := 0; i < 9; ++i)
    {
        t: &string_t := s[1];

        t.append(s[0].data);

        s[0] := s[1];
        s[1] := t;

        pr_string(t);
    }
}




//---------------------------------------------------------------------




{   v_import("mainline.void");

    v_import("llvm-c/Core.void");
    v_import("llvm-c/Target.void");

    v_import("printf.void");
}

{   v_enable_mainline();
}


//---------------------------------------------------------------------
{
    sz = intptr_t[3].sizeof;

    l_cap: &int := v_undef();       //- long, capacity (flag "is_long")
    l_len: &int := v_undef();       //- long, length
    l_ptr: &int := v_undef();       //- long, pointer to data

    s_len: &int := v_undef();       //- short, length (flag "is_long")
    s_str: &int := v_undef();       //- short, data

    switch(LLVMByteOrder(v_target_get_data_layout()))       //- Sic!!!
    {
    case LLVMLittleEndian:

        l_cap := 0;         //- "is_long" in the first byte
        l_len := 1;
        l_ptr := 2;

        s_len := 0;         //- "is_long" in the first byte
        s_str := 1;

        v_break();

    case LLVMBigEndian:

        l_ptr := 0;
        l_len := 1;
        l_cap := 2;         //- "is_long" in the last byte

        s_str := 0;
        s_len := 1;         //- "is_long" in the last byte
    }

    l_typ: &(*v_type_t)[3] := v_undef();

    l_typ[l_cap] := size_t;
    l_typ[l_len] := size_t;
    l_typ[l_ptr] := v_pointer_type(char, 0);

    s_typ: &(*v_type_t)[2] := v_undef();

    s_typ[s_len] := v_uint_type(8);
    s_typ[s_str] := v_array_type(char, sz-1);

    l_struct = v_struct_type(l_typ, 3, false);
    s_struct = v_struct_type(s_typ, 2, false);

    v_add_type("l_struct_type", l_struct);
    v_add_type("s_struct_type", s_struct);

    int_ = v_type_get_llvm_type(int);

    v_add_constant("l_cap", int, LLVMConstInt(int_, l_cap, 0));
    v_add_constant("l_len", int, LLVMConstInt(int_, l_len, 0));
    v_add_constant("l_ptr", int, LLVMConstInt(int_, l_ptr, 0));

    v_add_constant("s_len", int, LLVMConstInt(int_, s_len, 0));
    v_add_constant("s_str", int, LLVMConstInt(int_, s_str, 0));
}


//=====================================================================
union string_t
{
    short: s_struct_type;
    long:  l_struct_type;

    raw:   intptr_t[3];
};

//---------------------------------------------------------------------
alwaysinline
(_.is_long): (self: &const string_t) ~> bool
{
    v_return((self.long[l_cap] & 1 : bool));
}

inlinehint
(_.size): (self: &const string_t) ~> size_t
{
    if (self.is_long)   v_return(self.long[l_len]);
    else                v_return(self.short[s_len] >> 1);
}

inlinehint
(_.capacity): (self: &const string_t) ~> size_t
{
    if (self.is_long)   v_return(self.long[l_cap] >> 1);
    else                v_return(string_t.sizeof - 2);
}


//---------------------------------------------------------------------
strlen: (*const char) ~> size_t;

memcpy: (*void, *const void, size_t) ~> *void;
memset: (*void, int, size_t) ~> *void;

realloc: (*void, size_t) ~> *void;


//---------------------------------------------------------------------
alwaysinline
(v_initialize(_)): (dst: *string_t, count: size_t) ~> void
{
    memset(dst, 0, count*string_t.sizeof);
}

inlinehint
(v_terminate(_)): (dst: *string_t, count: size_t) ~> void
{
    for (i: &size_t := 0; i < count; ++i)
    {
        di = dst[i];

        if (di.is_long) v_free(di.long[l_ptr]);
    }
}

inlinehint
(v_copy(_)): (dst: *string_t, src: *const string_t, count: size_t) ~> void
{
    for (i: &size_t := 0; i < count; ++i)
    {
        di = dst[i];
        si = src[i];

        if (di.is_long) v_free(di.long[l_ptr]);

        di.raw := si.raw;

        if (si.is_long)
        {
            sz1 = si.size + 1;

            csz = (sz1 + 15) & ~15;

            p = v_malloc(char, csz);

            memcpy(p, si.long[l_ptr], sz1);

            di.long[l_ptr] := p;
            di.long[l_cap] := ((csz-1) << 1) | 1;
        }
    }
}

inlinehint
(v_move(_)): (dst: *string_t, src: *string_t, count: size_t) ~> void
{
    v_terminate(dst, count);

    sz = count * string_t.sizeof;

    memcpy(dst, src, sz);
    memset(src,   0, sz);
}


//---------------------------------------------------------------------
inlinehint
(_.data): (str: &string_t) ~> *char
{
    if (str.is_long)  v_return(str.long[l_ptr]);
    else              v_return(str.short[s_str]);
}

//---------------------------------------------------------------------
inlinehint
(_.set_data()): (str: &string_t, s: *const char, len: size_t) ~> void
{
    if (len > str.capacity)
    {
        if (str.is_long) v_free(str.long[l_ptr]);

        csz = (len + (1+15)) & ~15;

        str.long[l_ptr] := v_malloc(char, csz);
        str.long[l_cap] := ((csz-1) << 1) | 1;
    }

    memcpy(str.data, s, len);

    str.data[len] := 0;

    if (str.is_long)
    {
        str.long[l_len] := len;
    }
    else
    {
        str.short[s_len] := ((len << 1) : uint(8));
    }
}

inlinehint
(_.set()): (str: &string_t, s: *const char) ~> void
{
    str.set_data(s, strlen(s));
}

inlinehint
(_.append_data()): (str: &string_t, s: *const char, len: size_t) ~> void
{
    if (len == 0) v_return();

    sz = str.size;

    sz_len = sz + len;

    if (sz_len > str.capacity)
    {
        csz = (sz_len + (1+15)) & ~15;

        if (str.is_long)
        {
            str.long[l_ptr] := (realloc(str.long[l_ptr], csz) : *char);
        }
        else
        {
            d = v_malloc(char, csz);

            memcpy(d, str.data, sz);

            str.long[l_ptr] := d;
        }

        str.long[l_cap] := ((csz-1) << 1) | 1;
    }

    memcpy(str.data+sz, s, len);

    str.data[sz_len] := 0;

    if (str.is_long)
    {
        str.long[l_len] := sz_len;
    }
    else
    {
        str.short[s_len] := ((sz_len << 1) : uint(8));
    }
}

inlinehint
(_.append()): (str: &string_t, s: *const char) ~> void
{
    str.append_data(s, strlen(s));
}

inlinehint
(_.append_char()): (str: &string_t, c: char32_t) ~> void
{
    r: &int := v_undef();

    if (c <= 0x7FF)
    {
        if (c <= 0x7F)  r := 0;
        else            r := 1;
    }
    else
    {
        if (c <= 0xFFFF)  r := 2;
        else              r := 3;
    }

    d = v_alloca(char, r+1);

    if (r == 0)
    {
        d[0] := (c & 0x7F : char);
    }
    else
    {
        c: &char32_t := c;

        for (j: &int := 0; j < r; ++j)
        {
            d[r-j] := (0x80 | (c & 0x3F) : char);

            c >>= 6;
        }

        d[0] := ((0x1E << (6-r)) | (c & (0x3F >> r)) : char);
    }

    str.append_data(d, r+1);
}

inlinehint
(_.append_number()): (str: &string_t, n: intptr_t) ~> void
{
    buf: &char[24] := v_undef();

    sprintf: (*char, *const char, ...) ~> int;

    len = sprintf(buf, "%zd", n);

    str.append_data(buf, len);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
alwaysinline
my_adopt_to_string: (s: *const char) ~> string_t
{
    ret = v_get_return_value();

    ret.set(s);
}

//---------------------------------------------------------------------
my_try_to_adopt_ctx_t = struct
{
    fun: *((*void, *v_type_t, LLVMValueRef) ~> bool);
    aux: *void;
};

my_try_to_adopt: (aux: *void, t0: *v_type_t, v0: LLVMValueRef) ~> bool
{
    string_type = v_find_type("string_t");
    char_type = v_int_type(8);

    t1 = v_get_result_type();

    if ((INVIOLABLE_TAG != t1 != UNREFERENCE_TAG
        )  &&
        (t1 == string_type  ||
         v_type_is_reference(t1)  &&  v_type_refptr_get_element_type(t1) == string_type
        )  &&
        ((v_type_is_pointer(t0)  &&  v_type_refptr_get_element_type(t0) == char_type)  ||
         (v_type_is_array(t0)  &&  v_type_array_get_element_type(t0) == char_type)
        )
       )
    {
        expr: &v_ast_expr_t      := {};
        list: &v_ast_expr_list_t := {};

        v_ast_make_expr_compiled(&expr, t0, v0);

        v_make_list(&list, &expr);

        v_ast_make_expr_identifier(&expr, "my_adopt_to_string");

        v_ast_make_expr_call(&expr, &expr, &list);

        v_ast_accept_visitor(&expr, v_get_compiler());

        v_return(true);
    }

    ctx = *(aux: *my_try_to_adopt_ctx_t);

    v_return(ctx.fun(ctx.aux, t0, v0));
}

my_try_to_adopt_ctx: &my_try_to_adopt_ctx_t := {};

{   my_try_to_adopt_ctx.fun := v_get_try_to_adopt_hook(&my_try_to_adopt_ctx.aux);

    v_set_try_to_adopt_hook(my_try_to_adopt, &my_try_to_adopt_ctx);
}


//---------------------------------------------------------------------
pr_string: (s: string_t) ~> void
{
    s = *&s;

    printf("d: %s, s: %zd, c: %zd\n", s.data, s.size, s.capacity);
}


//---------------------------------------------------------------------
alwaysinline
(_:=_): (str: &string_t, val: string_t) ~> &string_t
{
    v_copy(&str, &val);

    v_return(str);
}


//---------------------------------------------------------------------
//{   v_debug_print_module(2);
//
//    voidc_verify_jit_module_optimized(true);
//}
{
    s: &string_t := "qwerty____0";

    pr_string(s);

    s.set("qwerty_________1");

    pr_string(s);

    s := "qwerty_______________________________________________________________________________________2";

    pr_string(s);

    s := "qwerty___________________3";

    pr_string(s);

    s.set("qwerty_____4");

    pr_string(s);

    s.append("asdfgh_____5");

    pr_string(s);

    s.append_char('_');
    s.append_char('Ð«');

    pr_string(s);

    s.append_char('_');
    s.append_number((-1 : size_t) >> 1);

    pr_string(s);
}


//---------------------------------------------------------------------
//{   v_debug_print_module(2);
//
//    voidc_verify_jit_module_optimized(true);
//}
{   s: &string_t[2] := { "1", "0" };

    pr_string(s[1]);

    for (i: &int := 0; i < 9; ++i)
    {
        t: &string_t := s[1];

        t.append(s[0].data);

        s[0] := s[1];
        s[1] := t;

        pr_string(t);
    }
}




//---------------------------------------------------------------------




{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");
    v_import("level-03");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();
    v_enable_level_03();
}


//---------------------------------------------------------------------
print_position_intrinsic: (*voidc_visitor_t, *void, self: *v_ast_base_t) -> void
{
    pos_start_q = v_quark_from_string("pos_start");
    pos_end_q   = v_quark_from_string("pos_end");

    ps = v_std_any_get_value(size_t, v_ast_get_property(self, pos_start_q));
    pe = v_std_any_get_value(size_t, v_ast_get_property(self, pos_end_q));

    ls: &size_t[2] := v_undef();    v_peg_get_line_column(ps, ls[0], ls[1]);
    le: &size_t[2] := v_undef();    v_peg_get_line_column(pe, le[0], le[1]);


    printf("ps: %zd(%zd, %zd), pe: %zd(%zd, %zd)\n", ps, ls[0]+1, ls[1]+1, pe, le[0]+1, le[1]+1);

    sstr: &v_std_string_t := {};

    v_peg_take_string(&sstr, ps, pe);

    printf("<<<<%s>>>>\n", v_std_string_get(&sstr));
}

{   v_add_intrinsic("print_position", print_position_intrinsic, 0);
}


//---------------------------------------------------------------------
{
    print_position
    (
        a
    )
    ;

}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    a: &v_std_any_t := {};

    v_std_any_set_value(&a, -7i128);

    v = v_std_any_get_value(int(128), &a);

    printf("v: %d\n", (v: int));

    b: &v_std_any_t := a;

    u = v_std_any_get_value(int(128), &b);

//    b: &v_std_any_t[1] := { a };
//
//    u = v_std_any_get_value(int(128), &b[0]);

    printf("u: %d\n", (u: int));
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    l: &v_util_list_t := {};

    a: &v_std_any_t := {};

//  v_std_any_set_value(&a, 777'888'999'777'888'999u256);           //- WTF?
    v_std_any_set_pointer(&a, &777'888'999'777'888'999u256);

    v_make_list(&l, &a, 1);

    v_std_any_set_pointer(&a, &l);

    v_list_append(&l, &l, &a, 1);

    v = v_std_any_get_value(uint(256), v_list_get_item(&l, 0));

    printf("v: %zd\n", (v: size_t));

    printf("%zd\n", (777'888'999'777'888'999u256 : size_t));
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    m: &v_util_map_t := {};

    v_make_map(&m);

    a: &v_std_any_t := {};

    s: &v_std_string_t := {};

    Q = v_quark_from_string("????????????????????????????????????????????????????");

    printf("Q: %d\n", Q);

    for (q: &v_quark_t := 1; q < Q; ++q)
    {
        v_std_string_set(&s, v_quark_to_string(q));

        v_std_any_set_pointer(&a, &s);

        v_map_insert(&m, &m, q, &a);
    }

    printf("m size: %zd\n", v_map_get_size(&m));

    for (q: &v_quark_t := 1; q < Q; ++q)
    {
        pa = v_map_find(&m, q);

        ps = v_std_any_get_pointer(v_std_string_t, pa);

//      printf("%d - [%s]\n", q, v_std_string_get(ps));

        strcmp: (*const char, *const char) -> int;

        if (qs = v_quark_to_string(q), ss = v_std_string_get(ps), strcmp(qs, ss) != 0)
        {
            printf("[%s] != [%s]\n", qs, ss);
        }
    }
}


//---------------------------------------------------------------------
{
    w = v_type_integer_get_width(intptr_t);

    v_add_type("uintptr_t", v_uint_type(w));

    v_add_type("uintptr2_t", v_uint_type(2*w));

    v_add_constant("uintptr_w", unsigned, LLVMConstInt(v_type_get_llvm_type(unsigned), w, 0));
}

alwaysinline
pack: (lsb: uintptr_t, msb: uintptr_t) -> uintptr2_t
{
    v_return(lsb | ((msb : uintptr2_t) << uintptr_w));
}

alwaysinline
unpack: (val: uintptr2_t) -> uintptr_t[2]
{
    lsb = (val: uintptr_t);

    msb = (val >> uintptr_w : uintptr_t);

    v_return({lsb, msb});
}


{   v_debug_print_module(2);

    voidc_verify_jit_module_optimized(true);
}
{
    u = pack(777, 888);

    v = unpack(u);

    printf("(%zd, %zd)\n", v[0], v[1]);
}




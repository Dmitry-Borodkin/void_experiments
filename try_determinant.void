{   v_import("level-00");
    v_import("level-01");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_level_01(); }


//---------------------------------------------------------------------
det_helper: (N: int, v: **LLVMValueRef) -> LLVMValueRef
{
    if (N == 1) v_return(v[0][0]);

    builder = v_target_get_builder();

    r: &LLVMValueRef := v_undef();

    w = v_alloca(*LLVMValueRef, N-1);

    i: &int := 0;

    loop
    {
        if (i >= N) v_break();

        j: &int := 0;
        k: &int := 0;

        loop
        {
            if (j >= N) v_break();

            if (j != i)
            {
                w[k] := v[j] + 1;

                ++k;
            }

            ++j;
        }

        d = det_helper(N-1, w);

        p = LLVMBuildFMul(builder, v[i][0], d, "");

        if (i == 0)
        {
            r := p;
        }
        else
        {
            if (i & 1)  r := LLVMBuildFSub(builder, r, p, "");
            else        r := LLVMBuildFAdd(builder, r, p, "");
        }

        ++i;
    }

    v_return(r);
}


//---------------------------------------------------------------------
determinant_intrinsic: (vis: voidc_visitor_ptr, *void,
                        args: v_ast_expr_list_ptr, count: int) -> void
{
    arg = v_alloca(v_ast_opaque_expr_sptr);
    v_initialize(arg);
    defer v_terminate(arg);

    v_list_get_items(args, 0, arg);

    tt = v_get_result_type();

    v_set_result_type(INVIOLABLE_TAG);

    v_ast_accept_visitor((arg : v_ast_base_ptr), vis);

    t: &v_type_ptr   := v_get_result_type();
    v: &LLVMValueRef := v_get_result_value();

    builder = v_target_get_builder();

    if (v_type_is_reference(t))
    {
        t := v_type_refptr_get_element_type(t);

        v := LLVMBuildLoad(builder, v, "");
    }

    N = (v_type_array_get_length(t) : int);

    VV = v_malloc(LLVMValueRef, N*N);
    defer v_mfree(VV);

    V = v_alloca(*LLVMValueRef, N);

    i: &int := 0;

    loop
    {
        if (i >= N) v_break();

        V[i] := VV + i*N;

        vi = LLVMBuildExtractValue(builder, v, i, "");

        j: &int := 0;

        loop
        {
            if (j >= N) v_break();

            V[i][j] := LLVMBuildExtractValue(builder, vi, j, "");

            ++j;
        }

        ++i;
    }

    r = det_helper(N, V);

    v_set_result_type(tt);

    t = v_type_array_get_element_type(t);
    t = v_type_array_get_element_type(t);

    v_adopt_result(t, r);
}

{   v_add_intrinsic("determinant", determinant_intrinsic, 0);
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    A: &float(64)[9][9] := 0;

    A[0][0] :=  5;  A[0][1] :=  2;  A[0][2] :=  1;  A[0][3] :=  4;  A[0][4] :=  6;
    A[1][0] :=  9;  A[1][1] :=  4;  A[1][2] :=  2;  A[1][3] :=  5;  A[1][4] :=  2;
    A[2][0] := 11;  A[2][1] :=  5;  A[2][2] :=  7;  A[2][3] :=  3;  A[2][4] :=  9;
    A[3][0] :=  5;  A[3][1] :=  6;  A[3][2] :=  6;  A[3][3] :=  7;  A[3][4] :=  2;
    A[4][0] :=  7;  A[4][1] :=  5;  A[4][2] :=  9;  A[4][3] :=  3;  A[4][4] :=  3;

    A[5][5] := 1;
    A[6][6] := 1;
    A[7][7] := 1;
    A[8][8] := 1;

    d = determinant(A);

    printf("d: %g\n", d);
}



{   v_import("mainline.void");

    v_import("llvm-c/Core.void");
}
{   v_enable_mainline(); }


//====================================================================-
struct FILE;

popen: (command: *const char, prop: *const char) ~> *FILE;

pclose: (*FILE) ~> int;

fprintf: (stream: *FILE, format: *const char, ...) ~> int;

fscanf: (stream: *FILE, format: *const char, ...) ~> int;

fputs: (buf: *char, stream: *FILE) ~> int;

sprintf: (str: *char, format: *const char, ...) ~> int;

printf: (format: *const char, ...) ~> int;

system: (cmd: *const char) ~> int;


//---------------------------------------------------------------------
my_source: &char[] :=
"""
const char *
clang_decl[][2] =
{

#define DECL(D, B) { #D, #B },

#include "clang/AST/DeclNodes.inc"

    {0}
};

const char *
clang_decl_context[] =
{

#define DECL(D, B)

#define DECL_CONTEXT(D) #D,

#include "clang/AST/DeclNodes.inc"

    0
};


const char *
clang_type[][2] =
{

#define TYPE(D, B) { #D, #B },

#include "clang/AST/TypeNodes.inc"

    {0}
};


const char *
clang_stmt[][2] =
{

#define STMT(D, B) { #D, #B },

#include "clang/AST/StmtNodes.inc"

    {0}
};

""";


//---------------------------------------------------------------------
{   buffer = v_malloc(char, 1024);
    defer v_free(buffer);

    {   p = popen("mktemp", "r");
        defer pclose(p);

        fscanf(p, "%500s", buffer);
    }

#if (v_defined(_WIN32))
    {
        cmd = buffer + 512;

        sprintf(cmd, "cygpath -m %s", buffer);

        p = popen(cmd, "r");
        defer pclose(p);

        fscanf(p, "%1000s", buffer);
    }
#endif

    //-----------------------------------------------------------------
    {   p = popen("bash", "w");
        defer pclose(p);

        fprintf(p, "clang -x c -c -fPIC");

#if (v_defined(NDEBUG))

        fprintf(p, " -O3 -DNDEBUG");

#endif

        fprintf(p, " $(llvm-config --cflags)");

        fprintf(p, " -o %s", buffer);

        fprintf(p, " - <<HEREDOC\n%s\nHEREDOC\n", my_source);
    }

    //-----------------------------------------------------------------
    mb: &LLVMMemoryBufferRef := 0;
    defer LLVMDisposeMemoryBuffer(mb);

    LLVMCreateMemoryBufferWithContentsOfFile(buffer, &mb, 0);

    voidc_add_local_object_file_to_jit(mb);

    //-----------------------------------------------------------------
    {   p = popen("bash", "w");
        defer pclose(p);

        fprintf(p, "rm %s\n", buffer);
    }
}


//---------------------------------------------------------------------
clang_decl: &(*const char)[0][2];
clang_decl_context: &(*const char)[0];

clang_type: &(*const char)[0][2];
clang_stmt: &(*const char)[0][2];


//=====================================================================
namespace clang
{


//---------------------------------------------------------------------
{
    tab: &struct { table: *(*const char)[2]; suffix: *const char; }[3] :=
    {
        { clang_decl, "Decl" },
        { clang_type, "Type" },
        { clang_stmt, "" },
    };

    for (k: &int := 0; k < 3; ++k)
    {
        s: &v_std_string_t := {};

        for (i: &int := 0; tab[k].table[i][0]; ++i)
        {
            sstr: &v_std_string_t := {};

            v_std_string_set(&sstr, tab[k].table[i][0]);

            v_std_string_append(&sstr, tab[k].suffix);

            sname = v_std_string_get(&sstr);

            alias = v_obtain_alias(sname, true);

            printf("%s (%s)\n", sname, alias);

















//          printf("%s <- %s%s\n", tab[k].table[i][1], tab[k].table[i][0], tab[k].suffix);
        }

        printf("\n");
    }
}


//---------------------------------------------------------------------
bbbbbbbbbbbbbbbb = 1;



//---------------------------------------------------------------------
}   //- namespace clang




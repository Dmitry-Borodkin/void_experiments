{ voidc_import("libvoidc.void"); }
{ voidc_make_header("geomobjects"); }
//---------------------------------------------------------------------
{
    v_import("geometry.void");
}


//---------------------------------------------------------------------
namespace Geometry {


//=====================================================================
//- Projective segment (2D)
//=====================================================================
struct Segment
{
    p0: Point;
    p1: Point;
};

(_.print_to_file()): (s: Segment, f: *FILE) ~> void;

//---------------------------------------------------------------------
alwaysinline
(_+_): (s: Segment, v: Vector) ~> Segment  =  {s.p0+v, s.p1+v};

alwaysinline
(_-_): (s: Segment, v: Vector) ~> Segment  =  {s.p0-v, s.p1-v};

//---------------------------------------------------------------------
(_.norm()): (s: &Segment) ~> bool;

(_.is_affine()): (s: &Segment) ~> bool;

(_==_): (a: &Segment, b: &Segment) ~> bool;

alwaysinline
(_!=_): (a: &Segment, b: &Segment) ~> bool  =  !(a == b);

//---------------------------------------------------------------------
alwaysinline
(_.transform_by()): (s: Segment, t: Transform) ~> Segment  =  {t(s.p0), t(s.p1)};

//---------------------------------------------------------------------
(_.incident()): (s: &Segment, p: &Point) ~> bool;


//=====================================================================
//- Projective polygon (2D)
//=====================================================================
struct Polygon
{
    v: *Point;
    n: unsigned;
};

(v_initialize(_)): (*Polygon, size_t) ~> void;
(v_terminate(_)):  (*Polygon, size_t) ~> void;

(v_copy(_)): (*Polygon, *const Polygon, size_t) ~> void;
(v_move(_)): (*Polygon, *Polygon, size_t) ~> void;

//---------------------------------------------------------------------
(_.print_to_file()): (p: Polygon, f: *FILE) ~> void;

//---------------------------------------------------------------------
(_+_): (p: Polygon, v: Vector) ~> Polygon;
(_-_): (p: Polygon, v: Vector) ~> Polygon;

//---------------------------------------------------------------------
(_.norm()): (p: &Polygon) ~> bool;

(_.is_affine()): (p: &Polygon) ~> bool;

(_==_): (a: &Polygon, b: &Polygon) ~> bool;

alwaysinline
(_!=_): (a: &Polygon, b: &Polygon) ~> bool  =  !(a == b);

//---------------------------------------------------------------------
(_.transform_by()): (p: Polygon, t: Transform) ~> Polygon;

//---------------------------------------------------------------------
(_.contains()): (pl: &Polygon, pt: &Point) ~> bool;


//---------------------------------------------------------------------
}   //- namespace Geometry



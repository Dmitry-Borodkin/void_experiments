{
    v_import("voidc_target.void");
    v_import("voidc_types.void");
    v_import("voidc_util.void");

    v_import("llvm-c/Core.void");

    v_import("function_hack.void");
    v_import("memory.void");
    v_import("if_then_else.void");
    v_import("block.void");
    v_import("loop.void");
    v_import("grammar.void");
    v_import("switch.void");
    v_import("expression.void");
    v_import("defer.void");
}

{   voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
    voidc_enable_statement_loop();
    voidc_enable_statement_grammar();
    voidc_enable_statement_switch();
    voidc_enable_expression();
    voidc_enable_statement_defer();
}

//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   typ = v_alloca(v_type_ptr, 2);

    typ[0] := v_type_ptr;           //- Key
    typ[1] := size_t;               //- Value

    node_t = v_struct_type(typ, 2, false);      //- Tree node

    node_ptr = v_pointer_type(node_t, 0);

    v_add_type("node_t",   node_t);
    v_add_type("node_ptr", node_ptr);

    //-----------------------------------------------------------------
    typ[0] := v_pointer_type(void, 0);      //- Tree root
    typ[1] := size_t;                       //- Dict size

    dict_t = v_struct_type(typ, 2, false);      //- Types dictionary

    dict_ptr = v_pointer_type(dict_t, 0);

    v_add_type("dict_t",   dict_t);
    v_add_type("dict_ptr", dict_ptr);
}

//---------------------------------------------------------------------
{   typ = v_alloca(v_type_ptr, 3);

    void_ptr = v_pointer_type(void, 0);

    typ[0] := void_ptr;
    typ[1] := void_ptr;

    compare_ft  = v_function_type(int, typ, 2, false);
    compare_ptr = v_pointer_type(compare_ft, 0);

//  typ[0] := void_ptr;                         //- key
    typ[1] := v_pointer_type(void_ptr, 0);      //- rootp
    typ[2] := compare_ptr;                      //- compar

    ft = v_function_type(void_ptr, typ, 3, false);
    v_add_symbol("tsearch", ft, 0);
    v_add_symbol("tfind", ft, 0);
    v_add_symbol("tdelete", ft, 0);

//  typ[0] := void_ptr;                         //- key

    free_ft  = v_function_type(void, typ, 1, false);
    free_ptr = v_pointer_type(free_ft, 0);

//  typ[0] := void_ptr;                         //- root
    typ[1] := free_ptr;                         //- free_node

    ft = v_function_type(void, typ, 2, false);
    v_add_symbol("tdestroy", ft, 0);

    v_add_type("void_ptr",   void_ptr);
    v_add_type("compare_ft", compare_ft);
    v_add_type("free_ft",    free_ft);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   f = v_function_hack("compare_nodes", compare_ft);

//  LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "lhs", void_ptr);
    v_add_parameter_name(f, 1, "rhs", void_ptr);
}
{
    lhs = *v_cast(lhs, node_ptr);
    rhs = *v_cast(rhs, node_ptr);

    lhs = v_cast(lhs[0], size_t);
    rhs = v_cast(rhs[0], size_t);

    if (lhs < rhs)  v_return(-1);
    if (lhs > rhs)  v_return(+1);

    v_return(0);
}

//---------------------------------------------------------------------
{   f = v_function_hack("free_node", free_ft);

//  LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_node", void_ptr);
}
{
    v_free(v_cast(void_node, node_ptr));
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   typ = v_alloca(v_type_ptr, 2);

    typ[0] := dict_ptr;
    typ[1] := int;

    ft = v_function_type(void, typ, 2, false);

    //-----------------------------------------------------------------
    f = v_function_hack("dict_initialize_impl", ft);

//  LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "dict",  dict_ptr);
    v_add_parameter_name(f, 1, "count", int);
}
{
    i = *v_alloca(int) := 0;

    loop
    {
        if (i >= count) v_break();

        dict[i] := 0;       //- All zeros

        ++i;
    }
}

//---------------------------------------------------------------------
{   typ = v_alloca(v_type_ptr, 2);

    typ[0] := dict_ptr;
    typ[1] := int;

    ft = v_function_type(void, typ, 2, false);

    //-----------------------------------------------------------------
    f = v_function_hack("dict_terminate_impl", ft);

//  LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "dict",  dict_ptr);
    v_add_parameter_name(f, 1, "count", int);
}
{
    i = *v_alloca(int) := 0;

    loop
    {
        if (i >= count) v_break();

        tdestroy(dict[i][0], free_node);

        ++i;
    }
}

{   v_util_register_initialize_impl(dict_t, "dict_initialize_impl");
    v_util_register_terminate_impl(dict_t, "dict_terminate_impl");
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   typ = v_alloca(v_type_ptr);

    typ[0] := dict_ptr;

    ft = v_function_type(size_t, typ, 1, false);

    //-----------------------------------------------------------------
    f = v_function_hack("dict_get_size", ft);

//  LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "dict",  dict_ptr);
}
{
    v_return(dict[0][1]);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   typ = v_alloca(v_type_ptr, 2);

    typ[0] := dict_ptr;
    typ[1] := v_type_ptr;

    ft = v_function_type(size_t, typ, 2, false);

    //-----------------------------------------------------------------
    f = v_function_hack("dict_find", ft);

//  LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "dict", dict_ptr);
    v_add_parameter_name(f, 1, "key",  v_type_ptr);
}
{
    r = tfind(&key, &dict[0][0], compare_nodes);

    if (!r) v_return(v_cast(-1, size_t));
    else    v_return(v_cast(r, node_ptr)[0][1]);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   typ = v_alloca(v_type_ptr, 2);

    typ[0] := dict_ptr;
    typ[1] := v_type_ptr;

    ft = v_function_type(void, typ, 2, false);

    //-----------------------------------------------------------------
    f = v_function_hack("dict_insert", ft);

//  LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "dict", dict_ptr);
    v_add_parameter_name(f, 1, "key",  v_type_ptr);
}
{
    //- assert(dict_find(key) != v_cast(-1, size_t));

    node = *v_malloc(node_t);

    d = dict[0];

    node[0] := key;
    node[1] := d[1]++;

    tsearch(&node, &d[0], compare_nodes);
}




//=====================================================================
{   v_import("printf.void"); }

//---------------------------------------------------------------------
{   typ = v_alloca(v_type_ptr, 3);

    typ[0] := void_ptr;         //- nodep
    typ[1] := int;              //- which
    typ[2] := int;              //- depth

    action_ft  = v_function_type(void, typ, 3, false);
    action_ptr = v_pointer_type(action_ft, 0);

//  typ[0] := void_ptr;         //- root
    typ[1] := action_ptr;       //- action

    ft = v_function_type(void, typ, 2, false);
    v_add_symbol("twalk", ft, 0);

    v_add_type("action_ft", action_ft);
}


//---------------------------------------------------------------------
{   f = v_function_hack("action_f", action_ft);

    v_add_parameter_name(f, 0, "nodep", void_ptr);
    v_add_parameter_name(f, 1, "which", int);
    v_add_parameter_name(f, 2, "depth", int);
}
{
    if (which == 0  ||  which == 2) v_return();

    node = **v_cast(nodep, **node_t);

    s = LLVMPrintTypeToString(v_type_get_llvm_type(node[0]));

    printf("%p: (%s, %d) - %d %d\n", node[0], s, v_cast(node[1], int), which, depth);

    LLVMDisposeMessage(s);
}


//---------------------------------------------------------------------
{
    dict = v_alloca(dict_t);
    v_initialize(dict);
    defer v_terminate(dict);

    w = *v_alloca(unsigned) := 1;

    loop
    {
        if (w >= 20)  v_break();

        t = v_int_type(w);

        dict_insert(dict, t);

        ++w;
    }

    twalk(dict[0][0], action_f);
}



{   v_import("level-00");
    v_import("level-01");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_level_01(); }


//---------------------------------------------------------------------
voidc_argc: &int;
voidc_argv: &**char;

{
    printf("argc: %d\n", voidc_argc);

    i: &int := 0;

    loop
    {
        if (i >= voidc_argc)  v_break();

        printf("argv[%d]: %s\n", i, voidc_argv[i]);

        ++i;
    }
}


//---------------------------------------------------------------------
strlen: (*const char) -> int;

{
    s = "0123456789";

    l = strlen(s);

    v = LLVMConstString(s, l, 0);

    str = LLVMPrintValueToString(v);

    printf("v: %s\n", str);

    LLVMDisposeMessage(str);

    v_add_constant("STR", v_array_type(char, l+1), v);
}


{ v_debug_print_module(1); }
{
    printf("%s\n", &STR);

    printf("%c\n", STR[7]);
}

//---------------------------------------------------------------------
mk_str_literal_intrinsic: (vis: voidc_visitor_ptr, *void,
                           arg_list: v_ast_expr_list_ptr, count: int) -> void
{
    expr = v_alloca(v_ast_opaque_expr_sptr);
    v_initialize(expr);
    defer v_terminate(expr);

    v_list_get_items(arg_list, 0, expr);

    name = v_ast_expr_identifier_get_name(expr);

    value = (v_find_symbol_value(name) : *char);

    v_ast_make_expr_string(expr, value);

    v_ast_accept_visitor((expr : v_ast_base_ptr), vis);
}

{   v_add_intrinsic("mk_str_literal", mk_str_literal_intrinsic, 0);
}


//---------------------------------------------------------------------
strdup: (*const char) -> *char;

{   s = strdup("QWERTY");

    v_add_symbol("qwerty", v_pointer_type(char, 0), s);
}


//---------------------------------------------------------------------
{ v_debug_print_module(1); }
{
    printf("qwerty: %s\n", mk_str_literal(qwerty));
}


//---------------------------------------------------------------------
{   v_mfree(qwerty);
}


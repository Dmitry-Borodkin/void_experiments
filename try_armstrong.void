{   v_import("mainline.void");

    v_import("llvm-c/Core.void");
}

{   v_enable_mainline(); }


//---------------------------------------------------------------------
//- (_²)  (_³)  ...

{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("q_op_postfix_squared", q_ref, q("v.op_postfix_squared"));
    v_add_symbol("q_op_postfix_cubed",   q_ref, q("v.op_postfix_cubed"));
}

{   op_squared: &v_ast_expr_t := {};
    op_cubed:   &v_ast_expr_t := {};

    v_ast_make_operator_unary(&op_squared, q_op_postfix_squared, 30000, 0);     //- "Postfix" priority
    v_ast_make_operator_unary(&op_cubed,   q_op_postfix_cubed,   30000, 0);     //- "Postfix" priority

    any: &v_std_any_t[2] := {};

    any_2 = any + 0;
    any_3 = any + 1;

    v_std_any_set_pointer(any_2, &op_squared);
    v_std_any_set_pointer(any_3, &op_cubed);

    gr0: &v_peg_grammar_t := {};    gr0 = &gr0;

    v_peg_get_grammar(gr0);

    grammar gr0
    {
    values:
        op_postfix_squared = any_2;
        op_postfix_cubed   = any_3;

    parsers:
        postfix =+ '²'  { op_postfix_squared }
                /  '³'  { op_postfix_cubed };
    }

    v_peg_set_grammar(gr0);
}

//---------------------------------------------------------------------
compile_op_postfix_fixpow: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    call = (self: *v_ast_expr_t);

    args = v_ast_expr_call_get_arg_list(call);

    ast = v_list_get_item(args, 1);

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor((ast: *v_ast_base_t), vis);

    t = v_get_result_type();
    v = v_get_result_value();

    compile_mul = voidc_internal_compile_mul_helper;

    vv: &LLVMValueRef := v;

    for (p: &int := (aux: int); p > 1; --p)
    {
        vv := compile_mul(t, vv, v);
    }

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(t, vv);
}

{   v_add_intrinsic_q(q_op_postfix_squared, compile_op_postfix_fixpow, (2: *void));
    v_add_intrinsic_q(q_op_postfix_cubed,   compile_op_postfix_fixpow, (3: *void));
}


//---------------------------------------------------------------------
{   double = float(64);

    ceil: (double) ~> double;
    log:  (double) ~> double;

    ND = (ceil(log(int.size*8 - 1) / (log(2) / log(10))) : int);

    v_add_constant("NUMDIGITS", int, LLVMConstInt(v_type_get_llvm_type(int), ND, 0));
}

digits_t = int[NUMDIGITS];


//---------------------------------------------------------------------
(_.digits): (n: int) ~> digits_t
{
    n: &int := n;

    ret = v_get_return_value();

    for (i: &int := 0; i < NUMDIGITS; ++i)
    {
        ret[i] := n % 10;

        n /= 10;
    }
}

//---------------------------------------------------------------------
is_armstrong: (n: int) ~> bool
{
    d: &digits_t := n.digits;

    sum: &int := 0;

    for (i: &int := 0; i < NUMDIGITS; ++i)
    {
        sum += d[i]³;
    }

    v_return(sum == n);
}


//---------------------------------------------------------------------
{   printf: (*const char, ...) ~> int;

    count: &int := 0;

    for (n: &int := 0; n < 1000; ++n)
    {
        if (!is_armstrong(n))   v_continue();

        printf("Armstrong number %d: %d\n", ++count, n);
    }
}



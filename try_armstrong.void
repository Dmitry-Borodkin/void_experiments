{   v_import("mainline.void");

    v_import("llvm-c/Core.void");
}

{   v_enable_mainline(); }


//---------------------------------------------------------------------
//- (_²)  (_³)  ...

{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("q_op_squared", q_ref, q("v.op_postfix_squared"));
    v_add_symbol("q_op_cubed",   q_ref, q("v.op_postfix_cubed"));

    v_add_symbol("op_squared_impl_q", q_ref, q("op_postfix_squared_impl"));
    v_add_symbol("op_cubed_impl_q",   q_ref, q("op_postfix_cubed_impl"));
}

{   op_squared: &v_ast_expr_t := {};
    op_cubed:   &v_ast_expr_t := {};

    v_ast_make_operator_unary(&op_squared, q_op_squared, 30000, 0);     //- "Postfix" priority
    v_ast_make_operator_unary(&op_cubed,   q_op_cubed,   30000, 0);     //- "Postfix" priority

    any: &v_std_any_t[2] := {};

    any_2 = any + 0;
    any_3 = any + 1;

    v_std_any_set_pointer(any_2, &op_squared);
    v_std_any_set_pointer(any_3, &op_cubed);

    grm = v_peg_get_grammar();

    grammar grm
    {
    values:
        op_postfix_squared = any_2;
        op_postfix_cubed   = any_3;

    parsers:
        postfix =+ '²'  { op_postfix_squared }
                /  '³'  { op_postfix_cubed };
    }
}

//---------------------------------------------------------------------
compile_op_unary_impl: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    arg = v_list_get_item(v_ast_expr_call_get_arg_list((self: *v_ast_expr_t)), 1);

    elst: &v_ast_expr_list_t := {};

    v_make_list(&elst, arg);

    expr: &v_ast_expr_t := {};

    v_ast_make_expr_identifier_q(&expr, (aux: v_quark_t));

    v_ast_make_expr_call(&expr, &expr, &elst);

    v_ast_accept_visitor(&expr, vis);
}

{   v_add_intrinsic_q(q_op_squared, compile_op_unary_impl, (op_squared_impl_q: *void));
    v_add_intrinsic_q(q_op_cubed,   compile_op_unary_impl, (op_cubed_impl_q:   *void));
}

//---------------------------------------------------------------------
#define op_postfix_squared_impl: (x)  =  x*x;
#define op_postfix_cubed_impl:   (x)  =  x*x*x;


//---------------------------------------------------------------------
{   double = float(64);

    ceil: (double) ~> double;
    log:  (double) ~> double;

    ND = (ceil((int.sizeof*8 - 1) * (log(2) / log(10))) : int);

    v_add_constant("NUMDIGITS", int, LLVMConstInt(v_type_get_llvm_type(int), ND, 0));
}

digits_t = int[NUMDIGITS];


//---------------------------------------------------------------------
(_.digits): (n: int) ~> digits_t
{
    n: &int := n;

    ret = v_get_return_value();

    for (i: &int := 0; i < NUMDIGITS; ++i)
    {
        ret[i] := n % 10;

        n /= 10;
    }
}

//---------------------------------------------------------------------
is_armstrong: (n: int) ~> bool
{
    d: &digits_t := n.digits;

    sum: &int := 0;

    for (i: &int := 0; i < NUMDIGITS; ++i)
    {
        sum += d[i]³;
    }

    v_return(sum == n);
}


//---------------------------------------------------------------------
{   printf: (*const char, ...) ~> int;

    count: &int := 0;

    for (n: &int := 0; n < 1000; ++n)
    {
        if (!is_armstrong(n))   v_continue();

        printf("Armstrong number %d: %d\n", ++count, n);
    }
}



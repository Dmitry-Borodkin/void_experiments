{   v_import("mainline.void");

    v_import("llvm-c/Core.void");
}
{   v_enable_mainline(); }

//---------------------------------------------------------------------
printf: (*const char, ...) ~> int;


//=====================================================================


//---------------------------------------------------------------------
//- (_.kind): (v_static_type_t) ~> int;
//---------------------------------------------------------------------
my_static_type_kind_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                               ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    k = v_kind(type);

    t = v_find_type("int");
    v = LLVMConstInt(v_type_get_llvm_type(t), k, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
{   v_add_overload(".kind", v_static_type_t, "my.static_type_kind");

    v_add_intrinsic("my.static_type_kind", my_static_type_kind_intrinsic, 0);
}


//---------------------------------------------------------------------
static_types_table: &(*const char)[][2] :=
{
    { "", "" },                     //- Sic!
    { "_void", "" },
    { "_floating_point", "" },
        { "_f16",  "_floating_point" },
        { "_f32",  "_floating_point" },
        { "_f64",  "_floating_point" },
        { "_f128", "_floating_point" },
    { "_integer", "" },
        { "_int",  "_integer" },
        { "_uint", "_integer" },
    { "_function", "" },
    { "_refptr", "" },
        { "_pointer",   "_refptr" },
        { "_reference", "_refptr" },
    { "_struct", "" },
    { "_array", "" },
    { "_vector_base", "" },
        { "_vector",  "_vector_base" },
        { "_svector", "_vector_base" },
    { "_generic", "" },

    { 0 }
};

//---------------------------------------------------------------------
build_hierarchy: (tag: *const char, table: *(*const char)[2]) ~> void
{
    sstr: &v_std_string_t := {};

    for (i: &int := 0; table[i][0]; ++i)
    {
        quark_0: &v_quark_t := v_undef();
        type_0:  &*v_type_t := v_undef();

        for (j: &int := 0; j < 2; ++j)
        {
            if (i == 0  &&  j == 1) v_continue();           //- Sic!

            v_std_string_set(&sstr, "v_static_");

            v_std_string_append(&sstr, tag);
            v_std_string_append(&sstr, table[i][j]);
            v_std_string_append(&sstr, "_t");

            qname = v_quark_from_string(v_std_string_get(&sstr));

            type = v_generic_type(qname, 0, 0);

            v_std_string_set(&sstr, "v.convert_to_static_");

            v_std_string_append(&sstr, tag);
            v_std_string_append(&sstr, table[i][j]);
            v_std_string_append(&sstr, "_t");

            quark = v_quark_from_string(v_std_string_get(&sstr));

            if (j == 0)             //- Derived
            {
                type_0 := type;

                if (i != 0) v_add_type_q(qname, type);

                quark_0 := quark;

                v_add_intrinsic_q(quark, voidc_trivial_coercion_intrinsic, type);
            }
            else    //- j == 1        - Base
            {
                v_assert(i != 0);

                v_add_coercion(v_coe_projective, quark, quark_0, type_0, type);
            }
        }
    }
}

//---------------------------------------------------------------------
{   build_hierarchy("type", static_types_table);
}


//---------------------------------------------------------------------
my_static_type_predicate_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                     arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                    ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    fun = (aux: *((*v_type_t) ~> bool));

    v = fun(type);

    t = v_uint_type(1);
    v = LLVMConstInt(v_type_get_llvm_type(t), v, 0);

    v_adopt_result(t, v);
}

{   v_add_overload(".is_void",           v_static_type_t,             "my.static_type_is_void");
    v_add_overload(".is_floating_point", v_static_type_t,             "my.static_type_is_floating_point");
    v_add_overload(".is_integer",        v_static_type_t,             "my.static_type_is_integer");
    v_add_overload(".is_signed",         v_static_type_integer_t,     "my.static_type_is_signed");
    v_add_overload(".is_function",       v_static_type_t,             "my.static_type_is_function");
    v_add_overload(".is_var_arg",        v_static_type_function_t,    "my.static_type_is_var_arg");
    v_add_overload(".is_pointer",        v_static_type_refptr_t,      "my.static_type_is_pointer");
    v_add_overload(".is_reference",      v_static_type_refptr_t,      "my.static_type_is_reference");
    v_add_overload(".is_struct",         v_static_type_t,             "my.static_type_is_struct");
    v_add_overload(".is_opaque",         v_static_type_struct_t,      "my.static_type_is_opaque");
    v_add_overload(".is_packed",         v_static_type_struct_t,      "my.static_type_is_packed");
    v_add_overload(".is_array",          v_static_type_t,             "my.static_type_is_array");
    v_add_overload(".is_vector",         v_static_type_t,             "my.static_type_is_vector");
    v_add_overload(".is_scalable",       v_static_type_vector_base_t, "my.static_type_is_scalable");
    v_add_overload(".is_generic",        v_static_type_t,             "my.static_type_is_generic");

    f = my_static_type_predicate_intrinsic;

    v_add_intrinsic("my.static_type_is_void",           f, v_type_is_void);
    v_add_intrinsic("my.static_type_is_floating_point", f, v_type_is_floating_point);
    v_add_intrinsic("my.static_type_is_integer",        f, v_type_is_integer);
    v_add_intrinsic("my.static_type_is_signed",         f, v_type_integer_is_signed);
    v_add_intrinsic("my.static_type_is_function",       f, v_type_is_function);
    v_add_intrinsic("my.static_type_is_var_arg",        f, v_type_function_is_var_arg);
    v_add_intrinsic("my.static_type_is_pointer",        f, v_type_is_pointer);
    v_add_intrinsic("my.static_type_is_reference",      f, v_type_is_reference);
    v_add_intrinsic("my.static_type_is_struct",         f, v_type_is_struct);
    v_add_intrinsic("my.static_type_is_opaque",         f, v_type_struct_is_opaque);
    v_add_intrinsic("my.static_type_is_packed",         f, v_type_struct_is_packed);
    v_add_intrinsic("my.static_type_is_array",          f, v_type_is_array);
    v_add_intrinsic("my.static_type_is_vector",         f, v_type_is_vector);
    v_add_intrinsic("my.static_type_is_scalable",       f, v_type_vector_is_scalable);
    v_add_intrinsic("my.static_type_is_generic",        f, v_type_is_generic);
}


//---------------------------------------------------------------------
#define (_.is_refptr): (t: v_static_type_t) ~> bool  =  t.kind == v_type_kind_pointer  ||  t.kind == v_type_kind_reference;

//---------------------------------------------------------------------
#define (_.as_void):           (t: v_static_type_t)  =  (t: v_static_type_void_t);
#define (_.as_floating_point): (t: v_static_type_t)  =  (t: v_static_type_floating_point_t);

#define (_.as_f16):  (t: v_static_type_floating_point_t)  =  (t: v_static_type_f16_t);
#define (_.as_f16):  (t: v_static_type_t)                 =  (t: v_static_type_f16_t);
#define (_.as_f32):  (t: v_static_type_floating_point_t)  =  (t: v_static_type_f32_t);
#define (_.as_f32):  (t: v_static_type_t)                 =  (t: v_static_type_f32_t);
#define (_.as_f64):  (t: v_static_type_floating_point_t)  =  (t: v_static_type_f64_t);
#define (_.as_f64):  (t: v_static_type_t)                 =  (t: v_static_type_f64_t);
#define (_.as_f128): (t: v_static_type_floating_point_t)  =  (t: v_static_type_f128_t);
#define (_.as_f128): (t: v_static_type_t)                 =  (t: v_static_type_f128_t);

#define (_.as_integer): (t: v_static_type_t)  =  (t: v_static_type_integer_t);

#define (_.as_int):  (t: v_static_type_integer_t)  =  (t: v_static_type_int_t);
#define (_.as_int):  (t: v_static_type_t)          =  (t: v_static_type_int_t);
#define (_.as_uint): (t: v_static_type_integer_t)  =  (t: v_static_type_uint_t);
#define (_.as_uint): (t: v_static_type_t)          =  (t: v_static_type_uint_t);

#define (_.as_function): (t: v_static_type_t)  =  (t: v_static_type_function_t);

#define (_.as_refptr): (t: v_static_type_t)  =  (t: v_static_type_refptr_t);

#define (_.as_pointer):   (t: v_static_type_refptr_t)  =  (t: v_static_type_pointer_t);
#define (_.as_pointer):   (t: v_static_type_t)         =  (t: v_static_type_pointer_t);
#define (_.as_reference): (t: v_static_type_refptr_t)  =  (t: v_static_type_reference_t);
#define (_.as_reference): (t: v_static_type_t)         =  (t: v_static_type_reference_t);

#define (_.as_struct): (t: v_static_type_t)  =  (t: v_static_type_struct_t);

#define (_.as_array): (t: v_static_type_t)  =  (t: v_static_type_array_t);

#define (_.as_vector_base): (t: v_static_type_t)  =  (t: v_static_type_vector_base_t);

#define (_.as_vector):  (t: v_static_type_vector_base_t)  =  (t: v_static_type_vector_t);
#define (_.as_vector):  (t: v_static_type_t)              =  (t: v_static_type_vector_t);
#define (_.as_svector): (t: v_static_type_vector_base_t)  =  (t: v_static_type_svector_t);
#define (_.as_svector): (t: v_static_type_t)              =  (t: v_static_type_svector_t);

#define (_.as_generic): (t: v_static_type_t)  =  (t: v_static_type_generic_t);


//---------------------------------------------------------------------
my_static_arg_kind_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                               ) ~> void
{
    garg = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_generic_arg_t);

    k = v_kind(garg);

    t = v_find_type("int");
    v = LLVMConstInt(v_type_get_llvm_type(t), k, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
{   v_add_type("v_static_generic_arg_t", v_generic_type(v_quark_from_string("v_static_generic_arg_t"), 0, 0));
}

//---------------------------------------------------------------------
{   v_add_overload(".kind", v_static_generic_arg_t, "my.static_arg_kind");

    v_add_intrinsic("my.static_arg_kind", my_static_arg_kind_intrinsic, 0);
}


//---------------------------------------------------------------------
static_generic_args_table: &(*const char)[][2] :=
{
    { "", "" },                     //- Sic!
    { "_number", "" },
    { "_string", "" },
    { "_quark", "" },
    { "_type", "" },
    { "_cons", "" },

    { 0 }
};

//---------------------------------------------------------------------
{   build_hierarchy("generic_arg", static_generic_args_table);
}


//---------------------------------------------------------------------
my_static_arg_predicate_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                    arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                   ) ~> void
{
    garg = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_generic_arg_t);

    fun = (aux: *((*v_type_generic_arg_t) ~> bool));

    v = fun(garg);

    t = v_uint_type(1);
    v = LLVMConstInt(v_type_get_llvm_type(t), v, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
{   v_add_overload(".is_number", v_static_generic_arg_t, "my.static_arg_is_number");
    v_add_overload(".is_string", v_static_generic_arg_t, "my.static_arg_is_string");
    v_add_overload(".is_quark",  v_static_generic_arg_t, "my.static_arg_is_quark");
    v_add_overload(".is_type",   v_static_generic_arg_t, "my.static_arg_is_type");
    v_add_overload(".is_cons",   v_static_generic_arg_t, "my.static_arg_is_cons");

    f = my_static_arg_predicate_intrinsic;

    v_add_intrinsic("my.static_arg_is_number", f, v_type_generic_arg_is_number);
    v_add_intrinsic("my.static_arg_is_string", f, v_type_generic_arg_is_string);
    v_add_intrinsic("my.static_arg_is_quark",  f, v_type_generic_arg_is_quark);
    v_add_intrinsic("my.static_arg_is_type",   f, v_type_generic_arg_is_type);
    v_add_intrinsic("my.static_arg_is_cons",   f, v_type_generic_arg_is_cons);
}


//---------------------------------------------------------------------
#define (_.as_number): (t: v_static_generic_arg_t)  =  (t: v_static_generic_arg_number_t);
#define (_.as_string): (t: v_static_generic_arg_t)  =  (t: v_static_generic_arg_string_t);
#define (_.as_quark):  (t: v_static_generic_arg_t)  =  (t: v_static_generic_arg_quark_t);
#define (_.as_type):   (t: v_static_generic_arg_t)  =  (t: v_static_generic_arg_type_t);
#define (_.as_cons):   (t: v_static_generic_arg_t)  =  (t: v_static_generic_arg_cons_t);


//---------------------------------------------------------------------
my_static_type_get_unsigned_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                        arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                       ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    fun = (aux: *((*v_type_t) ~> unsigned));

    w = fun(type);

    t = v_find_type("unsigned");
    v = LLVMConstInt(v_type_get_llvm_type(t), w, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
{   v_add_overload(".width",         v_static_type_floating_point_t, "my.static_type_floating_point_width");
    v_add_overload(".width",         v_static_type_integer_t,        "my.static_type_integer_width");
    v_add_overload(".param_count",   v_static_type_function_t,       "my.static_type_function_param_count");
    v_add_overload(".address_space", v_static_type_refptr_t,         "my.static_type_refptr_address_space");
    v_add_overload(".vsize",         v_static_type_vector_base_t,    "my.static_type_vector_size");
    v_add_overload(".element_count", v_static_type_struct_t,         "my.static_type_struct_element_count");
    v_add_overload(".arg_count",     v_static_type_generic_t,        "my.static_type_generic_arg_count");

    f = my_static_type_get_unsigned_intrinsic;

    v_add_intrinsic("my.static_type_floating_point_width", f, v_type_floating_point_get_width);
    v_add_intrinsic("my.static_type_integer_width",        f, v_type_integer_get_width);
    v_add_intrinsic("my.static_type_function_param_count", f, v_type_function_get_param_count);
    v_add_intrinsic("my.static_type_refptr_address_space", f, v_type_refptr_get_address_space);
    v_add_intrinsic("my.static_type_vector_size",          f, v_type_vector_get_size);
    v_add_intrinsic("my.static_type_struct_element_count", f, v_type_struct_get_element_count);
    v_add_intrinsic("my.static_type_generic_arg_count",    f, v_type_generic_get_arg_count);
}


//---------------------------------------------------------------------
my_static_type_get_type_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                    arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                   ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    fun = (aux: *((*v_type_t) ~> *v_type_t));

    t = fun(type);

    v_set_result_type(v_static_type_t);
    v_set_result_value((t: LLVMValueRef));
}

//---------------------------------------------------------------------
{   v_add_overload(".return_type",   v_static_type_function_t,       "my.static_type_function_return_type");
    v_add_overload(".element_type",  v_static_type_refptr_t,         "my.static_type_refptr_element_type");
    v_add_overload(".element_type",  v_static_type_array_t,          "my.static_type_array_element_type");
    v_add_overload(".element_type",  v_static_type_vector_base_t,    "my.static_type_vector_element_type");
    v_add_overload(".scalar_type",   v_static_type_t,                "my.static_type_scalar_type");

    f = my_static_type_get_type_intrinsic;

    v_add_intrinsic("my.static_type_function_return_type", f, v_type_function_get_return_type);
    v_add_intrinsic("my.static_type_refptr_element_type",  f, v_type_refptr_get_element_type);
    v_add_intrinsic("my.static_type_array_element_type",   f, v_type_array_get_element_type);
    v_add_intrinsic("my.static_type_vector_element_type",  f, v_type_vector_get_element_type);
    v_add_intrinsic("my.static_type_scalar_type",          f, v_type_get_scalar_type);
}


//---------------------------------------------------------------------
{   v_add_type("v_static_array_of_types_t", v_generic_type(v_quark_from_string("v_static_array_of_types_t"), 0, 0));
}

//---------------------------------------------------------------------
my_static_type_get_types_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                     arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                    ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    fun = (aux: *((*v_type_t) ~> **v_type_t));

    ts = fun(type);

    v_set_result_type(v_static_array_of_types_t);
    v_set_result_value((ts: LLVMValueRef));
}

//---------------------------------------------------------------------
{   v_add_overload(".param_types",   v_static_type_function_t, "my.static_type_function_param_types");
    v_add_overload(".element_types", v_static_type_struct_t,   "my.static_type_struct_element_types");

    f = my_static_type_get_types_intrinsic;

    v_add_intrinsic("my.static_type_function_param_types", f, v_type_function_get_param_types);
    v_add_intrinsic("my.static_type_struct_element_types", f, v_type_struct_get_element_types);
}


//---------------------------------------------------------------------
my_static_array_of_types_index_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                           arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                          ) ~> void
{
    types = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : **v_type_t);

    v_set_result_type(v_find_type("unsigned"));
    v_set_result_value(0);

    v_ast_accept_visitor(arg_ptrs[1], vis);

    i = v_get_result_value();

    i = LLVMConstIntGetZExtValue(i);

    t = types[i];

    v_set_result_type(v_static_type_t);
    v_set_result_value((t: LLVMValueRef));
}

//---------------------------------------------------------------------
{   v_add_overload("v.op_postfix_index", v_static_array_of_types_t, "my.static_array_of_types_index");

    v_add_intrinsic("my.static_array_of_types_index", my_static_array_of_types_index_intrinsic,  0);
}

//---------------------------------------------------------------------
my_static_type_array_length_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                        arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                       ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    l = v_type_array_get_length(type);

    t = v_uint_type(64);
    v = LLVMConstInt(v_type_get_llvm_type(t), l, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
{   v_add_overload(".length", v_static_type_array_t, "my.static_type_array_length");

    v_add_intrinsic("my.static_type_array_length", my_static_type_array_length_intrinsic, 0);
}


//---------------------------------------------------------------------
{   v_add_type("v_static_quark_t",  v_generic_type(v_quark_from_string("v_static_quark_t"),  0, 0));
    v_add_type("v_static_string_t", v_generic_type(v_quark_from_string("v_static_string_t"), 0, 0));
}


//---------------------------------------------------------------------
my_static_type_get_quark_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                     arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                    ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    fun = (aux: *((*v_type_t) ~> v_quark_t));

    q = fun(type);

    v_set_result_type(v_static_quark_t);
    v_set_result_value((q: LLVMValueRef));
}

//---------------------------------------------------------------------
{   v_add_overload(".name", v_static_type_struct_t,  "my.static_type_struct_name");
    v_add_overload(".cons", v_static_type_generic_t, "my.static_type_generic_cons");

    f = my_static_type_get_quark_intrinsic;

    v_add_intrinsic("my.static_type_struct_name",  f, v_type_struct_get_name_q);
    v_add_intrinsic("my.static_type_generic_cons", f, v_type_generic_get_cons);
}


//---------------------------------------------------------------------
{   name = "v_static_array_of_generic_args_t";

    v_add_type(name, v_generic_type(v_quark_from_string(name), 0, 0));
}

//---------------------------------------------------------------------
my_static_type_generic_args_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                        arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                       ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    args = v_type_generic_get_args(type);

    v_set_result_type(v_static_array_of_generic_args_t);
    v_set_result_value((args: LLVMValueRef));
}

//---------------------------------------------------------------------
{   v_add_overload(".args", v_static_type_generic_t, "my.static_type_generic_args");

    v_add_intrinsic("my.static_type_generic_args", my_static_type_generic_args_intrinsic, 0);
}


//---------------------------------------------------------------------
my_static_array_of_generic_args_index_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                                  arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                                 ) ~> void
{
    args = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : **v_type_generic_arg_t);

    v_set_result_type(v_find_type("unsigned"));
    v_set_result_value(0);

    v_ast_accept_visitor(arg_ptrs[1], vis);

    i = v_get_result_value();

    i = LLVMConstIntGetZExtValue(i);

    a = args[i];

    v_set_result_type(v_static_generic_arg_t);
    v_set_result_value((a: LLVMValueRef));
}

//---------------------------------------------------------------------
{   v_add_overload("v.op_postfix_index", v_static_array_of_generic_args_t, "my.static_array_of_genereic_args_index");

    v_add_intrinsic("my.static_array_of_generic_args_index", my_static_array_of_generic_args_index_intrinsic,  0);
}


//---------------------------------------------------------------------
my_static_generic_arg_number_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                         arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                        ) ~> void
{
    garg = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_generic_arg_t);

    n = v_type_generic_arg_number_get_number(garg);

    t = v_uint_type(64);
    v = LLVMConstInt(v_type_get_llvm_type(t), n, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
my_static_generic_arg_string_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                         arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                        ) ~> void
{
    garg = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_generic_arg_t);

    s = v_type_generic_arg_string_get_string(garg);

    v_set_result_type(v_static_string_t);
    v_set_result_value((s: LLVMValueRef));
}

//---------------------------------------------------------------------
my_static_generic_arg_quark_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                        arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                       ) ~> void
{
    garg = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_generic_arg_t);

    q = v_type_generic_arg_quark_get_quark(garg);

    v_set_result_type(v_static_quark_t);
    v_set_result_value((q: LLVMValueRef));
}

//---------------------------------------------------------------------
my_static_generic_arg_type_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                       arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                      ) ~> void
{
    garg = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_generic_arg_t);

    t = v_type_generic_arg_type_get_type(garg);

    v_set_result_type(v_static_type_t);
    v_set_result_value((t: LLVMValueRef));
}

//---------------------------------------------------------------------
my_static_generic_arg_cons_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                       arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                      ) ~> void
{
    garg = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_generic_arg_t);

    q = v_type_generic_arg_cons_get_cons(garg);

    v_set_result_type(v_static_quark_t);
    v_set_result_value((q: LLVMValueRef));
}

//---------------------------------------------------------------------
my_static_generic_arg_count_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                        arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                       ) ~> void
{
    garg = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_generic_arg_t);

    n = v_type_generic_arg_cons_get_arg_count(garg);

    t = v_find_type("unsigned");
    v = LLVMConstInt(v_type_get_llvm_type(t), n, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
my_static_generic_args_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                   arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                  ) ~> void
{
    garg = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_generic_arg_t);

    args = v_type_generic_arg_cons_get_args(garg);

    v_set_result_type(v_static_array_of_generic_args_t);
    v_set_result_value((args: LLVMValueRef));
}

//---------------------------------------------------------------------
{   v_add_overload(".number",    v_static_generic_arg_number_t, "my.static_generic_arg_number");
    v_add_overload(".string",    v_static_generic_arg_string_t, "my.static_generic_arg_string");
    v_add_overload(".quark",     v_static_generic_arg_quark_t,  "my.static_generic_arg_quark");
    v_add_overload(".type",      v_static_generic_arg_type_t,   "my.static_generic_arg_type");
    v_add_overload(".cons",      v_static_generic_arg_cons_t,   "my.static_generic_arg_cons");
    v_add_overload(".arg_count", v_static_generic_arg_cons_t,   "my.static_generic_arg_count");
    v_add_overload(".args",      v_static_generic_arg_cons_t,   "my.static_generic_args");

    v_add_intrinsic("my.static_generic_arg_number", my_static_generic_arg_number_intrinsic, 0);
    v_add_intrinsic("my.static_generic_arg_string", my_static_generic_arg_string_intrinsic, 0);
    v_add_intrinsic("my.static_generic_arg_quark",  my_static_generic_arg_quark_intrinsic,  0);
    v_add_intrinsic("my.static_generic_arg_type",   my_static_generic_arg_type_intrinsic,   0);
    v_add_intrinsic("my.static_generic_arg_cons",   my_static_generic_arg_cons_intrinsic,   0);
    v_add_intrinsic("my.static_generic_arg_count",  my_static_generic_arg_count_intrinsic,  0);
    v_add_intrinsic("my.static_generic_args",       my_static_generic_args_intrinsic,       0);
}


//---------------------------------------------------------------------
my_static_array_of_generic_args_index_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                                  arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                                 ) ~> void
{
    args = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : **v_type_generic_arg_t);

    v_set_result_type(v_find_type("unsigned"));
    v_set_result_value(0);

    v_ast_accept_visitor(arg_ptrs[1], vis);

    i = v_get_result_value();

    i = LLVMConstIntGetZExtValue(i);

    a = args[i];

    v_set_result_type(v_static_generic_arg_t);
    v_set_result_value((a: LLVMValueRef));
}

//---------------------------------------------------------------------
{   v_add_overload("v.op_postfix_index", v_static_array_of_generic_args_t, "my.static_array_of_generic_args_index");

    v_add_intrinsic("my.static_array_of_generic_argss_index", my_static_array_of_generic_args_index_intrinsic,  0);
}


//---------------------------------------------------------------------
my_static_quark_string_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                   arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                  ) ~> void
{
    q = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : v_quark_t);

    expr: &v_ast_expr_t := {};

    v_ast_make_expr_string(&expr, v_quark_to_string(q));

    v_ast_accept_visitor(&expr, vis);
}

//---------------------------------------------------------------------
my_static_string_string_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                    arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                   ) ~> void
{
    s = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_std_string_t);

    expr: &v_ast_expr_t := {};

    v_ast_make_expr_string_data(&expr, v_std_string_get(s), v_std_string_get_size(s));

    v_ast_accept_visitor(&expr, vis);
}

//---------------------------------------------------------------------
{   v_add_overload(".string", v_static_quark_t,  "my.static_quark_string");
    v_add_overload(".string", v_static_string_t, "my.static_string_string");

    v_add_intrinsic("my.static_quark_string",  my_static_quark_string_intrinsic,  0);
    v_add_intrinsic("my.static_string_string", my_static_string_string_intrinsic, 0);
}






//---------------------------------------------------------------------
{
    printf("void.is_void = %d\n", (void.is_void : int));
    printf("long.is_void = %d\n", (long.is_void : int));

    printf("int(17).is_integer = %d\n", (int(17).is_integer : int));

    printf("int(17).as_integer.width = %u\n", int(17).as_integer.width);

}


//---------------------------------------------------------------------
{   s: &v_std_string_t := {};

    a0 = v_type_generic_number_arg(777);
    a1 = v_type_generic_string_arg(&s);
    a2 = v_type_generic_quark_arg(v_quark_from_string("qwerty"));

    v_add_constant("a777", v_static_generic_arg_t, (a0: LLVMValueRef));
    v_add_constant("aSSS", v_static_generic_arg_t, (a1: LLVMValueRef));
    v_add_constant("aQQQ", v_static_generic_arg_t, (a2: LLVMValueRef));
}

//---------------------------------------------------------------------
{
    printf("a777.is_number = %d\n", a777.is_number);
    printf("a777.is_string = %d\n", a777.is_string);
    printf("a777.is_quark  = %d\n", a777.is_quark);

    printf("aSSS.is_number = %d\n", aSSS.is_number);
    printf("aSSS.is_string = %d\n", aSSS.is_string);
    printf("aSSS.is_quark  = %d\n", aSSS.is_quark);

    printf("aQQQ.is_number = %d\n", aQQQ.is_number);
    printf("aQQQ.is_string = %d\n", aQQQ.is_string);
    printf("aQQQ.is_quark  = %d\n", aQQQ.is_quark);

    printf("a777.kind = %d\n", a777.kind);
    printf("aSSS.kind = %d\n", aSSS.kind);
    printf("aQQQ.kind = %d\n", aQQQ.kind);
}


//---------------------------------------------------------------------
{   ft = (*const char, ...) ~> int;

    printf("ft.as_function.is_var_arg  = %d\n", (ft.as_function.is_var_arg : int));
    printf("ft.as_function.param_count = %u\n", ft.as_function.param_count);

    printf("ft.as_function.param_types[0].is_refptr = %d\n",
           (ft.as_function.param_types[0].is_refptr : int));

    printf("ft.as_function.param_types[0].as_refptr.is_pointer = %d\n",
           (ft.as_function.param_types[0].as_refptr.is_pointer : int));
}



//---------------------------------------------------------------------
v_typeof_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_list_get_item(args, 0), vis);        //- Sic !!!

    t = v_get_result_type();

    v_set_result_type(v_static_type_t);
    v_set_result_value((t: LLVMValueRef));
}

//---------------------------------------------------------------------
eq_types_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("eq_types_intrinsic start\n");
//defer printf("eq_types_intrinsic stop\n");

    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_list_get_item(args, 0), vis);

    v0 = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_list_get_item(args, 1), vis);

    v1 = v_get_result_value();

    tr = v_uint_type(1);
    vr = LLVMConstInt(v_type_get_llvm_type(tr), v0 == v1, false);

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(tr, vr);
}

//---------------------------------------------------------------------
{   v_add_intrinsic("v_typeof", v_typeof_intrinsic, 0);
    v_add_intrinsic("eq_types", eq_types_intrinsic, 0);
}

//---------------------------------------------------------------------
#define (_==_): (a: v_static_type_t, b: v_static_type_t) ~> bool  =  eq_types(a, b);


//---------------------------------------------------------------------
{
    t = v_typeof("Hello world!\n");

    printf("t.is_array = %d\n", (t.is_array : int));

    printf("t.as_array.element_type == char = %d\n", (t.as_array.element_type == char : int));

    printf("t.as_array.length = %u\n", t.as_array.length);

}


//---------------------------------------------------------------------
{
    t = v_static_type_t;

    printf("t = v_static_type_t\n");

    printf("t.is_generic = %d\n", (t.is_generic : int));

    printf("t.as_generic.cons.string = %s\n", t.as_generic.cons.string);
    printf("t.as_generic.arg_count = %u\n",   t.as_generic.arg_count);

    t = int[];

    printf("t = int[]\n");

    printf("t.is_generic = %d\n", (t.is_generic : int));

    printf("t.as_generic.cons.string = %s\n", t.as_generic.cons.string);
    printf("t.as_generic.arg_count = %u\n",   t.as_generic.arg_count);

    printf("t.as_generic.args[0].as_type.type == int  =  %d\n",
           (t.as_generic.args[0].as_type.type == int : int));
}



//---------------------------------------------------------------------
struct FILE;

stdout: &*FILE;

fprintf: (*FILE, *const char, ...) ~> int;

//---------------------------------------------------------------------
#define (_<<_): (f: *FILE, v) ~> *FILE  =
{
    t = v_typeof(v);

#if (t.is_array  &&  t.as_array.element_type == char)

    fprintf(f, "%s", v);

#else

    v.print_to_file(f);

#endif

    f
};

//---------------------------------------------------------------------
#define (_.print_to_file()): (v: int, f: *FILE)  =  fprintf(f, "%d", v);

#define (_.print_to_file()): (v: unsigned, f: *FILE)  =  fprintf(f, "%u", v);

#define (_.print_to_file()): (v: bool, f: *FILE)  =
{
    s: &*const char := v_undef();

    if (v)  s := "true";
    else    s := "false";

    fprintf(f, s)
};


//{ v_debug_print_module(1); }
//---------------------------------------------------------------------
{
    v: int = 777;

    stdout << "v: " << v << "\n";

    stdout << "(0 > v): " << (0 > v) << "\n";
}


//---------------------------------------------------------------------
#define
(_.is_pointer):   (t: v_static_type_t) ~> bool  =  t.is_refptr  &&  t.as_refptr.is_pointer;

#define
(_.is_reference): (t: v_static_type_t) ~> bool  =  t.is_refptr  &&  t.as_refptr.is_reference;


int_ptr: v_static_type_t = *int;


#if (int_ptr.is_pointer)
    #note ("int_ptr is a pointer")
#else
    #note ("int_ptr is NOT a pointer")
#endif


//---------------------------------------------------------------------














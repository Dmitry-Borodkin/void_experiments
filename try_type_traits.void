{   v_import("mainline.void");

    v_import("llvm-c/Core.void");
}
{   v_enable_mainline(); }

//---------------------------------------------------------------------
printf: (*const char, ...) ~> int;


//=====================================================================


//---------------------------------------------------------------------
my_static_type_kind_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                               ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    k = v_kind(type);

    t = v_find_type("int");
    v = LLVMConstInt(v_type_get_llvm_type(t), k, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
{   v_add_overload(".kind", v_static_type_t, "my.static_type_kind");

    v_add_intrinsic("my.static_type_kind", my_static_type_kind_intrinsic, 0);
}

//---------------------------------------------------------------------
{   v_add_constant("v_static_type_t", v_static_type_t, (v_static_type_t: LLVMValueRef));        //- Sic !?!
}


//---------------------------------------------------------------------
my_static_type_predicate_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                     arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                    ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    fun = (aux: *((*v_type_t) ~> bool));

    v = fun(type);

    t = v_uint_type(1);
    v = LLVMConstInt(v_type_get_llvm_type(t), v, 0);

    v_adopt_result(t, v);
}

{   v_add_overload(".is_void",           v_static_type_t, "my.static_type_is_void");
    v_add_overload(".is_floating_point", v_static_type_t, "my.static_type_is_floating_point");
    v_add_overload(".is_integer",        v_static_type_t, "my.static_type_is_integer");
    v_add_overload(".is_signed",         v_static_type_t, "my.static_type_is_signed");
    v_add_overload(".is_function",       v_static_type_t, "my.static_type_is_function");
    v_add_overload(".is_var_arg",        v_static_type_t, "my.static_type_is_var_arg");
    v_add_overload(".is_pointer",        v_static_type_t, "my.static_type_is_pointer");
    v_add_overload(".is_reference",      v_static_type_t, "my.static_type_is_reference");
    v_add_overload(".is_struct",         v_static_type_t, "my.static_type_is_struct");
    v_add_overload(".is_opaque",         v_static_type_t, "my.static_type_is_opaque");
    v_add_overload(".is_packed",         v_static_type_t, "my.static_type_is_packed");
    v_add_overload(".is_array",          v_static_type_t, "my.static_type_is_array");
    v_add_overload(".is_vector",         v_static_type_t, "my.static_type_is_vector");
    v_add_overload(".is_scalable",       v_static_type_t, "my.static_type_is_scalable");
    v_add_overload(".is_generic",        v_static_type_t, "my.static_type_is_generic");

    v_add_intrinsic("my.static_type_is_void",           my_static_type_predicate_intrinsic, v_type_is_void);
    v_add_intrinsic("my.static_type_is_floating_point", my_static_type_predicate_intrinsic, v_type_is_floating_point);
    v_add_intrinsic("my.static_type_is_integer",        my_static_type_predicate_intrinsic, v_type_is_integer);
    v_add_intrinsic("my.static_type_is_signed",         my_static_type_predicate_intrinsic, v_type_integer_is_signed);
    v_add_intrinsic("my.static_type_is_function",       my_static_type_predicate_intrinsic, v_type_is_function);
    v_add_intrinsic("my.static_type_is_var_arg",        my_static_type_predicate_intrinsic, v_type_function_is_var_arg);
    v_add_intrinsic("my.static_type_is_pointer",        my_static_type_predicate_intrinsic, v_type_is_pointer);
    v_add_intrinsic("my.static_type_is_reference",      my_static_type_predicate_intrinsic, v_type_is_reference);
    v_add_intrinsic("my.static_type_is_struct",         my_static_type_predicate_intrinsic, v_type_is_struct);
    v_add_intrinsic("my.static_type_is_opaque",         my_static_type_predicate_intrinsic, v_type_struct_is_opaque);
    v_add_intrinsic("my.static_type_is_packed",         my_static_type_predicate_intrinsic, v_type_struct_is_packed);
    v_add_intrinsic("my.static_type_is_array",          my_static_type_predicate_intrinsic, v_type_is_array);
    v_add_intrinsic("my.static_type_is_vector",         my_static_type_predicate_intrinsic, v_type_is_vector);
    v_add_intrinsic("my.static_type_is_scalable",       my_static_type_predicate_intrinsic, v_type_vector_is_scalable);
    v_add_intrinsic("my.static_type_is_generic",        my_static_type_predicate_intrinsic, v_type_is_generic);
}


//---------------------------------------------------------------------
my_static_arg_kind_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                               ) ~> void
{
    garg = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_generic_arg_t);

    k = v_kind(garg);

    t = v_find_type("int");
    v = LLVMConstInt(v_type_get_llvm_type(t), k, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
{   v_add_type("v_static_generic_arg_t", v_generic_type(v_quark_from_string("v_static_generic_arg_t"), 0, 0));
}

//---------------------------------------------------------------------
{   v_add_overload(".kind", v_static_generic_arg_t, "my.static_arg_kind");

    v_add_intrinsic("my.static_arg_kind", my_static_arg_kind_intrinsic, 0);
}


//---------------------------------------------------------------------
my_static_arg_predicate_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                    arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                   ) ~> void
{
    garg = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_generic_arg_t);

    fun = (aux: *((*v_type_generic_arg_t) ~> bool));

    v = fun(garg);

    t = v_uint_type(1);
    v = LLVMConstInt(v_type_get_llvm_type(t), v, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
{   v_add_overload(".is_number", v_static_generic_arg_t, "my.static_arg_is_number");
    v_add_overload(".is_string", v_static_generic_arg_t, "my.static_arg_is_string");
    v_add_overload(".is_quark",  v_static_generic_arg_t, "my.static_arg_is_quark");
    v_add_overload(".is_type",   v_static_generic_arg_t, "my.static_arg_is_type");
    v_add_overload(".is_cons",   v_static_generic_arg_t, "my.static_arg_is_cons");

    v_add_intrinsic("my.static_arg_is_number", my_static_arg_predicate_intrinsic, v_type_generic_arg_is_number);
    v_add_intrinsic("my.static_arg_is_string", my_static_arg_predicate_intrinsic, v_type_generic_arg_is_string);
    v_add_intrinsic("my.static_arg_is_quark",  my_static_arg_predicate_intrinsic, v_type_generic_arg_is_quark);
    v_add_intrinsic("my.static_arg_is_type",   my_static_arg_predicate_intrinsic, v_type_generic_arg_is_type);
    v_add_intrinsic("my.static_arg_is_cons",   my_static_arg_predicate_intrinsic, v_type_generic_arg_is_cons);
}


//---------------------------------------------------------------------
my_static_type_width_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                 arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    w: &unsigned := 0;

    if (v_type_is_floating_point(type)) w := v_type_floating_point_get_width(type);
    if (v_type_is_integer(type))        w := v_type_integer_get_width(type);

    t = v_find_type("unsigned");
    v = LLVMConstInt(v_type_get_llvm_type(t), w, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
{   v_add_overload(".width", v_static_type_t, "my.static_type_width");

    v_add_intrinsic("my.static_type_width", my_static_type_width_intrinsic, 0);
}


//---------------------------------------------------------------------
my_static_type_function_return_type_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                                arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                               ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    r = v_type_function_get_return_type(type);

    v_set_result_type(v_static_type_t);
    v_set_result_value((r: LLVMValueRef));
}

//---------------------------------------------------------------------
my_static_type_function_param_count_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                                arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                               ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    w = v_type_function_get_param_count(type);

    t = v_find_type("unsigned");
    v = LLVMConstInt(v_type_get_llvm_type(t), w, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
my_static_type_function_param_type_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                               arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                              ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    v_set_result_type(v_find_type("unsigned"));
    v_set_result_value(0);

    v_ast_accept_visitor(arg_ptrs[1], vis);

    i = v_get_result_value();

    i = LLVMConstIntGetZExtValue(i);

    t = v_type_function_get_param_types(type)[i];

    v_set_result_type(v_static_type_t);
    v_set_result_value((t: LLVMValueRef));
}

//---------------------------------------------------------------------
{   v_add_overload(".return_type",  v_static_type_t, "my.static_type_function_return_type");
    v_add_overload(".param_count",  v_static_type_t, "my.static_type_function_param_count");
    v_add_overload(".param_type()", v_static_type_t, "my.static_type_function_param_type");

    v_add_intrinsic("my.static_type_function_return_type", my_static_type_function_return_type_intrinsic, 0);
    v_add_intrinsic("my.static_type_function_param_count", my_static_type_function_param_count_intrinsic, 0);
    v_add_intrinsic("my.static_type_function_param_type",  my_static_type_function_param_type_intrinsic,  0);
}


//---------------------------------------------------------------------
my_static_type_refptr_element_type_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                               arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                              ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    t: &*v_type_t := 0;

    if (v_type_is_array(type))  t := v_type_array_get_element_type(type);
    if (v_type_is_vector(type)) t := v_type_vector_get_element_type(type);
    else                        t := v_type_refptr_get_element_type(type);      //- Sic !!!

    v_set_result_type(v_static_type_t);
    v_set_result_value((t: LLVMValueRef));
}

//---------------------------------------------------------------------
my_static_type_refptr_address_space_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                                arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                               ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    w = v_type_refptr_get_address_space(type);

    t = v_find_type("unsigned");
    v = LLVMConstInt(v_type_get_llvm_type(t), w, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
{   v_add_overload(".element_type",  v_static_type_t, "my.static_type_refptr_element_type");
    v_add_overload(".address_space", v_static_type_t, "my.static_type_refptr_address_space");

    v_add_intrinsic("my.static_type_refptr_element_type",  my_static_type_refptr_element_type_intrinsic,  0);
    v_add_intrinsic("my.static_type_refptr_address_space", my_static_type_refptr_address_space_intrinsic, 0);
}


//---------------------------------------------------------------------
my_static_type_array_length_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                        arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                       ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    l = v_type_array_get_length(type);

    t = v_uint_type(64);
    v = LLVMConstInt(v_type_get_llvm_type(t), l, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
my_static_type_vector_size_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                       arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                      ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    s = v_type_vector_get_size(type);

    t = v_find_type("unsigned");
    v = LLVMConstInt(v_type_get_llvm_type(t), s, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
{   v_add_overload(".length", v_static_type_t, "my.static_type_array_length");
    v_add_overload(".vsize",  v_static_type_t, "my.static_type_vector_size");

    v_add_intrinsic("my.static_type_array_length", my_static_type_array_length_intrinsic, 0);
    v_add_intrinsic("my.static_type_vector_size",  my_static_type_vector_size_intrinsic,  0);
}


//---------------------------------------------------------------------
{   v_add_type("v_static_quark_t",  v_generic_type(v_quark_from_string("v_static_quark_t"),  0, 0));
    v_add_type("v_static_string_t", v_generic_type(v_quark_from_string("v_static_string_t"), 0, 0));
}


//---------------------------------------------------------------------
my_static_type_struct_name_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                       arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                      ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    q = v_type_struct_get_name_q(type);

    v_set_result_type(v_static_quark_t);
    v_set_result_value((q: LLVMValueRef));
}

//---------------------------------------------------------------------
my_static_type_struct_element_count_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                                arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                               ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    n = v_type_struct_get_element_count(type);

    t = v_find_type("unsigned");
    v = LLVMConstInt(v_type_get_llvm_type(t), n, 0);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
my_static_type_struct_element_type_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                               arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                                              ) ~> void
{
    type = (v_ast_expr_compiled_get_value(arg_ptrs[0]) : *v_type_t);

    v_set_result_type(v_find_type("unsigned"));
    v_set_result_value(0);

    v_ast_accept_visitor(arg_ptrs[1], vis);

    i = v_get_result_value();

    i = LLVMConstIntGetZExtValue(i);

    t = v_type_struct_get_element_types(type)[i];

    v_set_result_type(v_static_type_t);
    v_set_result_value((t: LLVMValueRef));
}

//---------------------------------------------------------------------
{   v_add_overload(".name",           v_static_type_t, "my.static_type_struct_name");
    v_add_overload(".element_count",  v_static_type_t, "my.static_type_struct_element_count");
    v_add_overload(".element_type()", v_static_type_t, "my.static_type_struct_element_type");

    v_add_intrinsic("my.static_type_struct_name",           my_static_type_struct_name_intrinsic,          0);
    v_add_intrinsic("my.static_type_struct_element_count",  my_static_type_struct_element_count_intrinsic, 0);
    v_add_intrinsic("my.static_type_struct_element_type",   my_static_type_struct_element_type_intrinsic,  0);
}












//---------------------------------------------------------------------
{
    printf("void.is_void = %d\n", (void.is_void : int));
    printf("long.is_void = %d\n", (long.is_void : int));

    printf("int(17).is_integer = %d\n", (int(17).is_integer : int));

    printf("int(17).width = %u\n", int(17).width);

}


//---------------------------------------------------------------------
{   s: &v_std_string_t := {};

    a0 = v_type_generic_number_arg(777);
    a1 = v_type_generic_string_arg(&s);
    a2 = v_type_generic_quark_arg(v_quark_from_string("qwerty"));

    v_add_constant("a777", v_static_generic_arg_t, (a0: LLVMValueRef));
    v_add_constant("aSSS", v_static_generic_arg_t, (a1: LLVMValueRef));
    v_add_constant("aQQQ", v_static_generic_arg_t, (a2: LLVMValueRef));
}

//---------------------------------------------------------------------
{
    printf("a777.is_number = %d\n", a777.is_number);
    printf("a777.is_string = %d\n", a777.is_string);
    printf("a777.is_quark  = %d\n", a777.is_quark);

    printf("aSSS.is_number = %d\n", aSSS.is_number);
    printf("aSSS.is_string = %d\n", aSSS.is_string);
    printf("aSSS.is_quark  = %d\n", aSSS.is_quark);

    printf("aQQQ.is_number = %d\n", aQQQ.is_number);
    printf("aQQQ.is_string = %d\n", aQQQ.is_string);
    printf("aQQQ.is_quark  = %d\n", aQQQ.is_quark);

    printf("a777.kind = %d\n", a777.kind);
    printf("aSSS.kind = %d\n", aSSS.kind);
    printf("aQQQ.kind = %d\n", aQQQ.kind);
}


//---------------------------------------------------------------------
{   ft = (*const char, ...) ~> int;

    printf("ft.is_var_arg  = %d\n", (ft.is_var_arg : int));
    printf("ft.param_count = %u\n", ft.param_count);

    printf("ft.param_type(0).is_pointer = %d\n", (ft.param_type(0).is_pointer : int));

}



//---------------------------------------------------------------------
v_typeof_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_list_get_item(args, 0), vis);        //- Sic !!!

    t = v_get_result_type();

    v_set_result_type(v_static_type_t);
    v_set_result_value((t: LLVMValueRef));
}

//---------------------------------------------------------------------
eq_types_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("eq_types_intrinsic start\n");
//defer printf("eq_types_intrinsic stop\n");

    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_list_get_item(args, 0), vis);

    v0 = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_list_get_item(args, 1), vis);

    v1 = v_get_result_value();

    tr = v_uint_type(1);
    vr = LLVMConstInt(v_type_get_llvm_type(tr), v0 == v1, false);

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(tr, vr);
}

//---------------------------------------------------------------------
{   v_add_intrinsic("v_typeof", v_typeof_intrinsic, 0);
    v_add_intrinsic("eq_types", eq_types_intrinsic, 0);
}

//---------------------------------------------------------------------
#define (_==_): (a: v_static_type_t, b: v_static_type_t) ~> bool  =  eq_types(a, b);


//---------------------------------------------------------------------
{
    t = v_typeof("Hello world!\n");

    printf("t.is_array = %d\n", (t.is_array : int));

    printf("t.element_type == char = %d\n", (t.element_type == char : int));

    printf("t.length = %u\n", t.length);

}













{   v_import("level-00");
    v_import("level-01");

    v_import("printf.void");
}

{   v_enable_level_01(); }


//---------------------------------------------------------------------
v_internal_copy_variable_intrinsic: (vis: voidc_visitor_ptr, *void,
                                     args: v_ast_expr_list_ptr, count: int) -> void
{
    expr = v_alloca(v_ast_opaque_expr_sptr, 2);
    v_initialize(expr, 2);
    defer v_terminate(expr, 2);

    v_list_get_items(args, 0, expr, 2);

    name_dst = v_ast_expr_string_get_string(expr+0);
    name_src = v_ast_expr_string_get_string(expr+1);

    src_type  = v_get_variable_type(name_src);
    src_value = v_get_variable_value(name_src);

    v_add_variable(name_dst, src_type, src_value);
}

{   v_add_intrinsic("v.internal.copy_variable", v_internal_copy_variable_intrinsic, 0);
}


//---------------------------------------------------------------------
mk_stmt_for_grammar_action: (ret: v_util_std_any_ptr, any: v_util_std_any_ptr, size_t) -> void
{
    init = v_std_any_get_pointer(v_ast_opaque_stmt_list_sptr, any+0);
    cond = v_std_any_get_pointer(v_ast_opaque_stmt_list_sptr, any+1);
    incr = v_std_any_get_pointer(v_ast_opaque_stmt_list_sptr, any+2);
    stmt = v_std_any_get_pointer(v_ast_opaque_stmt_sptr,      any+3);

    //- {   <init>...
    //-
    //-     loop
    //-     {
    //-         v.internal.copy_variable("voidc.internal_branch_target_break_for_variable",
    //-                                  "voidc.internal_branch_target_break_variable");
    //-
    //-         v.internal.copy_variable("voidc.internal_branch_target_break_for",
    //-                                  "voidc.internal_branch_target_break");
    //-
    //-         <cond>...
    //-
    //-         if (<cond>)     //- Kinda...
    //-         block
    //-         {
    //-             v.internal.copy_variable("voidc.internal_branch_target_continue_variable",
    //-                                      "voidc.internal_branch_target_break_variable");
    //-
    //-             v.internal.copy_variable("voidc.internal_branch_target_continue",
    //-                                      "voidc.internal_branch_target_break");
    //-
    //-             v.internal.copy_variable("voidc.internal_branch_target_break_variable",
    //-                                      "voidc.internal_branch_target_break_for_variable");
    //-
    //-             v.internal.copy_variable("voidc.internal_branch_target_break",
    //-                                      "voidc.internal_branch_target_break_for");
    //-
    //-             <stmt>
    //-         }
    //-         else v_break();
    //-
    //-         <incr>...
    //-     }
    //- }

    etmp = v_alloca(v_ast_opaque_expr_sptr, 9);
    v_initialize(etmp, 9);
    defer v_terminate(etmp, 9);

    e_break_for_var = etmp+2;
    e_break_for     = etmp+3;
    e_break_var     = etmp+4;
    e_break         = etmp+5;
    e_continue_var  = etmp+6;
    e_continue      = etmp+7;
    e_cond          = etmp+8;

    v_ast_make_expr_string(e_break_for_var, "voidc.internal_branch_target_break_for_variable");
    v_ast_make_expr_string(e_break_for,     "voidc.internal_branch_target_break_for");
    v_ast_make_expr_string(e_break_var,     "voidc.internal_branch_target_break_variable");
    v_ast_make_expr_string(e_break,         "voidc.internal_branch_target_break");
    v_ast_make_expr_string(e_continue_var,  "voidc.internal_branch_target_continue_variable");
    v_ast_make_expr_string(e_continue,      "voidc.internal_branch_target_continue");


    init_len = v_list_get_size(init);

    cond_len: &int := v_list_get_size(cond);

    cstm = v_alloca(v_ast_opaque_stmt_sptr);
    v_initialize(cstm);
    defer v_terminate(cstm);

    if (cond_len)
    {
        v_list_get_items(cond, cond_len-1, cstm);

        name = v_ast_stmt_get_name(cstm);

        if (name[0])
        {
            v_ast_make_expr_identifier(e_cond, name);
        }
        else
        {
            v_ast_stmt_get_expr(cstm, e_cond);

            --cond_len;
        }
    }
    else
    {
        v_ast_make_expr_identifier(e_cond, "true");
    }


    //- cstm - break

    v_ast_make_stmt_call(cstm, "", "v_break", 0, 0);


    incr_len = v_list_get_size(incr);


    stmp_len: &int := 4 + 1;        //- Inner block ("if then")

    {   l = 2 + cond_len + 1 + incr_len;

        if (stmp_len < l)   stmp_len := l;      //- Loop's block

        l = init_len + 1;

        if (stmp_len < l)   stmp_len := l;      //- Outer block
    }


    stmp = v_alloca(v_ast_opaque_stmt_sptr, stmp_len);
    v_initialize(stmp, stmp_len);
    defer v_terminate(stmp, stmp_len);


    //- stmp_cond+0 - if

    stmp_cond = stmp + 2 + cond_len;


    v_copy(etmp+0, e_continue_var);
    v_copy(etmp+1, e_break_var);

    v_ast_make_stmt_call(stmp+0, "", "v.internal.copy_variable", etmp+0, 2);

    v_copy(etmp+0, e_continue);
    v_copy(etmp+1, e_break);

    v_ast_make_stmt_call(stmp+1, "", "v.internal.copy_variable", etmp+0, 2);

    v_copy(etmp+0, e_break_var);
    v_copy(etmp+1, e_break_for_var);

    v_ast_make_stmt_call(stmp+2, "", "v.internal.copy_variable", etmp+0, 2);

    v_copy(etmp+0, e_break);
    v_copy(etmp+1, e_break_for);

    v_ast_make_stmt_call(stmp+3, "", "v.internal.copy_variable", etmp+0, 2);


    v_copy(stmp+4, stmt);


    slst = v_alloca(v_ast_opaque_stmt_list_sptr);
    v_initialize(slst);
    defer v_terminate(slst);

    v_make_list(slst, stmp+0, 5);

    v_ast_make_stmt_block(stmp+0, slst, true);

    v_ast_make_stmt_if_then_else(stmp_cond+0, e_cond, stmp+0, cstm);


    //- stmp_init+0 - loop

    stmp_init = stmp + init_len;


    v_copy(etmp+0, e_break_for_var);
    v_copy(etmp+1, e_break_var);

    v_ast_make_stmt_call(stmp+0, "", "v.internal.copy_variable", etmp+0, 2);

    v_copy(etmp+0, e_break_for);
    v_copy(etmp+1, e_break);

    v_ast_make_stmt_call(stmp+1, "", "v.internal.copy_variable", etmp+0, 2);


    if (cond_len) v_list_get_items(cond, 0, stmp+2, cond_len);


    if (incr_len) v_list_get_items(incr, 0, stmp_cond+1, incr_len);


    v_make_list(slst, stmp+0, 2+cond_len+1+incr_len);

    v_ast_make_stmt_block(stmp+0, slst, false);

    v_ast_make_stmt_loop(stmp_init+0, stmp+0);


    if (init_len) v_list_get_items(init, 0, stmp+0, init_len);


    v_make_list(slst, stmp+0, init_len+1);

    v_ast_make_stmt_block(stmp+0, slst, false);


    v_std_any_set_pointer(ret, stmp+0);
}


//---------------------------------------------------------------------
{
    gr0 = v_alloca(v_peg_opaque_grammar_sptr);
    v_initialize(gr0);
    defer v_terminate(gr0);

    v_peg_get_grammar(gr0);

    grammar gr0
    {
    actions:
        mk_stmt_for = mk_stmt_for_grammar_action;

    parsers:
        simple_stmt = i:identifier _':'_ t: expr _'='_ v:expr       { mk_stmt_val_defn(i, t, v) }
                    / i:identifier _':'_ tv: expr                   { mk_stmt_var_defn(i, tv) }         //- Sic!!!
                    / i:identifier _ '=' _ v:expr                   { mk_stmt(i, v) }
                    / v:expr                                        { mk_stmt(0, v) }
                    ;

        simple_stmt_list_lr = l:simple_stmt_list_lr _','_ s:simple_stmt     { mk_stmt_list(l, s) }
                            / s:simple_stmt                                 { mk_stmt_list(0, s) }
                            ;

        simple_stmt_list_lr is left-recursive;

        simple_stmt_list = simple_stmt_list_lr
                         /                          { mk_stmt_list(0, 0) }
                         ;

        stmt_for = "for" _'('_ i:simple_stmt_list _';'_
                               c:simple_stmt_list _';'_
                               r:simple_stmt_list
                         _')'_ s:stmt                       { mk_stmt_for(i, c, r, s) }
                 ;

        stmt += stmt_for;
    }

    v_peg_set_grammar(gr0);
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }

{
    printf("/-\\\n");


//    for(i: &int := 0; i < 10; ++i)
//    {
//        printf("[%d]\n", i);
//    }


//    for(i: &int := 0; ; ++i)
//    {
//        if (i >= 10) v_break();
//
//        printf("[%d]\n", i);
//    }


//    for(i: &int := 0; i < 10; ++i)
//    {
//        if (i == 9)
//        {
//            printf(" ! \n");
//
//            v_break();
//        }
//
//        if (i % 3 == 0)
//        {
//            printf(" %d \n", i);
//
//            v_continue();
//        }
//
//        printf("[%d]\n", i);
//    }


    for(i: &int := 0, F: &int := 1; c = i < 5, i < 10; F*=++i)
    {
        printf("[%d] %d, %d\n", i, (c: int), F);
    }


    printf("\\-/\n");
}



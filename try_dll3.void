{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("llvm-c/Core.void");
    v_import("llvm-c/TargetMachine.void");
    v_import("llvm-c/Transform/PassManagerBuilder.void");
    v_import("llvm-c/Support.void");

    v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();
}


//---------------------------------------------------------------------
target_machine: &LLVMTargetMachineRef := v_undef();

{   triple = LLVMGetDefaultTargetTriple();

    tr: &LLVMTargetRef := v_undef();

    LLVMGetTargetFromTriple(triple, &tr, 0);

    cpu_name     = LLVMGetHostCPUName();
    cpu_features = LLVMGetHostCPUFeatures();

    target_machine :=
        LLVMCreateTargetMachine
        (
            tr,
            triple,
            cpu_name,
            cpu_features,
            LLVMCodeGenLevelAggressive,
            LLVMRelocPIC,                       //- Sic!
            LLVMCodeModelDefault
        );

    LLVMDisposeMessage(cpu_features);
    LLVMDisposeMessage(cpu_name);
    LLVMDisposeMessage(triple);
}

//=====================================================================
{   int_      = v_type_get_llvm_type(int);
    long_     = v_type_get_llvm_type(long);
    intptr_t_ = v_type_get_llvm_type(intptr_t);

    int_sz_v  = LLVMSizeOf(int_);
    long_sz_v = LLVMSizeOf(long_);
    ptr_sz_v  = LLVMSizeOf(intptr_t_);

    v_add_constant("int_sz",  size_t, int_sz_v);
    v_add_constant("long_sz", size_t, long_sz_v);
    v_add_constant("ptr_sz",  size_t, ptr_sz_v);
}

{   gctx = v_target_create_global_ctx(int_sz, long_sz, ptr_sz);

    v_add_symbol("my_gctx", v_target_global_ctx_t, gctx);


    lctx = v_target_create_local_ctx("<target test>", gctx);

    v_add_symbol("my_lctx", v_target_local_ctx_t, lctx);


    v_target_set_global_ctx(gctx);
}


//=====================================================================
{   llvm_ctx = v_target_get_llvm_ctx();

    module = LLVMModuleCreateWithNameInContext("try_dll3_mod", llvm_ctx);

    v_set_module(module);
}


//---------------------------------------------------------------------
printf: (*const char, ...) -> int;


//---------------------------------------------------------------------
private
ptr_variable: &*int := v_undef();


//---------------------------------------------------------------------
try_dll3: () -> void
{
    v = *ptr_variable;

    v += 700;

    printf("try_dll3: %d\n", v);
}


//---------------------------------------------------------------------
private
try_dll3_ctor: () -> void
{
    v_find_symbol_value: (*const char) -> *void;

    ptr_variable := (v_find_symbol_value("try_variable") : *int);
}

private
llvm_global_cdtors_item_t = v_struct({int(32), *(() -> void), *void});

my_llvm_global_ctors: &llvm_global_cdtors_item_t[] :=
{
    {0, try_dll3_ctor, 0}
};

{   module = v_get_module();

    g = LLVMGetNamedGlobal(module, "my_llvm_global_ctors");

    LLVMSetValueName2(g, "llvm.global_ctors", 17);

    LLVMSetLinkage(g, LLVMAppendingLinkage);
}

//---------------------------------------------------------------------
{
    module = v_get_module();

    v_set_module(0);


    pass_manager = LLVMCreatePassManager();

    pm_builder = LLVMPassManagerBuilderCreate();

    LLVMPassManagerBuilderSetOptLevel(pm_builder, 3);       //- -O3
    LLVMPassManagerBuilderSetSizeLevel(pm_builder, 2);      //- -Oz

    LLVMPassManagerBuilderPopulateModulePassManager(pm_builder, pass_manager);

    LLVMPassManagerBuilderDispose(pm_builder);

    //-----------------------------------------------------------------
    dl = LLVMCreateTargetDataLayout(target_machine);
    tr = LLVMGetTargetMachineTriple(target_machine);

    LLVMSetModuleDataLayout(module, dl);
    LLVMSetTarget(module, tr);

    LLVMDisposeMessage(tr);
    LLVMDisposeTargetData(dl);

    LLVMRunPassManager(pass_manager, module);

    LLVMDisposePassManager(pass_manager);

    //-----------------------------------------------------------------
    msg = LLVMPrintModuleToString(module);

    printf("\n%s\n", msg);

    LLVMDisposeMessage(msg);

    //-----------------------------------------------------------------
    LLVMTargetMachineEmitToFile(target_machine,
                                module,
                                "try_dll3.o",
                                LLVMObjectFile,
                                0);

    //-----------------------------------------------------------------
    LLVMDisposeModule(module);

    LLVMDisposeTargetMachine(target_machine);
}


//=====================================================================
{
    vctx = v_target_get_voidc_global_ctx();

    v_target_set_global_ctx(vctx);


    v_target_destroy_local_ctx(my_lctx);
    v_target_destroy_global_ctx(my_gctx);
}


//=====================================================================
{   system: (*const char) -> int;

    if (v_find_constant("_WIN32", 0, 0))
    {
        system("clang try_dll3.o -shared -L../voidc/build -lvoidc -o try_dll3.so");
    }
    else
    {
        system("clang try_dll3.o -shared -o try_dll3.so");
    }
}


//---------------------------------------------------------------------
try_variable: &int := 77;


//---------------------------------------------------------------------
{   ok = LLVMLoadLibraryPermanently("try_dll3.so");

    printf("ok: %d\n", ok);
}


//---------------------------------------------------------------------
try_dll3: () -> void;

{   try_dll3();

    printf("try_variable: %d\n", try_variable);
}




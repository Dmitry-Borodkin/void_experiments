{   v_import("mainline.void");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_mainline();
}


//{ voidc_verify_jit_module_optimized(true); }
//{ v_debug_print_module(99); }

//====================================================================-
struct FILE;

v_popen: (command: *const char, prop: *const char) ~> *FILE;

v_pclose: (*FILE) ~> int;

fprintf: (stream: *FILE, format: *const char, ...) ~> int;

fscanf: (stream: *FILE, format: *const char, ...) ~> int;

fputs: (buf: *char, stream: *FILE) ~> int;

sprintf: (str: *char, format: *const char, ...) ~> int;

system: (cmd: *const char) ~> int;


//---------------------------------------------------------------------
v_find_file_for_import: (*v_std_string_t, *const char, *const char) ~> void;

voidc_include_path: &v_std_string_t := {};

{   v_find_file_for_import(&voidc_include_path, "", "level-00");

    strrchr: (*const char, int) ~> *char;

    *strrchr(v_std_string_get(&voidc_include_path), '/') := 0;

//  printf("voidc_include_path: %s\n", v_std_string_get(&voidc_include_path));
}

//---------------------------------------------------------------------
my_source: &char[] :=
"""
#include "voidc_target.h"

extern "C" typedef void (*type_ft)(void *aux, const v_type_t *type);

class MyTypesHack : public voidc_types_ctx_t
{
public:

    void
    types_iter(type_ft fun, void *aux)
    {
        auto _fun = [this, fun, aux](const v_type_t *t)
        {
            if (t)  fun(aux, t);
        };

        _fun(_void_type.get());
        _fun(_f16_type.get());
        _fun(_f32_type.get());
        _fun(_f64_type.get());
        _fun(_f128_type.get());

        for (auto &it : int_types)          _fun(it.second.get());
        for (auto &it : uint_types)         _fun(it.second.get());
        for (auto &it : function_types)     _fun(it.second.get());
        for (auto &it : pointer_types)      _fun(it.second.get());
        for (auto &it : reference_types)    _fun(it.second.get());
        for (auto &it : named_struct_types) _fun(it.second.get());

        for (auto &it : anon_struct_types)
        {
            auto st = it.second.get();

            if (st->name()) continue;

            _fun(st);
        }

        for (auto &it : array_types)        _fun(it.second.get());
        for (auto &it : vector_types)       _fun(it.second.get());
        for (auto &it : svector_types)      _fun(it.second.get());
    }

};

extern "C"
{

void
types_iter(type_ft fun, void *aux)
{
    auto *gctx = voidc_global_ctx_t::target;

    auto *hctx = static_cast<MyTypesHack*>(static_cast<voidc_types_ctx_t*>(gctx));

    hctx->types_iter(fun, aux);
}

typedef void (*overload_ft)(void *aux, v_quark_t, v_type_t *, v_quark_t);

void
overloads_iter(overload_ft fun, void *aux)
{
    auto *gctx = voidc_global_ctx_t::target;
    auto *lctx = gctx->local_ctx;

    for (auto &i : lctx->decls.overloads)
    {
        for (auto &j : i.second)
        {
            fun(aux, i.first, j.first, j.second);
        }
    }
}

}

""";


//---------------------------------------------------------------------
{   buffer = v_malloc(char, 1024);
    defer v_free(buffer);

    {   p = v_popen("mktemp", "r");
        defer v_pclose(p);

        fscanf(p, "%500s", buffer);
    }

#if (v_defined(_WIN32))
    {
        cmd = buffer + 512;

        sprintf(cmd, "cygpath -m %s", buffer);

        p = v_popen(cmd, "r");
        defer v_pclose(p);

        fscanf(p, "%1000s", buffer);
    }
#endif

    //-----------------------------------------------------------------
    {   p = v_popen("bash", "w");
        defer v_pclose(p);

        fprintf(p, "clang -x c++ -c -fPIC");

#if (v_defined(NDEBUG))

        fprintf(p, " -O3 -DNDEBUG");

#endif

        fprintf(p, " $(llvm-config --cxxflags) -std=c++17");

        fprintf(p, " -I%s", v_std_string_get(&voidc_include_path));

#if (v_defined(_WIN32))

        fprintf(p, " -IC:/Tools/include -frtti -fcxx-exceptions");

#endif

        fprintf(p, " -o %s", buffer);

        fprintf(p, " - <<HEREDOC\n%s\nHEREDOC\n", my_source);
    }

    //-----------------------------------------------------------------
    mb: &LLVMMemoryBufferRef := 0;
    defer LLVMDisposeMemoryBuffer(mb);

    LLVMCreateMemoryBufferWithContentsOfFile(buffer, &mb, 0);

    voidc_add_local_object_file_to_jit(mb);

    //-----------------------------------------------------------------
    {   p = v_popen("bash", "w");
        defer v_pclose(p);

        fprintf(p, "rm %s\n", buffer);
    }
}


//=====================================================================
type_ft = (*void, *const v_type_t) ~> void;

types_iter: (*type_ft, *void) ~> void;

overload_ft = (*void, v_quark_t, *const v_type_t, v_quark_t) ~> void;

overloads_iter: (*overload_ft, *void) ~> void;


//---------------------------------------------------------------------
idx: &v_util_map_t := {};

{ v_make_map(&idx); }


//---------------------------------------------------------------------
overload_fun: (*void, q: v_quark_t, t: *const v_type_t, v_quark_t) ~> void
{
    alst: &*v_std_any_t := v_map_find(&idx, (t: intptr_t));

    atmp: &v_std_any_t := {};

    if (!alst)
    {
        lst: &v_util_list_t := {};

        v_make_list_nil(&lst);

        v_std_any_set_pointer(&atmp, &lst);

        v_map_insert(&idx, &idx, (t: intptr_t), &atmp);

        alst := v_map_find(&idx, (t: intptr_t));
    }

    v_std_any_set_value(&atmp, q);

    plst = v_std_any_get_pointer(v_util_list_t, alst);

    v_list_append(plst, plst, &atmp);
}

//---------------------------------------------------------------------
type_fun: (*void, t: *const v_type_t) ~> void
{
    sstr: &v_std_string_t := {};

    voidc_internal_std_string_append_type(&sstr, t);

    printf("%s\n", v_std_string_get(&sstr));

    alst: &*v_std_any_t := v_map_find(&idx, (t: intptr_t));

    if (!alst)  v_return();

    plst = v_std_any_get_pointer(v_util_list_t, alst);

    sz = v_list_get_size(plst);

    for (i: &int := 0; i < sz; ++i)
    {
        a = v_list_get_item(plst, i);

        q = v_std_any_get_value(v_quark_t, a);

        printf("    %s\n", v_quark_to_string(q));
    }
}


//=====================================================================
{
    filename = v_target_local_ctx_get_filename(v_target_get_voidc_local_ctx());

    gctx = v_target_create_global_ctx(int.size, long.size, intptr_t.size);
    lctx = v_target_create_local_ctx(filename, gctx);

    v_target_set_global_ctx(gctx);

    //----------------------------------------------------------
    v_enable_mainline();

    //----------------------------------------------------------
    overloads_iter(overload_fun, 0);

    types_iter(type_fun, 0);

    //----------------------------------------------------------
    v_target_set_global_ctx(v_target_get_voidc_global_ctx());

    v_target_destroy_local_ctx(lctx);
    v_target_destroy_global_ctx(gctx);
}




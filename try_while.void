{   v_import("level-00");
    v_import("level-01");

    v_import("printf.void");
}

{   v_enable_level_01(); }


//---------------------------------------------------------------------
mk_stmt_while_grammar_action: (ret: v_util_std_any_ptr, any: v_util_std_any_ptr, size_t) -> void
{
    cond = v_std_any_get_pointer(v_ast_opaque_stmt_sptr, any+0);
    stmt = v_std_any_get_pointer(v_ast_opaque_stmt_sptr, any+1);

    cexp = v_alloca(v_ast_opaque_expr_sptr);
    v_initialize(cexp);
    defer v_terminate(cexp);

    stmp = v_alloca(v_ast_opaque_stmt_sptr, 3);
    v_initialize(stmp, 3);
    defer v_terminate(stmp, 3);

    brk = stmp+0;
    stm = stmp+1;
    lps = stmp+2;

    v_ast_make_stmt_call(brk, "", "v_break", 0, 0);

    name = v_ast_stmt_get_name(cond);

    if (name[0])
    {
        cnd = stmp+1;
        ifs = stmp+2;

        v_copy(cnd, cond);

        v_ast_make_expr_identifier(cexp, name);

        v_ast_make_stmt_if_then_else(ifs, cexp, stmt, brk);

        slst = v_alloca(v_ast_opaque_stmt_list_sptr);
        v_initialize(slst);
        defer v_terminate(slst);

        v_make_list(slst, stmp+1, 2);

        v_ast_make_stmt_block(stm, slst, false);
    }
    else
    {
        v_ast_stmt_get_expr(cond, cexp);

        v_ast_make_stmt_if_then_else(stm, cexp, stmt, brk);
    }

    v_ast_make_stmt_loop(lps, stm);

    v_std_any_set_pointer(ret, lps);
}


//---------------------------------------------------------------------
{
    gr0 = v_alloca(v_peg_opaque_grammar_sptr);
    v_initialize(gr0);
    defer v_terminate(gr0);

    v_peg_get_grammar(gr0);

    grammar gr0
    {
    actions:
        mk_stmt_while = mk_stmt_while_grammar_action;

    parsers:
        cond_while = i:identifier _':'_ t: expr _'='_ v:expr         { mk_stmt_val_defn(i, t, v) }
                   / i:identifier _':'_ tv: expr                     { mk_stmt_var_defn(i, tv) }         //- Sic!!!
                   / i:identifier _ '=' _ v:expr                     { mk_stmt(i, v) }
                   / v:expr                                          { mk_stmt(0, v) }
                   ;

        stmt_while = "while" _ '(' _ c:cond_while _ ')' _ s:stmt  { mk_stmt_while(c, s) };

        stmt += stmt_while;
    }

    v_peg_set_grammar(gr0);
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }

{
    p: & *char := "Hello world!";

    printf("/-\\\n");

//  while(c: &char := *p++)  printf("[%c]\n", c);
//  while(c: &char = *p++)   printf("[%c]\n", c);
//  while(c: char = *p++)    printf("[%c]\n", c);
//  while(c = *p++)          printf("[%c]\n", c);

//  c: &char := v_undef();
//  while(c := *p++)         printf("[%c]\n", c);

      while(c = *p++)
      {
          if (c == '!')
          {
              printf(" ! \n");

              v_break();
          }

          if (c == ' ')
          {
              printf("   \n");

              v_continue();
          }

          printf("[%c]\n", c);
      }

    printf("\\-/\n");
}



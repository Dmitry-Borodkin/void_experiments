{   v_import("level-00");
    v_import("level-01");

    v_import("printf.void");
}

{   v_enable_level_01(); }


//---------------------------------------------------------------------
mk_stmt_while_grammar_action: (ret: v_util_std_any_ptr, any: v_util_std_any_ptr, size_t) -> void
{
    cond = v_std_any_get_pointer(v_ast_opaque_stmt_list_sptr, any+0);
    stmt = v_std_any_get_pointer(v_ast_opaque_stmt_sptr,      any+1);

    //- loop
    //- {
    //-     <cond>...
    //-
    //-     if (<cond>)     //- Kinda...
    //-     <stmt>
    //-     else  v_break();
    //- }


    cond_len: &int := v_list_get_size(cond);

    cstm = v_alloca(v_ast_opaque_stmt_sptr);
    v_initialize(cstm);
    defer v_terminate(cstm);

    v_list_get_items(cond, cond_len-1, cstm);


    cexp = v_alloca(v_ast_opaque_expr_sptr);
    v_initialize(cexp);
    defer v_terminate(cexp);

    name = v_ast_stmt_get_name(cstm);

    if (name[0])
    {
        v_ast_make_expr_identifier(cexp, name);
    }
    else
    {
        v_ast_stmt_get_expr(cstm, cexp);

        --cond_len;
    }


    //- cstm - break

    v_ast_make_stmt_call(cstm, "", "v_break", 0, 0);


    stmp_len = cond_len + 1;


    stmp = v_alloca(v_ast_opaque_stmt_sptr, stmp_len);
    v_initialize(stmp, stmp_len);
    defer v_terminate(stmp, stmp_len);


    stmp_cond = stmp + cond_len;

    //- stmp_cond - if

    v_ast_make_stmt_if_then_else(stmp_cond, cexp, stmt, cstm);


    //- stmp+0 - loop

    if (cond_len)
    {
        //- stmp+0 - block

        v_list_get_items(cond, 0, stmp+0, cond_len);

        slst = v_alloca(v_ast_opaque_stmt_list_sptr);
        v_initialize(slst);
        defer v_terminate(slst);

        v_make_list(slst, stmp+0, cond_len+1);

        v_ast_make_stmt_block(stmp+0, slst, false);
    }


    v_ast_make_stmt_loop(stmp+0, stmp+0);

    v_std_any_set_pointer(ret, stmp+0);
}


//---------------------------------------------------------------------
{
    gr0 = v_alloca(v_peg_opaque_grammar_sptr);
    v_initialize(gr0);
    defer v_terminate(gr0);

    v_peg_get_grammar(gr0);

    grammar gr0
    {
    actions:
        mk_stmt_while = mk_stmt_while_grammar_action;

    parsers:
        simple_stmt = i:identifier _':'_ t:expr _'='_ v:expr        { mk_stmt_val_defn(i, t, v) }
                    / i:identifier _':'_ tv:expr                    { mk_stmt_var_defn(i, tv) }         //- Sic!!!
                    / i:identifier _'='_ v:expr                     { mk_stmt(i, v) }
                    / v:expr                                        { mk_stmt(0, v) }
                    ;

        simple_stmt_list_lr = l:simple_stmt_list_lr _','_ s:simple_stmt     { mk_stmt_list(l, s) }
                            / s:simple_stmt                                 { mk_stmt_list(0, s) }
                            ;

        simple_stmt_list_lr is left-recursive;


        stmt_while = "while" _'('_ c:simple_stmt_list_lr _')'_ s:stmt   { mk_stmt_while(c, s) };


        stmt += stmt_while;
    }

    v_peg_set_grammar(gr0);
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    p: & *char := "Hello world!";

    printf("/-\\\n");

//  while(c: &char := *p++)  printf("[%c]\n", c);
//  while(c: &char = *p++)   printf("[%c]\n", c);
//  while(c: char = *p++)    printf("[%c]\n", c);
//  while(c = *p++)          printf("[%c]\n", c);

//  c: &char := v_undef();
//  while(c := *p++)         printf("[%c]\n", c);

    while(c = *p++)
    {
        if (c == '!')
        {
            printf(" ! \n");

            v_break();
        }

        if (c == ' ')
        {
            printf("   \n");

            v_continue();
        }

        printf("[%c]\n", c);
    }

    printf("\\-/\n");
}

//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    buf: &char[100] := v_undef();

    src: &*char := "Hello world!";
    dst: &*char := &buf[0];

    while(*dst++ := *src++);

    printf("\n%s\n", &buf[0]);
}

//---------------------------------------------------------------------
{
    buf: &char[100] := v_undef();

    src: &*char := "Hello world!";
    dst: &*char := &buf[0];

    while(d = *dst++, s = *src++)   d := s;

    printf("\n%s\n", &buf[0]);
}



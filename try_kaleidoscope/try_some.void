{ v_import("mainline.void"); }
{ v_enable_mainline(); }

//---------------------------------------------------------------------
printf: (*const char, ...) ~> int;


//---------------------------------------------------------------------
mk_unit_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    if (sstr = v_std_any_get_pointer(v_std_string_t, any+0))
    {
        s = v_std_string_get(sstr);

        if (s  &&  s[0])    printf("error\n");
    }
    else
    {
        num = v_std_any_get_value(intptr_t, any+0);

        printf("answer = %zd\n", num);
    }

    //- Make "empty" unit...

    pos = v_std_any_get_value(size_t, any+1);

    line:   &size_t := v_undef();
    column: &size_t := v_undef();

    v_peg_get_line_column(pos, line, column);

    list: &v_ast_stmt_list_t := {};

    unit: &v_ast_unit_t := {};

    v_ast_make_unit(&unit, &list, (line+1 : int), (column+1 : int));

    v_std_any_set_pointer(ret, &unit);
}

//---------------------------------------------------------------------
mk_EOF_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    //- Make "null" unit...

    unit: &v_ast_unit_t := {};

    v_std_any_set_pointer(ret, &unit);
}


//---------------------------------------------------------------------
mk_binop_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    op = v_std_any_get_value(char32_t, any+0);

    lhs = v_std_any_get_value(intptr_t, any+1);
    rhs = v_std_any_get_value(intptr_t, any+2);

    num: &intptr_t := v_undef();

    switch(op)
    {
    case '+':   num := lhs + rhs;   v_break();
    case '-':   num := lhs - rhs;   v_break();
    case '*':   num := lhs * rhs;   v_break();
    case '/':   num := lhs / rhs;   v_break();
    case '%':   num := lhs % rhs;   v_break();
    }

    v_std_any_set_value(ret, num);
}

//---------------------------------------------------------------------
mk_number_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    sstr = v_std_any_get_pointer(v_std_string_t, any+0);

    atoll: (*const char) ~> long_long;

    num = atoll(v_std_string_get(sstr));

    v_std_any_set_value(ret, (num: intptr_t));
}


//=====================================================================
{
    gr0: &v_peg_grammar_t := {};    gr0 = &gr0;

    v_peg_make_grammar(gr0);        //- Make new empty grammar!

    grammar gr0
    {
    actions:
        mk_unit = mk_unit_grammar_action;
        mk_EOF  = mk_EOF_grammar_action;

        mk_binop  = mk_binop_grammar_action;
        mk_number = mk_number_grammar_action;

    parsers:
        unit = _ <e:expr> _ EOL     { mk_unit(e, $1s) }         //- answer
             / _ <(!EOL .)*> EOL    { mk_unit($1, $1s) }        //- error
             / _ !.                 { mk_EOF() }                //- EOF
             ;

        //----------------------------------------------------------
        expr = l:expr _ op:[-+] _ r:fact    { mk_binop(op, l, r) }
             / fact;

        expr is left-recursive;

        fact = l:fact _ op:[*/%] _ r:unary  { mk_binop(op, l, r) }
             / unary;

        fact is left recursive;

        unary = op:[-+] _ e:prim            { mk_binop(op, 0, e) }
              / prim;

        prim = '(' _ e:expr _ ')'           { e }
             / number;

        //----------------------------------------------------------
        number = [0-9]+                     { mk_number($0) };

        //----------------------------------------------------------
        _ = [ \t]*;

        EOL = '\n' / "\r\n" / '\r' / ';';
    }

    v_peg_set_grammar(gr0);         //- Replace current grammar!
}


0

2*2



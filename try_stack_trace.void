{   v_import("mainline.void");

    v_import("llvm-c/Core.void");
}
{   v_enable_mainline(); }

//---------------------------------------------------------------------
printf: (*const char, ...) ~> int;

//---------------------------------------------------------------------
#if (v_defined(NDEBUG))   #error ("Need debug mode...")   #endif


//---------------------------------------------------------------------
{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("pos_start_q", q_ref, q("pos_start"));
    v_add_symbol("pos_end_q",   q_ref, q("pos_end"));
}


//---------------------------------------------------------------------
my_trace_grammar_ctx_t = struct
{
    fun: *((*void, *v_std_any_t, *v_peg_grammar_t, v_quark_t, *v_peg_context_t) ~> void);
    aux: *void;
};

//---------------------------------------------------------------------
gr_trace_item_t = struct
{
    path: v_util_list_t;

    pos:  size_t;
};

(v_initialize(_)): (p: *gr_trace_item_t, n: size_t) ~> void
{
    for (i: &int := 0; i < n; ++i)
    {
        v_initialize(&p[i].path);

        v_make_list_nil(&p[i].path);

        p[i].pos := 0;
    }
}

(v_terminate(_)):  (*gr_trace_item_t, size_t) ~> void  =  derive;
(v_copy(_)):       (*gr_trace_item_t, *const gr_trace_item_t, size_t) ~> void  =  derive;

grti_current: &gr_trace_item_t := {};
grti_best:    &gr_trace_item_t := {};

parsing_ok: &bool := false;

//---------------------------------------------------------------------
my_trace_grammar: (aux: *void, ret: *v_std_any_t, grm: *v_peg_grammar_t, q: v_quark_t, ctx: *v_peg_context_t) ~> void
{
    grti_saved: &gr_trace_item_t := {};

    v_copy(&grti_saved, &grti_current);

    ps = v_peg_get_position();

    a: &v_std_any_t := {};

    v: &struct { v_quark_t; size_t; } := { q, ps };

    v_std_any_set_pointer(&a, (&v : *intptr_t[2]));

    v_list_append(&grti_current.path, &grti_current.path, &a);

    grti_current.pos := ps;

    my_ctx = *(aux: *my_trace_grammar_ctx_t);

    my_ctx.fun(my_ctx.aux, ret, grm, q, ctx);

    parsing_ok := !v_empty(ret);

    if (!parsing_ok)        //- Fail
    {
        if (grti_best.pos <= ps) v_copy(&grti_best, &grti_current);
    }

    v_copy(&grti_current, &grti_saved);
}


//---------------------------------------------------------------------
struct my_trace_visitor_item_t
{
    ast: *v_ast_base_t;

    nxt: *my_trace_visitor_item_t;
};

my_trace_visitor_item_root: &*my_trace_visitor_item_t := 0;

//---------------------------------------------------------------------
my_trace_visitor_ctx_t = struct
{
    fun: *((*void, *voidc_visitor_t, *v_ast_base_t) ~> void);
    aux: *void;
};

//---------------------------------------------------------------------
my_trace_visitor: (aux: *void, vis: *voidc_visitor_t, ast: *v_ast_base_t) ~> void
{
    ctx = *(aux: *my_trace_visitor_ctx_t);

    this: &my_trace_visitor_item_t := { ast, my_trace_visitor_item_root };

    my_trace_visitor_item_root := &this;

    ctx.fun(ctx.aux, vis, ast);

    my_trace_visitor_item_root := this.nxt;
}


//---------------------------------------------------------------------
print_trace: () ~> void
{
    item: &*my_trace_visitor_item_t := my_trace_visitor_item_root;

    if (item)
    {
        printf("\nVisitor trace:\n");

        filename = v_target_local_ctx_get_filename(v_target_get_local_ctx());

        printf("%s\n", filename);

        for (i: &int := 1; item; item := item->nxt, ++i)
        {
            tag = v_quark_to_string(v_ast_base_get_tag(item->ast));

            printf("  #%d: %s", i, tag);

            pps = v_std_any_get_pointer(size_t, v_ast_get_property(item->ast, pos_start_q));
            ppe = v_std_any_get_pointer(size_t, v_ast_get_property(item->ast, pos_end_q));

            line:   &size_t := v_undef();
            column: &size_t := v_undef();

            if (pps)
            {
                line := v_peg_get_line_column(*pps, &column);

                printf(": %zd:%zd", line, column);
            }

            if (ppe)
            {
                line := v_peg_get_line_column(*ppe, &column);

                printf(" - %zd:%zd", line, column);
            }

            printf("\n");
        }

        printf("\n");
    }

    if (!parsing_ok)
    {
        printf("\nParsing trace:\n");

        filename = v_target_local_ctx_get_filename(v_target_get_local_ctx());

        printf("%s\n", filename);

        list = &grti_best.path;

        s = v_list_get_size(list);

        for (i: &int := 1; i <= s; ++i)
        {
            a = v_list_get_item(list, s-i);

            item = *(v_std_any_get_pointer(intptr_t[2], a) : *struct { v_quark_t; size_t; });

            tag = v_quark_to_string(item[0]);

            printf("  #%d: %s", i, tag);

            column: &size_t := v_undef();

            line = v_peg_get_line_column(item[1], &column);

            printf(": %zd:%zd\n", line, column);
        }

        printf("\n");
    }
}

//---------------------------------------------------------------------
ctx_g: &my_trace_grammar_ctx_t := v_undef();
ctx_v: &my_trace_visitor_ctx_t := v_undef();

//---------------------------------------------------------------------
{   __sanitizer_set_death_callback: (*(() ~> void)) ~> void;

    __sanitizer_set_death_callback(print_trace);


    grm = v_peg_get_grammar();

    ctx_g.fun := v_peg_grammar_get_parse_hook(grm, &ctx_g.aux);

    v_peg_grammar_set_parse_hook(grm, grm, my_trace_grammar, &ctx_g);


    vis = v_get_compiler();

    ctx_v.fun := voidc_visitor_get_visit_hook(vis, &ctx_v.aux);

    voidc_visitor_set_visit_hook(vis, vis, my_trace_visitor, &ctx_v);
}




//---------------------------------------------------------------------
{
    v_import("try_projects/polyhedra2d/geometry.void");
}

{
    my_stdout << "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n";
}


//---------------------------------------------------------------------
print_trace_test: () ~> void
{
    item: &*my_trace_visitor_item_t := my_trace_visitor_item_root;

    if (item)
    {
        printf("\nVisitor trace:\n");

        filename = v_target_local_ctx_get_filename(v_target_get_local_ctx());

        printf("%s\n", filename);

        for (i: &int := 1; item; item := item->nxt, ++i)
        {
            tag = v_quark_to_string(v_ast_base_get_tag(item->ast));

            printf("  #%d: %s", i, tag);

            pps = v_std_any_get_pointer(size_t, v_ast_get_property(item->ast, pos_start_q));
            ppe = v_std_any_get_pointer(size_t, v_ast_get_property(item->ast, pos_end_q));

            line:   &size_t := v_undef();
            column: &size_t := v_undef();

            if (pps)
            {
                line := v_peg_get_line_column(*pps, &column);

                printf(": %zd:%zd", line, column);
            }

            if (ppe)
            {
                line := v_peg_get_line_column(*ppe, &column);

                printf(" - %zd:%zd", line, column);
            }

            printf("\n");
        }
a;
        printf("\n");
    }
}



////---------------------------------------------------------------------
//{
//    zero: &*int := 0;
//
//    *zero := 666;
//}






    {   stmt: &v_ast_generic_list_t :=
        {'stmt'

            #define my_step: (lst, v)
            {'stmt_list'

                v_std_any_set_value(&my_any, v);

                v_list_append(lst, lst, &my_any);

            'stmt_list'}

        'stmt'};

    }





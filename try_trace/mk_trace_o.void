{   v_import("mainline.void");

    v_import("llvm-c/Core.void");
    v_import("llvm-c/TargetMachine.void");

    v_import("printf.void");
}

{   v_enable_mainline();
}


//=====================================================================
{   module = LLVMModuleCreateWithName("trace_module");

    v_set_module(module);
}


//---------------------------------------------------------------------
private pos_start_q: &v_quark_t := v_quark_from_string("pos_start");
private pos_end_q:   &v_quark_t := v_quark_from_string("pos_end");

private
get_line_column: (p: *v_ast_base_t, q: v_quark_t, c: &size_t) ~> size_t
{
    pp = v_std_any_get_pointer(size_t, v_ast_get_property(p, q));

    if (!pp)  v_return(0);

    v_return(v_peg_get_line_column(*pp, &c));
}

//---------------------------------------------------------------------
private
compile_stmt_list: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    len: &size_t := 0;

    module = v_get_module();

    filename = LLVMGetSourceFileName(module, &len);

    builder = v_target_get_builder();

    cur_b = LLVMGetInsertBlock(builder);

    fun = LLVMGetBasicBlockParent(cur_b);

    function = LLVMGetValueName2(fun, &len);

    column: &size_t := 0;
    line:   &size_t := get_line_column(self, pos_start_q, column);

    printf("%s (%zd:%zd) %s: list begin\n", filename, line, column, function);

    list = (self: *v_ast_stmt_list_t);

    for (i: &int := 0, n = v_list_get_size(list); i < n; ++i)
    {
        stmt = v_list_get_item(list, i);

        column := i;
        line   := get_line_column(stmt, pos_start_q, column);

        printf("%s (%zd:%zd) %s: stmt begin\n", filename, line, column, function);

        v_ast_accept_visitor((stmt: *v_ast_base_t), vis);

        column := i;
        line   := get_line_column(stmt, pos_end_q, column);

        printf("%s (%zd:%zd) %s: stmt end\n", filename, line, column, function);
    }

    column := 0;
    line   := get_line_column(self, pos_end_q, column);

    printf("%s (%zd:%zd) %s: list end\n", filename, line, column, function);
}



//---------------------------------------------------------------------
export
v_enable_trace: () ~> void
{
    voidc_internal_voidc_compiler_level_zero:  &voidc_visitor_t;
    voidc_internal_target_compiler_level_zero: &voidc_visitor_t;

    vis0 = &voidc_internal_voidc_compiler_level_zero;
    vis1 = &voidc_internal_target_compiler_level_zero;
    vis2 = v_get_compiler();

    stmt_list_q = v_quark_from_string("stmt_list");

    voidc_visitor_set_method(vis0, vis0, stmt_list_q, compile_stmt_list, 0);
    voidc_visitor_set_method(vis1, vis1, stmt_list_q, compile_stmt_list, 0);
    voidc_visitor_set_method(vis2, vis2, stmt_list_q, compile_stmt_list, 0);
}


//=====================================================================
{   module = v_get_module();

//  v_debug_print_module(1);

    v_finish_module(module);

    voidc_prepare_module_for_jit(module);

    //-----------------------------------------------------------------
    LLVMTargetMachineEmitToFile(voidc_target_machine,
                                module,
                                "try_trace.o",
                                LLVMObjectFile,
                                0);
}



{   v_import("try_imports.void"); }

//---------------------------------------------------------------------
{   make_module("try_module"); }
//---------------------------------------------------------------------
{
    v_import("try_header.void");
}

//---------------------------------------------------------------------
(v_initialize(_)): (s: *data_t, n: size_t) ~> void
{
    printf("init s: %p, n: %d\n", s, (n: int));

    for (i: &size_t := 0; i < n; ++i)   s[i].v := (i: int);
}

(v_terminate(_)): (s: *data_t, n: size_t) ~> void
{
    printf("term s: %p, n: %d\n", s, (n: int));
}

(v_copy(_)): (d: *data_t, s: *const data_t, n: size_t) ~> void
{
    printf("copy d: %p, s: %p, n: %d\n", d, s, (n: int));

    for (i: &size_t := 0; i < n; ++i)   d[i].v := s[i].v;
}


//---------------------------------------------------------------------
(v_initialize(_)): (*data2_t, size_t) ~> void = derive;
(v_terminate(_)):  (*data2_t, size_t) ~> void = derive;
(v_copy(_)):       (*data2_t, *const data2_t, size_t) ~> void = derive;


//---------------------------------------------------------------------
private alwaysinline
zzzz_init: (s: *const char) ~> data_t
{
    ret = v_get_return_value();

    ret.v := 777;

    printf("zzzz_init: %s\n", s);
}

zzzz: data_t = zzzz_init("Кагдила?");



//---------------------------------------------------------------------
{   emit_module("try_module.o"); }
//---------------------------------------------------------------------


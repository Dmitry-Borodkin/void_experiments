{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("level-01/arithmetic.void");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();
}


//=====================================================================
compute_key_quark_type_ft = (vis: *voidc_visitor_t, aux: *void,
                             ft: *v_type_t,
                             iq: &intptr_t, t: &*v_type_t
                            ) -> void;

struct my_compute_key_quark_type_ctx_t
{
    fun: *compute_key_quark_type_ft;
    aux: *void;
};

my_compute_key_quark_type_ctx: &my_compute_key_quark_type_ctx_t := v_undef();


//---------------------------------------------------------------------
my_quarks_item_t = v_struct({ *const char, *v_quark_t });

my_quarks: &my_quarks_item_t[] :=
{
    { "v_initialize" },
    { "v_terminate" },

    { "v_copy" },
    { "v_move" },

    { "v_empty" },
    { "v_kind" },

    { "v_make_list_nil" },              // ?..
    { "v_make_list" },                  // ?..
                                        // ?..
    { "v_list_append" },                // ?..
    { "v_list_get_size" },              // ?..
    { "v_list_get_item" },              // ?..
                                        // ?..
    { "v_ast_make_generic" },           // ?..
    { "v_ast_generic_get_vtable" },     // ?..
    { "v_ast_generic_get_object" },     // ?..
};

my_quarks_compare: (void_lhs: *const void, void_rhs: *const void) -> int
{
    lhs = *(void_lhs: *my_quarks_item_t);
    rhs = *(void_rhs: *my_quarks_item_t);

    v_return((*lhs[1]: int) - (*rhs[1]: int));
}

//---------------------------------------------------------------------
qsort: (ptr: *void, count: size_t, size: size_t, comp: *((*const void, *const void) -> int)) -> void;

bsearch: (key: *const void, ptr: *const void, count: size_t, size: size_t, comp: *((*const void, *const void) -> int)) -> *void;

//---------------------------------------------------------------------
{   t = v_find_symbol_type("my_quarks");

    t = v_type_refptr_get_element_type(t);

    l = v_type_array_get_length(t);

    v_add_constant("my_quarks_count", int, LLVMConstInt(v_type_get_llvm_type(int), l, 0));

    for (i: &int := 0; i < l; ++i)
    {
        my_quarks[i][1] := v_quark_ptr_from_string(my_quarks[i][0]);
    }

    qsort(my_quarks, l, my_quarks_item_t.size, my_quarks_compare);


    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("q_internal_spec_fun_derive", q_ref, q("v.internal.spec_fun_derive"));

    v_add_symbol("q_initialize", q_ref, q("v_initialize"));
    v_add_symbol("q_terminate",  q_ref, q("v_terminate"));
    v_add_symbol("q_copy",       q_ref, q("v_copy"));

    v_add_symbol("q_alloca",        q_ref, q("v_alloca"));
    v_add_symbol("q_getelementptr", q_ref, q("v_getelementptr"));
    v_add_symbol("q_load",          q_ref, q("v_load"));
    v_add_symbol("q_store",         q_ref, q("v_store"));
    v_add_symbol("q_break",         q_ref, q("v_break"));
    v_add_symbol("q_icmp",          q_ref, q("v_icmp"));
    v_add_symbol("q_binop",         q_ref, q("v_binop"));

    v_add_symbol("q_idx",   q_ref, q("v.idx"));
    v_add_symbol("q_idx_v", q_ref, q("v.idx.v"));
}

//---------------------------------------------------------------------
my_compute_key_quark_type: (vis: *voidc_visitor_t, aux: *void,
                            ft: *v_type_t,
                            iq: &intptr_t, t: &*v_type_t
                           ) -> void
{
    if (iq > 0)
    {
        q: &v_quark_t := (iq: v_quark_t);

        key: &my_quarks_item_t := { 0, &q };

        if (bsearch(&key, my_quarks, my_quarks_count, my_quarks_item_t.size, my_quarks_compare))
        {
            type = v_type_function_get_param_types(ft)[0];

            t := v_type_refptr_get_element_type(type);

            v_return();
        }
    }

    ctx = *(aux: *my_compute_key_quark_type_ctx_t);

    ctx.fun(vis, ctx.aux, ft, iq, t);
}


//---------------------------------------------------------------------
mk_spec_ident_identifier_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) -> void
{
    id = v_std_any_get_pointer(v_std_string_t, any);

    quark = v_quark_from_string(v_std_string_get(id));

    v_std_any_set_value(ret, (quark: intptr_t));
}

mk_unit_spec_fun_derive_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) -> void
{
    head = v_std_any_get_pointer(v_ast_generic_list_t, any+0);

    expr_quark = (v_list_get_item(head, 1) : *v_ast_expr_t);

    lst = v_alloca(v_ast_expr_list_t);
    v_initialize(lst);
    defer v_terminate(lst);

    v_make_list(lst, expr_quark, 1);

    etmp = v_alloca(v_ast_expr_t);
    v_initialize(etmp);
    defer v_terminate(etmp);

    v_ast_make_expr_identifier_q(etmp, q_internal_spec_fun_derive);

    v_ast_make_expr_call(etmp, etmp, lst);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);
    defer v_terminate(stmt);

    v_ast_make_stmt_q(stmt, 0, etmp);

    body = v_alloca(v_ast_stmt_list_t);
    v_initialize(body);
    defer v_terminate(body);

    v_make_list(body, stmt, 1);

    lst = v_alloca(v_ast_generic_list_t);
    v_initialize(lst);
    defer v_terminate(lst);

    v_list_append(lst, head, (body: *v_ast_base_t), 1);

    v_std_any_set_pointer(ret, lst);
}

//---------------------------------------------------------------------
v_internal_spec_fun_derive_intrinsic: (vis: *voidc_visitor_t, aux: *void, self: *v_ast_base_t) -> void
{
    call = (self: *v_ast_expr_t);

    arg_list = v_ast_expr_call_get_arg_list(call);

    arg0 = v_list_get_item(arg_list, 0);

    //-------------------------------------------------------------
    quark = (v_ast_expr_integer_get_number(arg0) : v_quark_t);

    is_copy = (quark == q_copy);

    //- assert(is_copy  ||  quark == q_initialize  ||  quark == q_terminate);

    //-------------------------------------------------------------
    builder = v_target_get_builder();

    cur_b = LLVMGetInsertBlock(builder);

    fun = LLVMGetBasicBlockParent(cur_b);

    len: &size_t := 0;

    fun_name = LLVMGetValueName2(fun, &len);

    fun_type = v_find_symbol_type(fun_name);

    params = v_type_function_get_param_types(fun_type);

    //-------------------------------------------------------------
    {   v_add_parameter_name(fun, 0, "v.dst", params[0]);

        i: &int := 1;

        if (is_copy)
        {
            v_add_parameter_name(fun, 1, "v.src", params[1]);

            i := 2;
        }

        v_add_parameter_name(fun, i, "v.count", params[i]);
    }

    //-------------------------------------------------------------
    expr = v_alloca(v_ast_expr_t, 4);
    v_initialize(expr, 4);
    defer v_terminate(expr, 4);

    stmt = v_alloca(v_ast_stmt_t, 2);
    v_initialize(stmt, 2);
    defer v_terminate(stmt, 2);

    expr_list = v_alloca(v_ast_expr_list_t, 4);
    v_initialize(expr_list, 4);
    defer v_terminate(expr_list, 4);

    stmt_list = v_alloca(v_ast_stmt_list_t, 2);
    v_initialize(stmt_list, 2);
    defer v_terminate(stmt_list, 2);

    v_make_list_nil(stmt_list+0);
    v_make_list_nil(stmt_list+1);

    v_ast_make_expr_identifier(expr+0, "int");

    v_ast_make_stmt_call(stmt+0, q_idx, q_alloca, expr+0, 1);
    v_list_append(stmt_list+0, stmt_list+0, stmt+0);

    v_ast_make_expr_integer(expr+0, 0);
    v_ast_make_expr_identifier_q(expr+1, q_idx);

    v_ast_make_stmt_call(stmt+0, 0, q_store, expr, 2);
    v_list_append(stmt_list+0, stmt_list+0, stmt+0);

    //-------------------------------------------------------------
    v_ast_make_expr_identifier_q(expr+0, q_idx);

    v_ast_make_stmt_call(stmt+0, q_idx_v, q_load, expr+0, 1);
    v_list_append(stmt_list+1, stmt_list+1, stmt+0);

    //-------------------------------------------------------------
    v_ast_make_expr_identifier(expr+0, "LLVMIntSGE");

    v_ast_make_expr_identifier_q(expr+1, q_idx_v);

    v_ast_make_expr_identifier(expr+2, "v.count");

    v_make_list(expr_list+0, expr, 3);

    v_ast_make_expr_identifier_q(expr+0, q_icmp);

    v_ast_make_expr_call(expr+0, expr+0, expr_list+0);

    v_ast_make_stmt_call(stmt+0, 0, q_break, 0, 0);

    //- assert(v_empty(stmt+1));

    v_ast_make_stmt_if_then_else(stmt+0, expr+0, stmt+0, stmt+1);
    v_list_append(stmt_list+1, stmt_list+1, stmt+0);

    //-------------------------------------------------------------
    type = v_type_refptr_get_element_type(params[0]);

    //- assert(v_type_is_struct(type));

    count = v_type_struct_get_element_count(type);
    types = v_type_struct_get_element_types(type);

    void_fun: &*void := v_undef();
    void_aux: &*void := v_undef();

    ft: &v_type_ptr   := v_undef();
    fv: &LLVMValueRef := v_undef();

    for (n: &unsigned := 0; n < count; ++n)
    {
        v_ast_make_expr_identifier(expr+0, "v.dst");

        v_ast_make_expr_identifier_q(expr+1, q_idx_v);

        v_ast_make_expr_integer(expr+2, n);

        v_make_list(expr_list+0, expr+0, 3);

        v_copy(expr_list+2, expr_list+0);

        if (is_copy)
        {
            v_ast_make_expr_identifier(expr+0, "v.src");

            v_make_list(expr_list+1, expr+0, 3);

            v_copy(expr_list+3, expr_list+1);
        }

        v_ast_make_expr_integer(expr+0, 0);

        et: &v_type_ptr := types[n];

        length: &uint64_t := 1;

        loop
        {
            if (!v_type_is_array(et))   v_break();

            length *= v_type_array_get_length(et);

            v_list_append(expr_list+0, expr_list+0, expr+0, 1);

            if (is_copy)  v_list_append(expr_list+1, expr_list+1, expr+0, 1);

            et := v_type_array_get_element_type(et);
        }

        if (length == 0)  v_continue();     //- WTF?

        v_ast_make_expr_identifier_q(expr+2, q_getelementptr);

        if (v_util_lookup_function_dict(vis, et, quark, void_fun, void_aux, ft, fv))
        {
            v_ast_make_expr_call(expr+0, expr+2, expr_list+0);

            if (is_copy)
            {
                v_ast_make_expr_call(expr+1, expr+2, expr_list+1);

                v_ast_make_expr_integer(expr+2, (length: intptr_t));

                v_ast_make_stmt_call(stmt+0, 0, quark, expr, 3);
            }
            else
            {
                v_ast_make_expr_integer(expr+1, (length: intptr_t));

                v_ast_make_stmt_call(stmt+0, 0, quark, expr, 2);
            }
        }
        else
        {
            if (!is_copy)   v_continue();

            v_ast_make_expr_call(expr+1, expr+2, expr_list+2);
            v_ast_make_expr_call(expr+0, expr+2, expr_list+3);

            v_make_list(expr_list+0, expr+0, 1);

            v_ast_make_expr_identifier_q(expr+0, q_load);

            v_ast_make_expr_call(expr+0, expr+0, expr_list+0);

            v_ast_make_stmt_call(stmt+0, 0, q_store, expr+0, 2);
        }

        v_list_append(stmt_list+1, stmt_list+1, stmt+0);
    }

    //-------------------------------------------------------------
    v_ast_make_expr_identifier(expr+0, "LLVMAdd");

    v_ast_make_expr_identifier_q(expr+1, q_idx_v);

    v_ast_make_expr_integer(expr+2, 1);

    v_make_list(expr_list+0, expr, 3);

    v_ast_make_expr_identifier(expr+0, "v_binop");

    v_ast_make_expr_call(expr+0, expr+0, expr_list+0);

    v_ast_make_expr_identifier_q(expr+1, q_idx);

    v_ast_make_stmt_call(stmt+0, 0, q_store, expr+0, 2);

    v_list_append(stmt_list+1, stmt_list+1, stmt+0);

    //-------------------------------------------------------------
    v_ast_make_stmt_block(stmt+0, stmt_list+1, false);

    v_ast_make_stmt_loop(stmt+0, stmt+0);

    v_list_append(stmt_list+0, stmt_list+0, stmt+0);

    //-------------------------------------------------------------
    v_ast_accept_visitor((stmt_list+0 : *v_ast_base_t), vis);
}

//---------------------------------------------------------------------
{
    vis = voidc_compiler;

    q = v_quark_from_string("voidc.compute_key_quark_type");

    my_compute_key_quark_type_ctx.fun := voidc_visitor_get_intrinsic(vis, q, &my_compute_key_quark_type_ctx.aux);

    voidc_visitor_set_intrinsic(vis, vis, q, my_compute_key_quark_type, &my_compute_key_quark_type_ctx);


    voidc_visitor_set_intrinsic(vis, vis, q_internal_spec_fun_derive, v_internal_spec_fun_derive_intrinsic, 0);


    gr0 = v_alloca(v_peg_grammar_t);
    v_initialize(gr0);
    defer v_terminate(gr0);

    v_peg_get_grammar(gr0);

    grammar gr0
    {
    actions:
        mk_spec_ident_identifier = mk_spec_ident_identifier_grammar_action;
        mk_unit_spec_fun_derive  = mk_unit_spec_fun_derive_grammar_action;

    parsers:
        spec_ident =+ '(' _ id:identifier _ '(' _ '_' _ ')' _ ')'       { mk_spec_ident_identifier(id) };

        unit_spec_fun_defn =+ h:unit_spec_fun_defn_hdr _'='_ "derive" _';'   { mk_unit_spec_fun_derive(h) };
    }

    v_peg_set_grammar(gr0);
}


//=====================================================================
struct unique_ptr_int
{
    ptr: *int;
};

alwaysinline
(v_initialize(_)): (sp: *unique_ptr_int, N: int) -> void
{
    for (i: &int := 0; i < N; ++i)  sp[i].ptr := 0;
}

alwaysinline
(v_terminate(_)): (sp: *unique_ptr_int, N: int) -> void
{
    for (i: &int := 0; i < N; ++i)  v_free(sp[i].ptr);
}

alwaysinline
(v_move(_)): (dst: *unique_ptr_int, src: *unique_ptr_int, N: int) -> void
{
    for (i: &int := 0; i < N; ++i)
    {
        v_free(dst[i].ptr);

        dst[i].ptr := src[i].ptr;

        src[i].ptr := 0;
    }
}

alwaysinline
(*_): (sp: &unique_ptr_int) -> &int
{
    v_return(*sp.ptr);
}

alwaysinline
(_:=_): (dst: &unique_ptr_int, src: &unique_ptr_int) -> &unique_ptr_int
{
    v_move(&dst, &src);

    v_return(dst);
}

//---------------------------------------------------------------------
print: (a: &unique_ptr_int) -> void
{
    if (a.ptr)  printf("%d\n", *a);
    else        printf("(nil)\n");
}

N: &int := 7;


//---------------------------------------------------------------------
{   v_debug_print_module(2);

    voidc_verify_jit_module_optimized(true);
}

{   a: &unique_ptr_int := v_undef();
    v_initialize(&a);
    defer v_terminate(&a);

    a.ptr := v_malloc(int);

    *a := 777;

    printf("a: ");  print(a);

    N *= 2;

    b = v_alloca(unique_ptr_int, N);
    v_initialize(b, N);
    defer v_terminate(b, N);

    for (i: &int := 0; i < N; ++i)
    {
        b[i].ptr := v_malloc(int);

        *b[i] := 111 + i;
    }

    for (i: &int := 0; i < N; i += 2)
    {
        b[i] := b[i+1];
    }

    for (i: &int := 0; i < N; ++i)
    {
        printf("b[%d]: ", i);   print(b[i]);
    }
}


//---------------------------------------------------------------------
//{   v_debug_print_module(2);
//
//    voidc_verify_jit_module_optimized(true);
//}

struct qwe_t
{
    p: v_ast_base_t[3][7][2];
    q: int[3];
    r: v_ast_expr_t[5][4][3];
};

(v_initialize(_)): (*qwe_t, int) -> void = derive;
(v_terminate(_)):  (*qwe_t, int) -> void = derive;

(v_copy(_)): (*qwe_t, *const qwe_t, int) -> void = derive;



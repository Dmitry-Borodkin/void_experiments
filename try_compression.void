{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("llvm-c/Core.void");
}

{   v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
struct myz_ctx_t
{
    next_in:    *const uint(8);     //- "next_in"
    avail_in:   size_t;             //- "avail_in"

    next_out:   *uint(8);           //- "next_out"
    avail_out:  size_t;             //- "avail_out"

    //-------------------------------------------------------------
    remain_in:  uint(8);            //- Input bits remain (out of 8)
    buffer_in:  uint(8);            //- Input bits buffer

    remain_out: uint(8);            //- Output bits remain (out of 8)
    buffer_out: uint(8);            //- Output bits buffer

    //- ...

};


//---------------------------------------------------------------------
//- Get one bit
//---------------------------------------------------------------------
myz_get_bit: (ctx: &myz_ctx_t) -> bool
{
    if (ctx.remain_in == 0)
    {
        ctx.buffer_in := *ctx.next_in++;
        ctx.remain_in := 8;

        //- assert(ctx.avail_in != 0);

        ctx.avail_in--;
    }

    b = ctx.buffer_in;

    r = b & 1;

    b >>= 1;

    ctx.remain_in -= 1;

    v_return((r: bool));
}


//---------------------------------------------------------------------
//- Put one bit
//---------------------------------------------------------------------
myz_put_bit: (ctx: &myz_ctx_t, bit: bool) -> void
{
    //- assert(ctx.remain_out < 8);

    b = ctx.buffer_out;
    n = ctx.remain_out;

    b |= bit << n;

    n += 1;

    if (n == 8)
    {
        *ctx.next_out++ := b;

        ctx.avail_out--;

        b := 0;
        n := 0;
    }
}



























//---------------------------------------------------------------------
{
    buf: &char[32] := v_undef();

    ctx: &myz_ctx_t := 0;

    msg: &char[] := "Hello world!";

    ctx.next_in  := msg;
    ctx.avail_in := 13;

    ctx.next_out  := buf;
    ctx.avail_out := 32;


    str: &char[9] := 0;

    for (i: &int := 0; ctx.avail_in || i%8; ++i)
    {
        c = *ctx.next_in;

        if (i%8 == 0)  printf("\'%c\': %02X: ", c, c);

        b = myz_get_bit(ctx);

        myz_put_bit(ctx, b);

        str[7 - i%8] := ('0' + b : char);

        if (i%8 == 7)  printf("%s\n", str);
    }

    printf("\n%s\n", buf);
}



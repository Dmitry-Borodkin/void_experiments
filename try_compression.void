{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("llvm-c/Core.void");
}

{   v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
struct myz_ctx_t
{
    next_in:    *const uint(8);     //- "next_in"
    avail_in:   size_t;             //- "avail_in"

    next_out:   *uint(8);           //- "next_out"
    avail_out:  size_t;             //- "avail_out"

    //-------------------------------------------------------------
    remain_in:  uint(8);            //- Input bits remain (out of 8)
    buffer_in:  uint(8);            //- Input bits buffer

    remain_out: uint(8);            //- Output bits remain (out of 8)
    buffer_out: uint(8);            //- Output bits buffer

    //- ...

};


//---------------------------------------------------------------------
//- Get one bit
//---------------------------------------------------------------------
myz_get_bit: (ctx: &myz_ctx_t) -> bool
{
    if (ctx.remain_in == 0)
    {
        ctx.buffer_in := *ctx.next_in++;
        ctx.remain_in := 8;

        //- assert(ctx.avail_in != 0);

        ctx.avail_in--;
    }

    b = ctx.buffer_in;

    r = b & 1;

    b >>= 1;

    ctx.remain_in -= 1;

    v_return((r: bool));
}


//---------------------------------------------------------------------
//- Put one bit
//---------------------------------------------------------------------
myz_put_bit: (ctx: &myz_ctx_t, bit: bool) -> void
{
    b = ctx.buffer_out;
    n = ctx.remain_out;

    b |= bit << n;

    n += 1;

    if (n == 8)
    {
        //- assert(ctx.avail_out != 0);

        *ctx.next_out++ := b;

        ctx.avail_out--;

        b := 0;
        n := 0;
    }
}


//---------------------------------------------------------------------
//- Dictionary ...
//---------------------------------------------------------------------
struct myz_enc_t
{
    next: (*myz_enc_t)[2];

    code: size_t;

    link: *myz_enc_t;           //- ...
};


//---------------------------------------------------------------------
//- Encoding ...
//---------------------------------------------------------------------
write_bits: (ctx: &myz_ctx_t, code: size_t, bits: int) -> bool
{
//  printf("write_bits: %d, %d\n", (code: int), bits);
//  defer printf("write_bits leave\n");

    code: &size_t := code;

    for (i: &int := 0; i < bits; ++i)
    {

        myz_put_bit(ctx, (code & 1 : bool));

        if (ctx.avail_out == 0)  v_return(false);       //- ?

        code >>= 1;
    }

    v_return(true);
}

myz_encode: (ctx: &myz_ctx_t) -> bool
{
    bits: &int := 2;

    next_code:  &size_t := 2;
    next_shift: &size_t := 4;


    dict = v_malloc(myz_enc_t);

    *dict := 0;

    last: &*myz_enc_t := dict;

    dict~>next[0] := v_malloc(myz_enc_t);

    *dict~>next[0] := 0;

    last~>link := dict~>next[0];
    last := dict~>next[0];

    dict~>next[1] := v_malloc(myz_enc_t);

    *dict~>next[1] := 0;

    dict~>next[1]~>code := 1;

    last~>link := dict~>next[1];
    last := dict~>next[1];


    link: &*myz_enc_t := dict~>next[myz_get_bit(ctx)];

    for (i: &int := 1; ctx.avail_in || i%8; ++i)
    {
        c = myz_get_bit(ctx);

        if (next = link~>next[c])
        {
            link := next;
        }
        else
        {
            if (!write_bits(ctx, link~>code, bits))  v_return(false);

            next := v_malloc(myz_enc_t);

            *next := 0;

            last~>link := next;
            last := next;

            next~>code := next_code++;

            link := dict~>next[c];
        }

        if (next_code == next_shift)
        {
            bits++;

            next_shift *= 2;
        }
    }

    if (!write_bits(ctx, link~>code, bits))  v_return(false);

    if (!write_bits(ctx, 1, 1))  v_return(false);
    if (!write_bits(ctx, 0, 8))  v_return(false);

    for (last := dict; last; )
    {
        link = v_load(&last~>link);

        v_free(last);

        last := link;
    }

    printf("next_code: %d\n", next_code);

    v_return(true);
}





//=====================================================================
strlen: (*char) -> size_t;

//---------------------------------------------------------------------
my_source: &char[] := "Hello world!";

{
    BUFSIZE = 4096;

    buf = v_malloc(char, BUFSIZE);

    ctx: &myz_ctx_t := 0;

    ctx.next_in  := my_source;
    ctx.avail_in := strlen(my_source);

    printf("sz: %d\n", (ctx.avail_in : int));

    ctx.next_out  := buf;
    ctx.avail_out := BUFSIZE;


    ok = myz_encode(ctx);

    printf("ok: %d\n", (ok: int));

    if (!ok)  v_return();

    n = BUFSIZE - ctx.avail_out;

    printf("n: %d\n", (n: int));

    for (i: &int := 0; i < n; ++i)
    {
        byte: &uint(8) := buf[i];

        printf("%02X", byte);

        if (i%50 == 49)  printf("\n");
    }

    printf("\n");

    v_free(buf);
}




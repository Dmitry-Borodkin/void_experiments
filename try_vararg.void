{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");
    v_import("level-03");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();
    v_enable_level_03();
}


//---------------------------------------------------------------------
struct va_list { (*void)[3]; };

{   typ: &v_type_ptr := v_pointer_type(v_int_type(8), 0);

    ft = v_function_type(void, &typ, 1, false);

    v_add_symbol("llvm.va_start", ft, 0);
    v_add_symbol("llvm.va_end",   ft, 0);

    v_add_alias("va_start", "llvm.va_start");
    v_add_alias("va_end",   "llvm.va_end");
}

//---------------------------------------------------------------------
va_arg_intrinsic: (vis: *voidc_visitor_t, *void, self: *v_ast_base_t) -> void
{
    call = (self: *v_ast_expr_t);

    arg_list = v_ast_expr_call_get_arg_list(call);

    arg0 = v_list_get_item(arg_list, 0);
    arg1 = v_list_get_item(arg_list, 1);

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    v_set_result_type(v_pointer_type(v_int_type(8), 0));
    v_set_result_value(0);

    v_ast_accept_visitor((arg0: *v_ast_base_t), vis);

    va_lst = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor((arg1: *v_ast_base_t), vis);

    typ = (v_get_result_value() : *v_type_t);

    builder = v_target_get_builder();

    v = LLVMBuildVAArg(builder, va_lst, v_type_get_llvm_type(typ), "");

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(typ, v);
}

{   v_add_intrinsic("va_arg", va_arg_intrinsic, 0);
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }

test_fun: (n: int, ...) -> void
{
    ap: &va_list := v_undef();

    ap2 = (&ap : *int(8));

    va_start(ap2);

    for (i: &int := 0; i < n; ++i)
    {
        v = va_arg(ap2, int);

        printf("%d: %d\n", i, v);
    }

    va_end(ap2);
}


//---------------------------------------------------------------------
{
    test_fun(3, 0, 1, 2);

    printf("\n");

    test_fun(5, 44, 33, 22, 11, 0);

}



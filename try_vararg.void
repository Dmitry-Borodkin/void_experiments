{   v_import("voidc_target.void");
    v_import("voidc_types.void");
    v_import("voidc_util.void");
    v_import("voidc_ast.void");
    v_import("voidc_quark.void");
    v_import("voidc_visitor.void");

    v_import("if_then_else.void");
    v_import("block.void");
    v_import("loop.void");
    v_import("expression.void");
    v_import("defer.void");
    v_import("definitions.void");

    v_import("llvm-c/Core.void");
}

{   v_import("printf.void");
}

{   voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
    voidc_enable_statement_loop();
    voidc_enable_expression();
    voidc_enable_statement_defer();
    voidc_enable_definitions();
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    typ: &v_type_ptr[4] := v_undef();

    typ[0] := v_int_type(32);
    typ[1] := v_int_type(32);
    typ[2] := v_pointer_type(v_int_type(8), 0);
    typ[3] := v_pointer_type(v_int_type(8), 0);

    va_list = v_struct_type_named("struct.va_list");

    v_type_struct_set_body(va_list, &typ[0], 4, false);

    v_add_type("va_list", va_list);
}

{   typ: &v_type_ptr := v_pointer_type(v_int_type(8), 0);

    ft = v_function_type(void, &typ, 1, false);

    v_add_symbol("llvm.va_start", ft, 0);
    v_add_symbol("llvm.va_end",   ft, 0);

    v_add_alias("va_start", "llvm.va_start");
    v_add_alias("va_end",   "llvm.va_end");
}

//---------------------------------------------------------------------
va_arg_intrinsic: (vis: voidc_visitor_ptr, *void,
                   args: v_ast_expr_list_ptr, count: int) -> void
{
    arg = v_alloca(v_ast_opaque_expr_sptr, 2);
    v_initialize(arg, 2);
    defer v_terminate(arg, 2);

    v_list_get_items(args, 0, arg, 2);

    tt = v_get_result_type();

    v_set_result_type(v_pointer_type(v_int_type(8), 0));

    v_ast_accept_visitor((arg+0 : v_ast_base_ptr), vis);

    va_lst = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);

    v_ast_accept_visitor((arg+1 : v_ast_base_ptr), vis);

    typ = v_get_result_type();

    builder = v_target_get_builder();

    v = LLVMBuildVAArg(builder, va_lst, v_type_get_llvm_type(typ), "");

    v_set_result_type(tt);

    v_adopt_result(typ, v);
}

{   v_add_intrinsic("va_arg", va_arg_intrinsic, 0);
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }

test_fun: (n: int, ...) -> void
{
    ap: &va_list := v_undef();

    ap2 = (&ap : *int(8));

    va_start(ap2);

    i: &int := 0;

    loop
    {
        if (i >= n) v_break();

        v = va_arg(ap2, int);

        printf("%d: %d\n", i, v);

        ++i;
    }

    va_end(ap2);
}


//---------------------------------------------------------------------
{
    test_fun(3, 0, 1, 2);

    printf("\n");

    test_fun(5, 44, 33, 22, 11, 0);

}



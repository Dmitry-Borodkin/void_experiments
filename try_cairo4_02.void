{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("llvm-c/Support.void");
}

{   v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();
}


//---------------------------------------------------------------------
//- ... <cairo/cairo.h>
//---------------------------------------------------------------------
{   ok = LLVMLoadLibraryPermanently("libcairo.so");

    printf("ok: %d\n", ok);
}


{   surface_t = v_struct_type_named("struct.cairo_surface_t");

    v_add_type("cairo_surface_t", surface_t);

    cairo_t = v_struct_type_named("struct.cairo_t");

    v_add_type("cairo_t", cairo_t);
}


//---------------------------------------------------------------------
double = float(64);


//---------------------------------------------------------------------
cairo_format_t = int;

CAIRO_FORMAT_ARGB32:    cairo_format_t = 0;
CAIRO_FORMAT_RGB24:     cairo_format_t = 1;
CAIRO_FORMAT_A8:        cairo_format_t = 2;
CAIRO_FORMAT_A1:        cairo_format_t = 3;
CAIRO_FORMAT_RGB16_565: cairo_format_t = 4;
CAIRO_FORMAT_RGB30:     cairo_format_t = 5;

cairo_image_surface_create: (cairo_format_t, width: int, height: int) -> *cairo_surface_t;

cairo_surface_flush: (*cairo_surface_t) -> void;

cairo_surface_write_to_png: (*cairo_surface_t, filename: *const char) -> int;

cairo_surface_destroy: (*cairo_surface_t) -> void;


cairo_image_surface_create_for_data: (data: *uint(8),
                                      cairo_format_t,
                                      width:  int,
                                      height: int,
                                      stride: int
                                      ) -> *cairo_surface_t;

cairo_format_stride_for_width: (format: cairo_format_t, width: int) -> int;


cairo_create: (*cairo_surface_t) -> *cairo_t;

cairo_destroy:       (*cairo_t) -> void;
cairo_paint:         (*cairo_t) -> void;
cairo_fill:          (*cairo_t) -> void;
cairo_fill_preserve: (*cairo_t) -> void;
cairo_stroke:        (*cairo_t) -> void;

cairo_set_source_rgb:  (*cairo_t, r: double, g: double, b: double) -> void;

cairo_set_source_rgba: (*cairo_t, r: double, g: double, b: double, a: double) -> void;

cairo_rectangle: (*cairo_t, x: double, y: double, w: double, h: double) -> void;

cairo_set_line_width: (*cairo_t, w: double) -> void;

cairo_line_to: (*cairo_t, x: double, y: double) -> void;
cairo_move_to: (*cairo_t, x: double, y: double) -> void;

cairo_close_path: (*cairo_t) -> void;

cairo_set_fill_rule: (*cairo_t, int) -> void;


cairo_operator_t = int;

CAIRO_OPERATOR_CLEAR          : cairo_operator_t =  0;
CAIRO_OPERATOR_SOURCE         : cairo_operator_t =  1;
CAIRO_OPERATOR_OVER           : cairo_operator_t =  2;
CAIRO_OPERATOR_IN             : cairo_operator_t =  3;
CAIRO_OPERATOR_OUT            : cairo_operator_t =  4;
CAIRO_OPERATOR_ATOP           : cairo_operator_t =  5;
CAIRO_OPERATOR_DEST           : cairo_operator_t =  6;
CAIRO_OPERATOR_DEST_OVER      : cairo_operator_t =  7;
CAIRO_OPERATOR_DEST_IN        : cairo_operator_t =  8;
CAIRO_OPERATOR_DEST_OUT       : cairo_operator_t =  9;
CAIRO_OPERATOR_DEST_ATOP      : cairo_operator_t = 10;
CAIRO_OPERATOR_XOR            : cairo_operator_t = 11;
CAIRO_OPERATOR_ADD            : cairo_operator_t = 12;
CAIRO_OPERATOR_SATURATE       : cairo_operator_t = 13;
CAIRO_OPERATOR_MULTIPLY       : cairo_operator_t = 14;
CAIRO_OPERATOR_SCREEN         : cairo_operator_t = 15;
CAIRO_OPERATOR_OVERLAY        : cairo_operator_t = 16;
CAIRO_OPERATOR_DARKEN         : cairo_operator_t = 17;
CAIRO_OPERATOR_LIGHTEN        : cairo_operator_t = 18;
CAIRO_OPERATOR_COLOR_DODGE    : cairo_operator_t = 19;
CAIRO_OPERATOR_COLOR_BURN     : cairo_operator_t = 20;
CAIRO_OPERATOR_HARD_LIGHT     : cairo_operator_t = 21;
CAIRO_OPERATOR_SOFT_LIGHT     : cairo_operator_t = 22;
CAIRO_OPERATOR_DIFFERENCE     : cairo_operator_t = 23;
CAIRO_OPERATOR_EXCLUSION      : cairo_operator_t = 24;
CAIRO_OPERATOR_HSL_HUE        : cairo_operator_t = 25;
CAIRO_OPERATOR_HSL_SATURATION : cairo_operator_t = 26;
CAIRO_OPERATOR_HSL_COLOR      : cairo_operator_t = 27;
CAIRO_OPERATOR_HSL_LUMINOSITY : cairo_operator_t = 28;

cairo_set_operator: (*cairo_t, cairo_operator_t) -> void;
cairo_get_operator: (*cairo_t) -> cairo_operator_t;


//---------------------------------------------------------------------
{
    cairo_ptr         = v_pointer_type(cairo_t,         0);
    cairo_surface_ptr = v_pointer_type(cairo_surface_t, 0);

    q = v_quark_from_string;

    v_util_function_dict_set(q(".flush()"),        cairo_surface_ptr, "cairo_surface_flush");
    v_util_function_dict_set(q(".write_to_png()"), cairo_surface_ptr, "cairo_surface_write_to_png");
    v_util_function_dict_set(q(".destroy()"),      cairo_surface_ptr, "cairo_surface_destroy");

    v_util_function_dict_set(q(".destroy()"),         cairo_ptr, "cairo_destroy");
    v_util_function_dict_set(q(".paint()"),           cairo_ptr, "cairo_paint");
    v_util_function_dict_set(q(".fill()"),            cairo_ptr, "cairo_fill");
    v_util_function_dict_set(q(".fill_preserve()"),   cairo_ptr, "cairo_fill_preserve");
    v_util_function_dict_set(q(".stroke()"),          cairo_ptr, "cairo_stroke");
    v_util_function_dict_set(q(".set_source_rgb()"),  cairo_ptr, "cairo_set_source_rgb");
    v_util_function_dict_set(q(".set_source_rgba()"), cairo_ptr, "cairo_set_source_rgba");
    v_util_function_dict_set(q(".rectangle()"),       cairo_ptr, "cairo_rectangle");
    v_util_function_dict_set(q(".set_line_width()"),  cairo_ptr, "cairo_set_line_width");
    v_util_function_dict_set(q(".line_to()"),         cairo_ptr, "cairo_line_to");
    v_util_function_dict_set(q(".move_to()"),         cairo_ptr, "cairo_move_to");
    v_util_function_dict_set(q(".close_path()"),      cairo_ptr, "cairo_close_path");
    v_util_function_dict_set(q(".set_fill_rule()"),   cairo_ptr, "cairo_set_fill_rule");
    v_util_function_dict_set(q(".set_operator()"),    cairo_ptr, "cairo_set_operator");
    v_util_function_dict_set(q(".get_operator()"),    cairo_ptr, "cairo_get_operator");
}


//---------------------------------------------------------------------
rand: () -> int;

RAND_MAX = 2147483647;      //- ?

my_rand: () -> double
{
    v_return( (rand(): double) / RAND_MAX );
}


//---------------------------------------------------------------------
sin: (double) -> double;
cos: (double) -> double;

M_PI = 3.14159265358979323846264338327950288419716939937510582;


//---------------------------------------------------------------------
random_triangle: (cr: *cairo_t, w: int, h: int) -> void
{
    t = 2 * my_rand();

    t = t*t*(3 - t) / 2;
    t = t*t*(3 - t) / 2;

    sh = t*t*(3 - t) / 4 * (w - h);

    x0 = sh + h*my_rand();
    y0 =      h*my_rand();

    x1 = sh + h*my_rand();
    y1 =      h*my_rand();

    x2 = sh + h*my_rand();
    y2 =      h*my_rand();

    c0 = my_rand();
    c1 = my_rand();

    a0 = my_rand();     a0 = a0 * a0 * 0.8;
    a1 = my_rand();     a1 = a1 * a1 * 0.8;


    cr.move_to(x0, y0);
    cr.line_to(x1, y1);
    cr.line_to(x2, y2);
    cr.close_path();

    cr.set_source_rgba(c0, c0, c0, a0);

    cr.fill_preserve();

    cr.set_source_rgba(c1, c1, c1, a1);

    cr.stroke();
}

//---------------------------------------------------------------------
nod: (N: int, M: int) -> int
{
    n: &int = N;
    m: &int = M;

    loop
    {
        if (n < m)  { s: int = n; n := m; m := s; }

        r = n % m;

        if (r == 0) v_return(m);

        n := r;
    }
}

//---------------------------------------------------------------------
random_star: (cr: *cairo_t, w: int, h: int) -> void
{
    r = (rand(): double) / RAND_MAX;

    kr = 50;

    r = r / ((1-kr)*r + kr);

    r = r * h / 2;

    x = my_rand();
    y = my_rand();

//    x = x*(w - 2*r) + r;
//    y = y*(h - 2*r) + r;

    x = x * w;
    y = y * h;

    n = my_rand();

    kn = 5;

    n = n / ((1-kn)*n + kn);

    n = (n*20 : int) + 3;

    m: &int := v_undef();

    loop
    {
        v = my_rand();

        m := (v*n/2 : int);

        if (m == 0) v_continue();

        if (nod(n, m) == 1) v_break();
    }

    TAU = 2*M_PI;

    A = my_rand();

    A = A * TAU / n;

    D = TAU / n * m;

    a: &double := A;

    for (i: &int := 0; i < n; ++i)
    {
        vx = x + r*sin(a);
        vy = y + r*cos(a);

        if (i == 0) cr.move_to(vx, vy);
        else        cr.line_to(vx, vy);

        a += D;
    }

    cr.close_path();


    c0 = my_rand();
    c1 = my_rand();

    a0 = my_rand();     a0 = a0 * a0 * 0.6;
    a1 = my_rand();     a1 = a1 * a1 * 0.6;


    cr.set_source_rgba(c0, c0, c0, a0);

    cr.fill_preserve();

    cr.set_source_rgba(c1, c1, c1, a1);

    cr.stroke();
}

//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    w = 1500;
    h =  500;

    surface = cairo_image_surface_create(CAIRO_FORMAT_RGB24, w, h);
    defer surface.destroy();

    {   cr = cairo_create(surface);
        defer cr.destroy();

        cr.set_source_rgb(0, 0, 0);
        cr.paint();

        cr.set_line_width(1);

        cr.set_fill_rule(1);

        cr.set_operator(CAIRO_OPERATOR_HARD_LIGHT);

        for (i: &int := 0; i < 10000; ++i)
        {
//          random_triangle(cr, w, h);
            random_star(cr, w, h);
        }
    }

    surface.flush();

    surface.write_to_png("try_cairo4_02.png");
}


//---------------------------------------------------------------------
system: (*const char) -> int;


{   system("display try_cairo4_02.png");
}



{ v_import("mainline.void"); }
{ v_enable_mainline(); }

//---------------------------------------------------------------------
printf: (*const char, ...) ~> int;


//---------------------------------------------------------------------
namespace my {

some = v_object_intrinsic("some.thing");

}   //- namespace my

//---------------------------------------------------------------------
some_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);

    v_assert(v_ast_base_get_tag(arg0) == v_ast_expr_identifier_tag);

    name = v_ast_expr_identifier_get_name(arg0);

    sstr: &v_std_string_t := {};

    v_std_string_set(&sstr, "some-");

    v_std_string_append(&sstr, name);

    some_name = v_quark_from_string(v_std_string_get(&sstr));

    ns = (aux: *v_namespace_t);

    if (a = v_map_find(&ns->map, (some_name: intptr_t)))
    {
        q = v_std_any_get_value(v_quark_t, a);

        t: &*v_type_t    := v_undef();
        v: &LLVMValueRef := v_undef();

        v_find_constant_q(q, &t, &v);

        v_set_result_type(t);
        v_set_result_value(v);
    }
    else
    {
        ns = v_obtain_namespace_q(some_name);               //- WTF ?!?!?!?!?

        v_set_result_type(v_find_type("v_static_namespace_t"));
        v_set_result_value((ns: LLVMValueRef));
    }
}

{   v_add_intrinsic("some.thing", some_intrinsic, v_find_constant_value("my")); }


//---------------------------------------------------------------------
namespace my {

namespace some(foo) { v = 1; }
namespace some(bar) { v = 2; }

}   //- namespace my


namespace my.some(baz) { v = 3; }
namespace my.some(qux) { v = 4; }


//---------------------------------------------------------------------
{
//  using namespace my;

    printf("my.some(foo).v: %d\n", my.some(foo).v);
    printf("my.some(bar).v: %d\n", my.some(bar).v);
    printf("my.some(baz).v: %d\n", my.some(baz).v);
    printf("my.some(qux).v: %d\n", my.some(qux).v);


}


//=====================================================================
{
    v_import("llvm-c/Core.void");
}

//---------------------------------------------------------------------
compute_generic_arg: (vis: *voidc_visitor_t, self: *v_ast_base_t) ~> *v_type_generic_arg_t;

//---------------------------------------------------------------------
compute_generic_arg_cons: (vis: *voidc_visitor_t, args: *v_ast_expr_list_t,
                           res: **v_type_generic_arg_t
                          ) ~> v_quark_t
{
    s = v_list_get_item(args, 0);

    q: &v_quark_t := v_undef();

    if (v_ast_base_get_tag(s) == v_ast_expr_identifier_tag)
    {
        q := v_ast_expr_identifier_get_name_q(s);
    }
    else
    {
        v_assert(v_ast_base_get_tag(s) == v_ast_expr_string_tag);

        q := v_quark_from_string(v_ast_expr_string_get_string(s));
    }

    if (n = v_list_get_size(args) - 1)
    {
        for (i: &int := 0; i < n; ++i)
        {
            res[i] := compute_generic_arg(vis, v_list_get_item(args, i+1));
        }
    }

    v_return(q);
}

//---------------------------------------------------------------------
compute_generic_arg: (vis: *voidc_visitor_t, self: *v_ast_base_t) ~> *v_type_generic_arg_t
{
    call = (self: *v_ast_expr_t);

    fexpr = v_ast_expr_call_get_fun_expr(call);

    v_assert(v_ast_base_get_tag(fexpr) == v_ast_expr_identifier_tag);

    args = v_ast_expr_call_get_arg_list(call);

    switch((v_ast_expr_identifier_get_name(fexpr)[0] | 0x20 : char32_t))
    {
    case 'n':       //- Number

        v_set_result_type(v_uint_type(64));
        v_set_result_value(0);

        v_ast_accept_visitor(v_list_get_item(args, 0), vis);

        n = v_get_result_value();

        n = LLVMConstIntGetZExtValue(n);

        v_return(v_type_generic_number_arg(n));

    case 's':       //- String

        v_set_result_type(INVIOLABLE_TAG);          //- ?
        v_set_result_value(0);

        v_ast_accept_visitor(v_list_get_item(args, 0), vis);

        l: &size_t := v_undef();

        s = LLVMGetAsString(v_get_result_value(), &l);

        {   sstr: &v_std_string_t := {};

            v_std_string_set_data(&sstr, s, l-1);       //- ?

            v_return(v_type_generic_string_arg(&sstr));
        }

    case 'q':       //- Quark

        s = v_list_get_item(args, 0);

        if (v_ast_base_get_tag(s) == v_ast_expr_identifier_tag)
        {
            q = v_ast_expr_identifier_get_name_q(s);

            v_return(v_type_generic_quark_arg(q));
        }

        v_assert(v_ast_base_get_tag(s) == v_ast_expr_string_tag);

        q = v_quark_from_string(v_ast_expr_string_get_string(s));

        v_return(v_type_generic_quark_arg(q));

    case 't':       //- Type

        v_set_result_type(v_find_type("v_static_type_t"));
        v_set_result_value(0);

        v_ast_accept_visitor(v_list_get_item(args, 0), vis);

        t = (v_get_result_value() : *v_type_t);

        v_return(v_type_generic_type_arg(t));

    case 'c':       //- Cons

        {   aa: &**v_type_generic_arg_t := 0;
            defer delete[] aa;

            n = v_list_get_size(args) - 1;

            if (n)  aa := new (*v_type_generic_arg_t)[n];

            q = compute_generic_arg_cons(vis, args, aa);

            v_return(v_type_generic_cons_arg(q, aa, (n: unsigned)));
        }
    }

    v_assert(false);
}

//---------------------------------------------------------------------
v_generic_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    call = (self: *v_ast_expr_t);

    args = v_ast_expr_call_get_arg_list(call);

    aa: &**v_type_generic_arg_t := 0;
    defer if (aa) delete[] aa;

    n = v_list_get_size(args) - 1;

    if (n)  aa := new (*v_type_generic_arg_t)[n];

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    q = compute_generic_arg_cons(vis, args, aa);

    t = v_generic_type(q, aa, (n: unsigned));

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(v_find_type("v_static_type_t"), (t: LLVMValueRef));
}

//---------------------------------------------------------------------
v_generic_ns_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("v_generic_ns_intrinsic: start\n");
//defer printf("v_generic_ns_intrinsic: stop\n");

    call = (self: *v_ast_expr_t);

    args = v_ast_expr_call_get_arg_list(call);

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    static_namespace_t = v_find_type("v_static_namespace_t");

    v_set_result_type(static_namespace_t);
    v_set_result_value(0);

    v_ast_accept_visitor(v_list_get_item(args, 0), vis);        //- Namespace

    ns = (v_get_result_value() : *v_namespace_t);

    ga = compute_generic_arg(vis, v_list_get_item(args, 1));

    sstr: &v_std_string_t := {};

    v_std_string_set(&sstr, "v.generic_ns-");

    voidc_internal_std_string_append_type_generic_arg(&sstr, ga);

    ns_name = v_quark_from_string(v_std_string_get(&sstr));

    t: &*v_type_t    := 0;
    v: &LLVMValueRef := v_undef();

    root_ns = ((-1: intptr_t) : *v_namespace_t);        //- Sic!

    if (ns  &&  ns != root_ns)      //- Just some "normal" namespace...
    {
        if (a = v_map_find(&ns->map, (ns_name: intptr_t)))
        {
            q = v_std_any_get_value(v_quark_t, a);

            v_find_constant_q(q, &t, &v);
        }
    }

    if (!t)
    {
        ns = v_obtain_namespace_q(ns_name);                 //- WTF ?!?!?!?!?

        t := static_namespace_t;
        v := (ns: LLVMValueRef);
    }

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
v_root_ns_intrinsic: (*void, vis: *voidc_visitor_t, *v_ast_base_t) ~> void
{
    v_adopt_result(v_find_type("v_static_namespace_t"), ((-1: intptr_t) : LLVMValueRef));
}

//---------------------------------------------------------------------
{
    v_add_intrinsic("v_generic",    v_generic_intrinsic,    0);
    v_add_intrinsic("v_generic_ns", v_generic_ns_intrinsic, 0);
    v_add_intrinsic("v_root_ns",    v_root_ns_intrinsic,    0);
}

//---------------------------------------------------------------------
//t = v_generic(qwe);

t = v_generic(qwe, n(999), s("asd"), q(zxc), t(int), c(wsx, n(7)));

{
    sstr: &v_std_string_t := {};

    voidc_internal_std_string_append_type(&sstr, t);

    printf("t: %s\n", v_std_string_get(&sstr));

}

//---------------------------------------------------------------------
namespace my {

#define qwe_ns: (T: v_static_type_t) ~> v_static_namespace_t  =  v_generic_ns(.my, c(qwe, t(T)));

namespace qwe_ns(int) {

a = 777;


}   //- qwe_ns(int)

}   //- my


{
    a = my.qwe_ns(int).a;

    printf("a: %d\n", a);
}


//---------------------------------------------------------------------
#define asd_ns: (T: v_static_type_t) ~> v_static_namespace_t  =  v_generic_ns(v_root_ns(), c(asd, t(T)));

namespace asd_ns(int) {

b = 888;
c = 111;

}   //- asd_ns(int)

{
    b = asd_ns(int).b;
    c = asd_ns(int).c;

    printf("b+c: %d\n", b+c);
}


//---------------------------------------------------------------------
//- List ...
//---------------------------------------------------------------------
namespace my {

#define list: (T: v_static_type_t) ~> v_static_type_t  =  v_generic(list, t(T));


//---------------------------------------------------------------------
list_op_braces_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                           arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                          ) ~> void
{
//printf("list_op_braces_intrinsic: start\n");
//defer printf("list_op_braces_intrinsic: stop\n");

    tr: &*v_type_t := v_get_result_type();

    is_reference = v_type_is_reference(tr);

    addr_sp: &unsigned := v_undef();

    if (is_reference)
    {
        addr_sp := v_type_refptr_get_address_space(tr);         //- Sic!
        tr      := v_type_refptr_get_element_type(tr);          //- Sic!
    }

    vr = v_obtain_special_result_value(vis, tr);

    list: &v_ast_stmt_list_t := {};

    {   ast = {'stmt'  my_any: &v_std_any_t := {};  'stmt'};

        v_make_list(&list, (&ast: *v_ast_stmt_t));
    }

    {   ast =
        {'stmt'

            #define my_step: (lst, v)
            {'stmt_list'

                v_std_any_set_value(&my_any, v);

                v_list_append(lst, lst, &my_any);

            'stmt_list'}

        'stmt'};

        v_list_append(&list, &list, (&ast: *v_ast_stmt_t));
    }

    expr: &v_ast_expr_t[4] := {};

    v_ast_make_expr_compiled(expr+0, v_pointer_type(v_util_list_t, 0), vr);

    stmt: &v_ast_stmt_t := {};

    my_step_q = v_quark_from_string("my_step");

    v_ast_make_expr_compiled(expr+2, v_find_type("v_static_type_t"), (aux: LLVMValueRef));      //- Sic !!!

    v_ast_make_expr_identifier(expr+3, "v_typed");

    elst: &v_ast_expr_list_t := {};

    for (i: &int := 0; i < arg_count; ++i)
    {
        v_make_list(&elst, expr+2);

        v_list_append(&elst, &elst, arg_ptrs[i]);

        v_ast_make_expr_call(expr+1, expr+3, &elst);

        v_ast_make_stmt_call(&stmt, 0, my_step_q, expr, 2);

        v_list_append(&list, &list, &stmt);
    }

    v_ast_make_stmt_block(&stmt, &list, false);

    v_ast_accept_visitor(&stmt, vis);

    if (is_reference) v_set_result_type(v_reference_type(tr, addr_sp));
    else              v_set_result_type(tr);

    v_set_result_value(vr);
}

//---------------------------------------------------------------------
register_list_op_braces_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);        //- Element type
    arg1 = v_list_get_item(args, 1);        //- List type

    static_type_t = v_find_type("v_static_type_t");

    v_set_result_type(static_type_t);
    v_set_result_value(0);

    v_ast_accept_visitor(arg0, vis);

    elt = (v_get_result_value() : *v_type_t);

    v_set_result_type(static_type_t);
    v_set_result_value(0);

    v_ast_accept_visitor(arg1, vis);

    lst = (v_get_result_value() : *v_type_t);

    sstr: &v_std_string_t := {};

    v_std_string_set(&sstr, "my.list_op_braces-");

    voidc_internal_std_string_append_type(&sstr, elt);

    iname = v_std_string_get(&sstr);

    v_add_overload("v.op_braces", lst, iname);

    v_add_intrinsic(iname, list_op_braces_intrinsic, elt);      //- Sic!
}

//---------------------------------------------------------------------
#define instantiate_list: (T)
{'unit_defn_list'

  namespace my
  {
    #do (v_set_implementation_type(list(T), v_util_list_t))

    private
    namespace v_generic_ns(.my, c(list_detail, t(T)))       //- ???
    {
        impl_t = v_get_implementation_type(list(T));

        alwaysinline
        (_.impl): (s: &list(T)) ~> &impl_t  =  *(&s : *impl_t);
    }

    //-------------------------------------------------------------
    inlinehint
    (v_initialize(_)): (sp: *list(T), N: size_t) ~> void
    {
        for (i: &int := 0; i < N; ++i)
        {
            lst = &sp[i].impl;

            v_initialize(lst);

            v_make_list_nil(lst);
        }
    }

    alwaysinline
    (v_terminate(_)): (sp: *list(T), N: size_t) ~> void
    {
        v_terminate(&sp->impl, N);
    }

    alwaysinline
    (v_copy(_)): (dst: *list(T), src: *const list(T), N: size_t) ~> void
    {
        v_copy(&dst->impl, &src->impl, N);
    }

    #do (register_list_op_braces(T, list(T)))

    //-------------------------------------------------------------
    inlinehint
    (_[]): (sp: list(T), i: size_t) ~> T
    {
        a = v_list_get_item(&(&sp)->impl, i);
        v_assert(a);

        v_return(v_std_any_get_value(T, a));
    }

    inlinehint
    (_<<_): (sp: list(T), v: T) ~> list(T)
    {
        a: &v_std_any_t := {};

        v_std_any_set_value(&a, v);

        v_list_append(&v_get_return_value().impl, &sp.impl, &a);
    }

    inlinehint
    (_<<_): (sp: &list(T), v: T) ~> &list(T)  =
    {
        a: &v_std_any_t := {};

        v_std_any_set_value(&a, v);

        lst = &sp.impl;

        v_list_append(lst, lst, &a);

        sp
    };

    alwaysinline
    (_.size): (sp: list(T)) ~> size_t  =  v_list_get_size(&(&sp)->impl);

  }   //- namespace my

'unit_defn_list'}


//---------------------------------------------------------------------
{
    v_add_intrinsic("register_list_op_braces", register_list_op_braces_intrinsic, 0);
}


//---------------------------------------------------------------------
}   //- my



//---------------------------------------------------------------------
#do (my.instantiate_list(int),
     my.instantiate_list(long))

//---------------------------------------------------------------------
{
    l: &my.list(int) := {};

    l << 5
      << 6
      << 7
      << 8
      << 9;

    for (i: &int := 0, n = l.size; i < n; ++i)
    {
        printf("l[%d]: %d\n", i, l[i]);
    }

    l0: my.list(int) = {};

    l1 = l0 << 55;

    l2 = l1 << 66 << 77;

    l3 = l2 << 88 << 99;

    ll: &my.list(int)[4] := { l0, l1, l2, l3 };

    for (i: &int := 0; i < 4; ++i)
    {
        for (j: &int := 0, n = ll[i].size; j < n; ++j)
        {
            printf("ll[%d][%d]: %d\n", i, j, ll[i][j]);
        }
    }


    l.impl;     //- WTF !?!?!?!?!?!?!
}

//---------------------------------------------------------------------
#define instantiate_list_plus: (T)
{'unit_defn_list'

    (_+_): (a: my.list(T), b: my.list(T)) ~> my.list(T)
    {
        r = v_get_return_value();

        v_copy(&r, &a);         //- ... aliasing?

        for (i: &int := 0, n = b.size; i < n; ++i)
        {
            r << b[i];
        }
    }

'unit_defn_list'}


#do (instantiate_list_plus(long))


//{ voidc_verify_jit_module_optimized(true); }
//{ v_debug_print_module(2); }
//---------------------------------------------------------------------
{
    a: my.list(long) = { 9, 8, 7, 6, 5 };
    b: my.list(long) = { 4, 3 };

    l = a + b +  { 2, 1, 0 };

    for (i: &int := 0, n = l.size; i < n; ++i)
    {
        printf("l[%d]: %ld\n", i, l[i]);
    }
}



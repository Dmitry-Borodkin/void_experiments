{ v_import("mainline.void"); }
{ v_enable_mainline(); }

//---------------------------------------------------------------------
printf: (*const char, ...) ~> int;


//---------------------------------------------------------------------
namespace my {

some = v_object_intrinsic("some.thing");

}   //- namespace my

//---------------------------------------------------------------------
some_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);

    v_assert(v_ast_base_get_tag(arg0) == v_ast_expr_identifier_tag);

    name = v_ast_expr_identifier_get_name(arg0);

    sstr: &v_std_string_t := {};

    v_std_string_set(&sstr, "some-");

    v_std_string_append(&sstr, name);

    some_name = v_quark_from_string(v_std_string_get(&sstr));

    ns = (aux: *v_namespace_t);

    if (a = v_map_find(&ns->map, (some_name: intptr_t)))
    {
        q = v_std_any_get_value(v_quark_t, a);

        t: &*v_type_t    := v_undef();
        v: &LLVMValueRef := v_undef();

        v_find_constant_q(q, &t, &v);

        v_set_result_type(t);
        v_set_result_value(v);
    }
    else
    {
        ns = v_obtain_namespace_q(some_name);               //- WTF ?!?!?!?!?

        v_set_result_type(v_find_type("v_static_namespace_t"));
        v_set_result_value((ns: LLVMValueRef));
    }
}

{   v_add_intrinsic("some.thing", some_intrinsic, v_find_constant_value("my")); }


//---------------------------------------------------------------------
namespace my {

namespace some(foo) { v = 1; }
namespace some(bar) { v = 2; }

}   //- namespace my


namespace my.some(baz) { v = 3; }
namespace my.some(qux) { v = 4; }


//---------------------------------------------------------------------
{
//  using namespace my;

    printf("my.some(foo).v: %d\n", my.some(foo).v);
    printf("my.some(bar).v: %d\n", my.some(bar).v);
    printf("my.some(baz).v: %d\n", my.some(baz).v);
    printf("my.some(qux).v: %d\n", my.some(qux).v);


}


//=====================================================================
{
    v_import("llvm-c/Core.void");
}

//---------------------------------------------------------------------
compute_generic_arg: (vis: *voidc_visitor_t, self: *v_ast_base_t) ~> *v_type_generic_arg_t
{
    call = (self: *v_ast_expr_t);

    fexpr = v_ast_expr_call_get_fun_expr(call);

    v_assert(v_ast_base_get_tag(fexpr) == v_ast_expr_identifier_tag);

    args = v_ast_expr_call_get_arg_list(call);

    switch((v_ast_expr_identifier_get_name(fexpr)[0] | 0x20 : char32_t))
    {
    case 'n':       //- Number

        v_set_result_type(v_uint_type(64));
        v_set_result_value(0);

        v_ast_accept_visitor(v_list_get_item(args, 0), vis);

        n = v_get_result_value();

        n = LLVMConstIntGetZExtValue(n);

        v_return(v_type_generic_number_arg(n));

    case 's':       //- String

        v_set_result_type(INVIOLABLE_TAG);          //- ?
        v_set_result_value(0);

        v_ast_accept_visitor(v_list_get_item(args, 0), vis);

        l: &size_t := v_undef();

        s = LLVMGetAsString(v_get_result_value(), &l);

        {   sstr: &v_std_string_t := {};

            v_std_string_set_data(&sstr, s, l-1);       //- ?

            v_return(v_type_generic_string_arg(&sstr));
        }

    case 'q':       //- Quark

        s = v_list_get_item(args, 0);

        if (v_ast_base_get_tag(s) == v_ast_expr_identifier_tag)
        {
            q = v_ast_expr_identifier_get_name_q(s);

            v_return(v_type_generic_quark_arg(q));
        }

        v_assert(v_ast_base_get_tag(s) == v_ast_expr_string_tag);

        q = v_quark_from_string(v_ast_expr_string_get_string(s));

        v_return(v_type_generic_quark_arg(q));

    case 't':       //- Type

        v_set_result_type(v_find_type("v_static_type_t"));
        v_set_result_value(0);

        v_ast_accept_visitor(v_list_get_item(args, 0), vis);

        t = (v_get_result_value() : *v_type_t);

        v_return(v_type_generic_type_arg(t));

    case 'c':       //- Cons

        s = v_list_get_item(args, 0);

        q: &v_quark_t := v_undef();

        if (v_ast_base_get_tag(s) == v_ast_expr_identifier_tag)
        {
            q := v_ast_expr_identifier_get_name_q(s);
        }
        else
        {
            v_assert(v_ast_base_get_tag(s) == v_ast_expr_string_tag);

            q := v_quark_from_string(v_ast_expr_string_get_string(s));
        }

        if (n = v_list_get_size(args) - 1)
        {
            aa = new (*v_type_generic_arg_t)[n];
            defer delete[] aa;

            for (i: &int := 0; i < n; ++i)
            {
                aa[i] := compute_generic_arg(vis, v_list_get_item(args, i+1));
            }

            v_return(v_type_generic_cons_arg(q, aa, (n: unsigned)));
        }
        else
        {
            v_return(v_type_generic_cons_arg(q, 0, 0));
        }
    }

    v_assert(false);
}

//---------------------------------------------------------------------
v_generic_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    call = (self: *v_ast_expr_t);

    args = v_ast_expr_call_get_arg_list(call);

    s = v_list_get_item(args, 0);

    q: &v_quark_t := v_undef();

    if (v_ast_base_get_tag(s) == v_ast_expr_identifier_tag)
    {
        q := v_ast_expr_identifier_get_name_q(s);
    }
    else
    {
        v_assert(v_ast_base_get_tag(s) == v_ast_expr_string_tag);

        q := v_quark_from_string(v_ast_expr_string_get_string(s));
    }

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    t: &*v_type_t := v_undef();

    if (n = v_list_get_size(args) - 1)
    {
        aa = new (*v_type_generic_arg_t)[n];
        defer delete[] aa;

        for (i: &int := 0; i < n; ++i)
        {
            aa[i] := compute_generic_arg(vis, v_list_get_item(args, i+1));
        }

        t := v_generic_type(q, aa, (n: unsigned));
    }
    else
    {
        t := v_generic_type(q, 0, 0);
    }

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(v_find_type("v_static_type_t"), (t: LLVMValueRef));
}

//---------------------------------------------------------------------
{
    v_add_intrinsic("v_generic", v_generic_intrinsic, 0);
}

//---------------------------------------------------------------------
t = v_generic(qwe, n(999), s("asd"), q(zxc), t(int), c(wsx, n(7)));

{
    sstr: &v_std_string_t := {};

    voidc_internal_std_string_append_type(&sstr, t);

    printf("t: %s\n", v_std_string_get(&sstr));







}








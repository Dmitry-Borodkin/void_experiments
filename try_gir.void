{   v_import("mainline.void");

    v_import("llvm-c/Support.void");
}
{   v_enable_mainline(); }

//---------------------------------------------------------------------
printf: (*const char, ...) ~> int;


//---------------------------------------------------------------------
{
    libname = "libgirepository-1.0.so";
//  libname = "libgirepository-2.0.so";         //- ?

    ok = LLVMLoadLibraryPermanently(libname);

    printf("ok: %d\n", ok);
}


//---------------------------------------------------------------------
//- <girepository/girepository.h>   ???


//---------------------------------------------------------------------
//- <gobject-introspection-1.0/girepository.h>
//---------------------------------------------------------------------
struct GIRepository;
struct GITypelib;
struct GIBaseInfo;


struct GIAttributeIter { intptr_t[4]; };        //- Sic!


struct GObject;
struct GError;


//---------------------------------------------------------------------
g_irepository_get_default: () ~> *GIRepository;

g_irepository_require: (*GIRepository, *const char, *const char, int, **GError) ~> *GITypelib;

g_typelib_free: (*GITypelib) ~> void;


g_irepository_get_n_infos: (*GIRepository, *const char) ~> int;

g_irepository_get_info: (*GIRepository, *const char, int) ~> *GIBaseInfo;

g_irepository_get_c_prefix: (*GIRepository, *const char) ~> *const char;


g_base_info_unref: (*GIBaseInfo) ~> void;

g_base_info_get_name: (*GIBaseInfo) ~> *const char;

g_base_info_get_type: (*GIBaseInfo) ~> int;

g_info_type_to_string: (int) ~> *const char;


g_base_info_iterate_attributes: (*GIBaseInfo, *GIAttributeIter, **const char, **const char) ~> bool;


g_function_info_get_symbol: (*GIBaseInfo) ~> *const char;

g_callable_info_get_n_args: (*GIBaseInfo) ~> unsigned;

g_callable_info_get_arg: (*GIBaseInfo, unsigned) ~> *GIBaseInfo;

g_callable_info_get_return_type: (*GIBaseInfo) ~> *GIBaseInfo;


g_arg_info_get_type: (*GIBaseInfo) ~> *GIBaseInfo;

g_type_info_get_tag: (*GIBaseInfo) ~> int;

g_type_tag_to_string: (int) ~> *const char;



//---------------------------------------------------------------------
g_object_unref: (*GObject) ~> void;



//---------------------------------------------------------------------
{
    gir = g_irepository_get_default();

    printf("gir: %p\n", gir);

    err: &*GError := 0;

//    gt_name    = "Gtk";
//    gt_version = "3.0";

    gt_name    = "GIRepository";
    gt_version = 0; // "2.0";

//    gt_name    = "GObject";
//    gt_version = 0; // "2.0";

//    gt_name    = "cairo";
//    gt_version = 0;

    gt = g_irepository_require(gir, gt_name, gt_version, 0, &err);
    defer g_typelib_free(gt);

    p = g_irepository_get_c_prefix(gir, gt_name);

    printf("gt: %p %s\n", gt, p);

    N = g_irepository_get_n_infos(gir, gt_name);

    printf("N: %d\n", N);

    for (i: &int := 0; i < N; ++i)
    {
        bi = g_irepository_get_info(gir, gt_name, i);
        defer g_base_info_unref(bi);

        s = g_base_info_get_name(bi);

        t = g_base_info_get_type(bi);

        ts = g_info_type_to_string(t);

        printf("%9s %2d %s\n", ts, t, s);

        if (t == 1)
        {
            s = g_function_info_get_symbol(bi);

            n = g_callable_info_get_n_args(bi);

            printf("   symbol: %s %u\n", s, n);

            for (j: &int := 0; j < n; ++j)
            {
                a = g_callable_info_get_arg(bi, j);     defer g_base_info_unref(a);
                t = g_arg_info_get_type(a);             defer g_base_info_unref(t);

                t  = g_type_info_get_tag(t);
                ts = g_type_tag_to_string(t);

                printf("      arg: %d %s\n", j, ts);
            }

            r = g_callable_info_get_return_type(bi);    defer g_base_info_unref(r);

            t  = g_type_info_get_tag(r);
            ts = g_type_tag_to_string(t);

            printf("      ret: %s\n", ts);
        }

        it: &GIAttributeIter := 0;

        name:  &*const char := v_undef();
        value: &*const char := v_undef();

        while(g_base_info_iterate_attributes(bi, &it, &name, &value))
        {
            printf("  %s = %s\n", name, value);
        }



    }

}






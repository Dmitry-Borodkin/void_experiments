{ v_import("mainline.void"); }
{ v_enable_mainline(); }

//---------------------------------------------------------------------
printf: (*const char, ...) ~> int;


//---------------------------------------------------------------------
struct string_t
{
    _data: *char;
    _size: size_t;

    union
    {
        local: char[16];

        capacity: size_t;
    };
};


//---------------------------------------------------------------------
//{   v_debug_print_module(2);
//
//    voidc_verify_jit_module_optimized(true);
//}

//---------------------------------------------------------------------
alwaysinline
(_.is_long): (self: &const string_t) ~> bool  =  self._data != self[2].local;


//---------------------------------------------------------------------
strlen: (*const char) ~> size_t;

memcpy: (*void, *const void, size_t) ~> *void;
memset: (*void, int, size_t) ~> *void;

realloc: (*void, size_t) ~> *void;


//---------------------------------------------------------------------
inlinehint
(v_initialize(_)): (dst: *string_t, count: size_t) ~> void
{
    for (i: &size_t := 0; i < count; ++i)
    {
        di = dst[i];

        di._data := di[2].local;
        di._size := 0;
        di[2].local[0] := 0;
    }
}

inlinehint
(v_terminate(_)): (dst: *string_t, count: size_t) ~> void
{
    for (i: &size_t := 0; i < count; ++i)
    {
        di = dst[i];

        if (di.is_long) v_free(di._data);
    }
}

inlinehint
(v_copy(_)): (dst: *string_t, src: *const string_t, count: size_t) ~> void
{
    for (i: &size_t := 0; i < count; ++i)
    {
        di = dst[i];
        si = src[i];

        if (di.is_long) v_free(di._data);

        sz = si._size;

        di._size := sz;

        sz1 = sz + 1;

        if (si.is_long)
        {
            csz = (sz1 + 15) & ~15;

            di._data := v_malloc(char, csz);

            di[2].capacity := csz - 1;
        }
        else
        {
            di._data := di[2].local;
        }

        memcpy(di._data, si._data, sz1);
    }
}

inlinehint
(v_move(_)): (dst: *string_t, src: *string_t, count: size_t) ~> void
{
    for (i: &size_t := 0; i < count; ++i)
    {
        di = dst[i];
        si = src[i];

        if (di.is_long) v_free(di._data);

        sz = si._size;

        di._size := sz;

        if (si.is_long)
        {
            di._data := si._data;

            di[2].capacity := si[2].capacity;

            si._data := si[2].local;
        }
        else
        {
            di._data := di[2].local;

            memcpy(di._data, si._data, sz+1);
        }

        si._size := 0;
        si[2].local[0] := 0;
    }
}


//---------------------------------------------------------------------
alwaysinline
(_.data): (str: string_t) ~> *char  =  str._data;

alwaysinline
(_.size): (str: string_t) ~> size_t  =  str._size;

inlinehint
(_.capacity): (str: string_t) ~> size_t
{
    if (str.is_long)  v_return(str[2].capacity);
    else              v_return(15);
}


//---------------------------------------------------------------------
inlinehint
(_.set_data()): (str: &string_t, s: *const char, len: size_t) ~> void
{
    if (len > str.capacity)
    {
        if (str.is_long) v_free(str._data);

        csz = (len + (1+15)) & ~15;

        str._data := v_malloc(char, csz);
        str[2].capacity := csz - 1;
    }

    memcpy(str._data, s, len);

    str._data[len] := 0;

    str._size := len;
}

inlinehint
(_.set()): (str: &string_t, s: *const char) ~> void
{
    str.set_data(s, strlen(s));
}

inlinehint
(_.append_data()): (str: &string_t, s: *const char, len: size_t) ~> void
{
    if (len == 0) v_return();

    sz = str._size;

    sz_len = sz + len;

    if (sz_len > str.capacity)
    {
        csz = (sz_len + (1+15)) & ~15;

        if (str.is_long)
        {
            str._data := (realloc(str._data, csz) : *char);
        }
        else
        {
            d = v_malloc(char, csz);

            memcpy(d, str._data, sz);

            str._data := d;
        }

        str[2].capacity := csz - 1;
    }

    memcpy(str._data+sz, s, len);

    str._data[sz_len] := 0;

    str._size := sz_len;
}

inlinehint
(_.append()): (str: &string_t, s: *const char) ~> void
{
    str.append_data(s, strlen(s));
}

inlinehint
(_.append_char()): (str: &string_t, c: char32_t) ~> void
{
    r: &int := v_undef();

    if (c <= 0x7FF)
    {
        if (c <= 0x7F)  r := 0;
        else            r := 1;
    }
    else
    {
        if (c <= 0xFFFF)  r := 2;
        else              r := 3;
    }

    d = v_alloca(char, r+1);

    if (r == 0)
    {
        d[0] := (c & 0x7F : char);
    }
    else
    {
        c: &char32_t := c;

        for (j: &int := 0; j < r; ++j)
        {
            d[r-j] := (0x80 | (c & 0x3F) : char);

            c >>= 6;
        }

        d[0] := ((0x1E << (6-r)) | (c & (0x3F >> r)) : char);
    }

    str.append_data(d, r+1);
}

inlinehint
(_.append_number()): (str: &string_t, n: intptr_t) ~> void
{
    buf: &char[24] := v_undef();

    sprintf: (*char, *const char, ...) ~> int;

    len = sprintf(buf, "%zd", n);

    str.append_data(buf, len);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
alwaysinline
my_adopt_to_string: (s: *const char) ~> string_t
{
    ret = v_get_return_value();

    ret.set(s);
}

//---------------------------------------------------------------------
my_try_to_adopt_ctx_t = struct
{
    fun: *((*void, *v_type_t, LLVMValueRef) ~> bool);
    aux: *void;
};

my_try_to_adopt: (aux: *void, t0: *v_type_t, v0: LLVMValueRef) ~> bool
{
    string_type = v_find_type("string_t");
    char_type = v_int_type(8);

    t1 = v_get_result_type();

    if ((INVIOLABLE_TAG != t1 != UNREFERENCE_TAG
        )  &&
        (t1 == string_type  ||
         v_type_is_reference(t1)  &&  v_type_refptr_get_element_type(t1) == string_type
        )  &&
        ((v_type_is_pointer(t0)  &&  v_type_refptr_get_element_type(t0) == char_type)  ||
         (v_type_is_array(t0)  &&  v_type_array_get_element_type(t0) == char_type)
        )
       )
    {
        expr: &v_ast_expr_t      := {};
        list: &v_ast_expr_list_t := {};

        v_ast_make_expr_compiled(&expr, t0, v0);

        v_make_list(&list, &expr);

        v_ast_make_expr_identifier(&expr, "my_adopt_to_string");

        v_ast_make_expr_call(&expr, &expr, &list);

        v_ast_accept_visitor(&expr, v_get_compiler());

        v_return(true);
    }

    ctx = *(aux: *my_try_to_adopt_ctx_t);

    v_return(ctx.fun(ctx.aux, t0, v0));
}

my_try_to_adopt_ctx: &my_try_to_adopt_ctx_t := {};

{   my_try_to_adopt_ctx.fun := v_get_try_to_adopt_hook(&my_try_to_adopt_ctx.aux);

    v_set_try_to_adopt_hook(my_try_to_adopt, &my_try_to_adopt_ctx);
}


//---------------------------------------------------------------------
pr_string: (s: string_t) ~> void
{
    printf("d: %s, s: %zd, c: %zd\n", s.data, s.size, s.capacity);
}


//---------------------------------------------------------------------
alwaysinline
(_:=_): (str: &string_t, val: string_t) ~> &string_t
{
    v_copy(&str, &val);

    v_return(str);
}


//---------------------------------------------------------------------
//{   v_debug_print_module(2);
//
//    voidc_verify_jit_module_optimized(true);
//}
{
    s: &string_t := "qwerty____0";

    pr_string(s);

    s.set("qwerty_________1");

    pr_string(s);

    s := "qwerty_______________________________________________________________________________________2";

    pr_string(s);

    s := "qwerty___________________3";

    pr_string(s);

    s.set("qwerty_____4");

    pr_string(s);

    s.append("asdfgh_____5");

    pr_string(s);

    s.append_char('_');
    s.append_char('Ð«');

    pr_string(s);

    s.append_char('_');
    s.append_number((-1 : size_t) >> 1);

    pr_string(s);
}


//---------------------------------------------------------------------
//{   v_debug_print_module(2);
//
//    voidc_verify_jit_module_optimized(true);
//}
{   s: &string_t[2] := { "1", "0" };

    pr_string(s[1]);

    for (i: &int := 0; i < 9; ++i)
    {
        t: &string_t := s[1];

        t.append_data(s[0].data, s[0].size);

        s[0] := s[1];
        s[1] := t;

        pr_string(t);
    }
}







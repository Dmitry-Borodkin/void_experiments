{   v_import("mainline.void");

    v_import("llvm-c/Core.void");
}
{   v_enable_mainline(); }

//---------------------------------------------------------------------
printf: (*const char, ...) ~> int;


//---------------------------------------------------------------------
qf_export  = voidc_definitions_internal_qf_export;      //- 1 << 0
qf_private = voidc_definitions_internal_qf_private;     //- 1 << 1


//---------------------------------------------------------------------
{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("unit_defn_list_q", q_ref, q("unit_defn_list"));
    v_add_symbol("stmt_list_q",      q_ref, q("stmt_list"));

    v_add_symbol("macro_defn_q",      q_ref, q("macro_defn"));
    v_add_symbol("macro_spec_defn_q", q_ref, q("macro_spec_defn"));
    v_add_symbol("macro_params_q",    q_ref, q("macro_params"));

    v_add_symbol("expr_identifier_q", q_ref, q("expr_identifier"));

    v_add_symbol("q_initialize", q_ref, q("v_initialize"));
}


//---------------------------------------------------------------------
//- Grammar actions ...
//---------------------------------------------------------------------
my_br_item_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, count: size_t) ~> void
{
    list: &v_ast_expr_list_t := {};

    v_make_list_nil(&list);

    etmp: &v_ast_expr_t := {};

    for (i: &int := 0; i < count; ++i)
    {
        expr = v_std_any_get_pointer(v_ast_expr_t, any+i);

        if (expr)   v_list_append(&list, &list,  expr);
        else        v_list_append(&list, &list, &etmp);
    }

    v_std_any_set_pointer(ret, &list);
}

//---------------------------------------------------------------------
mk_macro_hdr_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    q_id = v_std_any_get_pointer(v_ast_generic_list_t, any+0);

    args = v_std_any_get_pointer(v_ast_expr_t, any+1);
    type = v_std_any_get_pointer(v_ast_expr_t, any+2);

    ast: &v_ast_base_t[4] := {};

    v_copy(ast+0, v_list_get_item(q_id, 0));
    v_copy(ast+1, v_list_get_item(q_id, 1));

    v_copy(ast+2, args);

    if (type) v_copy(ast+3, type);

    quark: &v_quark_t := v_undef();

    if (v_ast_base_get_tag(q_id) == 0)  quark := macro_defn_q;
    else                                quark := macro_spec_defn_q;

    list: &v_ast_generic_list_t := {};

    v_make_list(&list, quark, ast, 4);

    v_std_any_set_pointer(ret, &list);
}

//---------------------------------------------------------------------
mk_macro_stmt_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    hdr  = v_std_any_get_pointer(v_ast_generic_list_t, any+0);

    body = v_ast_std_any_get_base(any+1);

    list: &v_ast_generic_list_t := {};

    v_list_append(&list, hdr, body);

    v_std_any_set_pointer(ret, &list);
}

//---------------------------------------------------------------------
mk_macro_define_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    glst = v_std_any_get_pointer(v_ast_generic_list_t, any+0);

    kind = v_std_any_get_value(intptr_t, any+1);

    expr: &v_ast_expr_t := {};

    v_ast_make_expr_integer(&expr, kind);

    list: &v_ast_generic_list_t := {};

    v_list_append(&list, glst, &expr);

    if (kind) v_std_any_set_pointer(ret, (&list : *v_ast_stmt_t));      //- stmt
    else      v_std_any_set_pointer(ret, (&list : *v_ast_base_t));      //- unit_defn
}


//---------------------------------------------------------------------
macro_defn_ctx_t = struct
{
    pars: v_ast_generic_list_t;     //- Parameters ...
    type: v_ast_expr_t;             //- Return type (if any) ...

    body: v_ast_base_t;             //- As is ...
};

(v_initialize(_)): (*macro_defn_ctx_t, size_t) ~> void  =  derive;
(v_terminate(_)):  (*macro_defn_ctx_t, size_t) ~> void  =  derive;

macro_defn_ctx_cleaner: (void_ctx: *void) ~> void
{
    delete  (void_ctx: *macro_defn_ctx_t);
}

//---------------------------------------------------------------------
macro_expr_identifier_ctx_t = struct
{
    fun: *((*void, *voidc_visitor_t, *v_ast_base_t) ~> void);
    aux: *void;

    map: v_util_map_t;
};

(v_initialize(_)): (*macro_expr_identifier_ctx_t, size_t) ~> void  =  derive;
(v_terminate(_)):  (*macro_expr_identifier_ctx_t, size_t) ~> void  =  derive;

//private
macro_compile_expr_identifier: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("macro_compile_expr_identifier start\n");
//defer printf("macro_compile_expr_identifier stop\n");

    bind = *(aux: *macro_expr_identifier_ctx_t);

    qname = v_ast_expr_identifier_get_name_q((self: *v_ast_expr_t));

    if (a = v_map_find(&bind.map, (qname: intptr_t)))
    {
        expr = v_std_any_get_pointer(v_ast_expr_t, a);

        v_ast_accept_visitor(expr, vis);

        v_return();
    }

    bind.fun(bind.aux, vis, self);
}

//---------------------------------------------------------------------
macro_expand_intrinsic: (aux: *void, vis: *voidc_visitor_t, self:*v_ast_base_t) ~> void
{
//printf("macro_expand_intrinsic start\n");
//defer printf("macro_expand_intrinsic stop\n");

    ctx = *(aux: *macro_defn_ctx_t);

    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    //-------------------------------------------------------------
    v_assert(vis == v_get_compiler());

    saved_vis: &voidc_visitor_t := {};

    v_copy(&saved_vis, vis);
    defer v_copy(vis, &saved_vis);

    bind: &macro_expr_identifier_ctx_t := {};

    q = expr_identifier_q;

    bind.fun := voidc_visitor_get_method(vis, q, &bind.aux);

    voidc_visitor_set_method(vis, vis, q, macro_compile_expr_identifier, &bind);

    bmap = &bind.map;

    v_make_map(bmap);

    np = v_list_get_size(&ctx.pars);
    na = v_list_get_size(args);

    for(i: &int := 0; i < np; ++i)
    {
        par = (v_list_get_item(&ctx.pars, i) : *v_ast_expr_list_t);

        qpar = v_ast_expr_identifier_get_name_q(v_list_get_item(par, 0));
        tpar = v_list_get_item(par, 1);

        v_set_result_type(INVIOLABLE_TAG);
        v_set_result_value(0);

        if (!v_empty(tpar))
        {
            v_ast_accept_visitor(tpar, vis);

            t = (v_get_result_value() : *v_type_t);

            v_set_result_type(t);
            v_set_result_value(0);
        }

        if (i >= na)
        {
            vpar = v_list_get_item(par, 2);

            v_ast_accept_visitor(vpar, vis);
        }
        else
        {
            arg = v_list_get_item(args, i);

            v_ast_accept_visitor(arg, vis);
        }

        t = v_get_result_type();
        v = v_get_result_value();

        expr: &v_ast_expr_t := {};

        v_ast_make_expr_compiled(&expr, t, v);

        any: &v_std_any_t := {};

        v_std_any_set_pointer(&any, &expr);

        v_map_insert(bmap, bmap, (qpar: intptr_t), &any);
    }

    if (v_empty(&ctx.type))
    {
        tag = v_ast_base_get_tag(&ctx.body);

        if (tag == unit_defn_list_q)
        {
            list = (&ctx.body : *v_ast_generic_list_t);

            n = v_list_get_size(list);

            for (i: &int := 0; i < n; ++i)
            {
                item = v_list_get_item(list, i);

                v_ast_accept_visitor(item, vis);
            }
        }
        else if (tag == stmt_list_q)
        {
            list = (&ctx.body : *v_ast_stmt_list_t);

            n = v_list_get_size(list);

            for (i: &int := 0; i < n; ++i)
            {
                item = v_list_get_item(list, i);

                v_ast_accept_visitor(item, vis);
            }
        }
        else        //- expr (?)
        {
            v_set_result_type(ttag);
            v_set_result_value(vtag);

            v_ast_accept_visitor(&ctx.body, vis);
        }

        v_return();         //- Sic !!!
    }

    v_assert(!v_empty(&ctx.type));

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(&ctx.type, vis);

    t = (v_get_result_value() : *v_type_t);

    if (v_type_is_special(t, q_initialize))
    {
        v_set_result_type(ttag);
        v_set_result_value(vtag);

        v = v_obtain_special_result_value(vis, t);

        v_set_result_value(v);
    }
    else
    {
        v_set_result_value(0);
    }

    v_set_result_type(t);

    v_ast_accept_visitor(&ctx.body, vis);

    t = v_get_result_type();
    v = v_get_result_value();

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
macro_spec_expand_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                              arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                             ) ~> void
{
    ctx = *(aux: *macro_defn_ctx_t);

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    //-------------------------------------------------------------
    v_assert(vis == v_get_compiler());

    saved_vis: &voidc_visitor_t := {};

    v_copy(&saved_vis, vis);
    defer v_copy(vis, &saved_vis);

    bind: &macro_expr_identifier_ctx_t := {};

    q = expr_identifier_q;

    bind.fun := voidc_visitor_get_method(vis, q, &bind.aux);

    voidc_visitor_set_method(vis, vis, q, macro_compile_expr_identifier, &bind);

    bmap = &bind.map;

    v_make_map(bmap);

    for(i: &int := 0; i < arg_count; ++i)
    {
        par = (v_list_get_item(&ctx.pars, i) : *v_ast_expr_list_t);

        qpar = v_ast_expr_identifier_get_name_q(v_list_get_item(par, 0));
        tpar = v_list_get_item(par, 1);

        arg = arg_ptrs[i];

        v_set_result_type(INVIOLABLE_TAG);
        v_set_result_value(0);

        if (!v_empty(tpar))
        {
            v_ast_accept_visitor(tpar, vis);

            t = (v_get_result_value() : *v_type_t);

            v_set_result_type(t);
            v_set_result_value(0);
        }

        v_ast_accept_visitor(arg, vis);

        t = v_get_result_type();
        v = v_get_result_value();

        expr: &v_ast_expr_t := {};

        v_ast_make_expr_compiled(&expr, t, v);

        any: &v_std_any_t := {};

        v_std_any_set_pointer(&any, &expr);

        v_map_insert(bmap, bmap, (qpar: intptr_t), &any);
    }

    if (v_empty(&ctx.type))
    {
        v_set_result_type(ttag);
        v_set_result_value(vtag);

        v_ast_accept_visitor(&ctx.body, vis);

        v_return();         //- Sic !!!
    }

    v_assert(!v_empty(&ctx.type));

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(&ctx.type, vis);

    t = (v_get_result_value() : *v_type_t);

    if (v_type_is_special(t, q_initialize))
    {
        v_set_result_type(ttag);
        v_set_result_value(vtag);

        v = v_obtain_special_result_value(vis, t);

        v_set_result_value(v);
    }
    else
    {
        v_set_result_value(0);
    }

    v_set_result_type(t);

    v_ast_accept_visitor(&ctx.body, vis);

    t = v_get_result_type();
    v = v_get_result_value();

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(t, v);
}


//---------------------------------------------------------------------
compile_macro_define: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("compile_macro_define start\n");
//defer printf("compile_macro_define stop\n");

    list = (self: *v_ast_generic_list_t);

    qfl  = (v_list_get_item(list, 0) : *v_ast_expr_t);
    name = (v_list_get_item(list, 1) : *v_ast_expr_t);
    args = (v_list_get_item(list, 2) : *v_ast_expr_t);      //- ...
    type = (v_list_get_item(list, 3) : *v_ast_expr_t);
    body = (v_list_get_item(list, 4) : *v_ast_base_t);
    kind = (v_list_get_item(list, 5) : *v_ast_expr_t);

    qfl  = v_ast_expr_integer_get_number(qfl);

    args = v_ast_expr_call_get_arg_list(args);
    args = (v_list_get_item(args, 1) : *v_ast_generic_list_t);

    spec = v_ast_base_get_tag(self) == macro_spec_defn_q;

    kind = v_ast_expr_integer_get_number(kind);

    ctx = new macro_defn_ctx_t;

    v_add_local_cleaner(macro_defn_ctx_cleaner, ctx);

    {   ctx_pars = &ctx->pars;

        v_make_list_nil(ctx_pars, macro_params_q);

        n = v_list_get_size(args);

        elst: &v_ast_expr_list_t := {};

        etmp: &v_ast_expr_t := {};      //- Empty!

        for (i: &int := 0; i < n; ++i)
        {
            lst = (v_list_get_item(args, i) : *v_ast_expr_list_t);

            v_make_list_nil(&elst);

            e0 = v_list_get_item(lst, 0);
            e1 = v_list_get_item(lst, 1);

            //- Parameter's properties...

            if (v_empty(e0))
            {
                v_list_append(&elst, &elst, e1);            //- Name
                v_list_append(&elst, &elst, &etmp);         //- No type
            }
            else
            {
                v_list_append(&elst, &elst, e0);            //- Name
                v_list_append(&elst, &elst, e1);            //- Type
            }

            //- Default value?

            if (v_list_get_size(lst) == 3)  v_list_append(&elst, &elst, v_list_get_item(lst, 2));       //- Yes
            else                            v_list_append(&elst, &elst, &etmp);                         //- No

            v_list_append(ctx_pars, ctx_pars, &elst);
        }
    }

    v_copy(&ctx->type, type);
    v_copy(&ctx->body, body);

    //-------------------------------------------------------------
    if (!spec)      //- Just "identifier"...
    {
        quark: &v_quark_t := 0;

        block
        {
            tag = v_ast_base_get_tag(name);

            if (tag != v_ast_expr_call_tag)
            {
                v_assert(tag == v_ast_expr_identifier_tag);

                quark := v_ast_expr_identifier_get_name_q(name);

                v_break();
            }

            v_assert(!kind);        //- unit_defn ...

            //- <ns-id> . <id>

            args = v_ast_expr_call_get_arg_list((name: *v_ast_expr_t));

            op = v_list_get_item(args, 0);

            void_obj = v_ast_generic_get_object(op);

            obj = *(void_obj: *v_ast_operator_unary_t);

            pay = (&obj[2] : *v_ast_generic_list_t);

            eid = (v_list_get_item(pay, 0) : *v_ast_expr_t);

            qname = v_ast_expr_identifier_get_name_q(eid);

            nsid = v_list_get_item(args, 1);

            v_set_result_type(INVIOLABLE_TAG);
            v_set_result_value(0);

            v_ast_accept_visitor(nsid, vis);

            ns = (v_get_result_value() : *v_namespace_t);       //- Sic!

            private_flag = v_get_private_flag();
            export_flag  = v_get_export_flag();

            private = private_flag  ||  qfl & qf_private;
            export  = (export_flag  ||  qfl & qf_export)  &&  !private;

            voidc_compile_unit_defn_make_effort(ns->name, qname, export);

            //- ...

            any = v_map_find(&ns->map, (qname: intptr_t));
            v_assert(any);

            quark := v_std_any_get_value(v_quark_t, any);
        }

        sstr: &v_std_string_t := {};

        v_std_string_set(&sstr, "v.macro.");

        v_std_string_append(&sstr, v_quark_to_string(quark));

        qintr = v_quark_from_string(v_std_string_get(&sstr));

        if (kind) v_add_variable_q(quark, v_object_intrinsic_t, (qintr: LLVMValueRef));
        else      v_add_constant_q(quark, v_object_intrinsic_t, (qintr: LLVMValueRef));

        v_add_intrinsic_q(qintr, macro_expand_intrinsic, ctx);
    }
    else            //- Special identifier
    {
        types: &**v_type_t := 0;
        defer if (types)  delete[] types;

        n = v_list_get_size(&ctx->pars);

        if (n)
        {
            types := new (*v_type_t)[n];

            for (i: &int := 0; i < n; ++i)
            {
                par = (v_list_get_item(&ctx->pars, i) : *v_ast_expr_list_t);
                typ = v_list_get_item(par, 1);

                if (v_empty(typ))
                {
                    types[i] := v_void_type();

                    v_continue();
                }

                v_set_result_type(INVIOLABLE_TAG);
                v_set_result_value(0);

                v_ast_accept_visitor(typ, vis);

                types[i] := (v_get_result_value() : *v_type_t);
            }
        }

        rtype: &*v_type_t := v_undef();

        if (v_empty(&ctx->type))
        {
            rtype := v_void_type();
        }
        else
        {
            v_set_result_type(INVIOLABLE_TAG);
            v_set_result_value(0);

            v_ast_accept_visitor(&ctx->type, vis);

            rtype := (v_get_result_value() : *v_type_t);
        }

        ft = v_function_type(rtype, types, (n: unsigned), false);       //- Proto-type ...

        quark: &v_quark_t := v_ast_expr_identifier_get_name_q(name);

        ktype = v_compute_key_quark_type(ft, quark);

        sstr: &v_std_string_t := {};

        v_std_string_set(&sstr, "v.macro.");

        v_std_string_append(&sstr, v_quark_to_string(quark));

        v_std_string_append(&sstr, ", ");

        voidc_internal_std_string_append_type(&sstr, ktype);

        qname = v_quark_from_string(v_std_string_get(&sstr));

        v_add_overload_q(quark, ktype, qname);

        v_add_intrinsic_q(qname, macro_spec_expand_intrinsic, ctx);
    }

    //- ...
}


//---------------------------------------------------------------------
{   vis = v_get_compiler();

    voidc_visitor_set_method(vis, vis, macro_defn_q,      compile_macro_define, 0);
    voidc_visitor_set_method(vis, vis, macro_spec_defn_q, compile_macro_define, 0);

    gen = v_get_ast_generator_visitor();

    gen_aux: &*void := v_undef();

    gen_generic = voidc_visitor_get_method(gen, unit_defn_list_q, &gen_aux);

    voidc_visitor_set_method(gen, gen, macro_defn_q,      gen_generic, gen_aux);
    voidc_visitor_set_method(gen, gen, macro_spec_defn_q, gen_generic, gen_aux);
    voidc_visitor_set_method(gen, gen, macro_params_q,    gen_generic, gen_aux);
}

//---------------------------------------------------------------------
{
    gr0: &v_peg_grammar_t := {};        gr0 = &gr0;

    v_peg_get_grammar(gr0);

    grammar gr0
    {
    actions:
        mk_br_item      = my_br_item_grammar_action;
        mk_macro_hdr    = mk_macro_hdr_grammar_action;
        mk_macro_stmt   = mk_macro_stmt_grammar_action;
        mk_macro_define = mk_macro_define_grammar_action;

    parsers:
        br_item += k:expr _':'_ t:expr _'='_ v:expr     { mk_br_item(k, t, v) }
                 / k:expr              _'='_ v:expr     { mk_br_item(k, 0, v) };

        macro_hdr = qf:(qlf_spec_ident / qlf_ident) _':'_ b:bracketed r:(_"~>"_ expr)?  { mk_macro_hdr(qf, b, r) };

        macro_stmt = "#define" !ident_cont _ h:macro_hdr _
                         ('='_ e:expr _';'      { mk_macro_stmt(h, e) }
                         / a:parse_any          { mk_macro_stmt(h, a) });

        unit_defn =+ m:macro_stmt   { mk_macro_define(m, 0) };
        stmt      =+ m:macro_stmt   { mk_macro_define(m, 1) };
    }

    v_peg_set_grammar(gr0);
}



//=====================================================================


#define foo: (x, y) = x*y;

{   v = foo(6, 7);

    printf("v: %d\n", v);
}


#define bar: (v) = printf("bar: %d\n", v);

{   bar(777);
}


#define fact: (n) =
(
    #if (n <= 0)    1
    #else           n * fact(n-1)
    #endif
);

//{ voidc_verify_jit_module_optimized(true); }
//{ v_debug_print_module(9); }
//---------------------------------------------------------------------
{   n = 7;

    printf("fact(%d): %d\n", n, fact(n));
}


#define map: (z, f, n: unsigned)  =
(
    #if (n == 0)    z
    #else           f(map(z, f, n-1))
    #endif
);


//---------------------------------------------------------------------
struct some_t
{
    x: int;
    y: int;
};

inlinehint
(v_initialize(_)): (sp: *some_t, n: size_t) ~> void
{
    printf("init some_t %p %d\n", sp, (n: int));
}

inlinehint
(v_terminate(_)): (sp: *some_t, n: size_t) ~> void
{
    printf("term some_t %p %d\n", sp, (n: int));
}

inlinehint
(v_copy(_)): (d: *some_t, s: *const some_t, n: size_t) ~> void
{
    .memcpy: (d: *void, s: *const void, n: size_t) ~> *void;

    .memcpy(d, s, n*some_t.size);

    printf("copy some_t %p %p %d\n", d, s, (n: int));
}


//---------------------------------------------------------------------
{
    v: some_t = block
    {
        r: some_t = {3, 4};

        v_break(r);
    };

    printf("v: %p (%d, %d)\n", &v, v.x, v.y);
}


//---------------------------------------------------------------------
#define fun: (s: some_t) ~> some_t  =
{
    r: &some_t := s;

    r.x += 1;
    r.y += 2;

    printf("fun  some_t %p %p\n", &s, &r);

    r       //- Sic!
};


//{ voidc_verify_jit_module_optimized(true); }
//{ v_debug_print_module(9); }
//---------------------------------------------------------------------
{   v: some_t = {7, 8};

    r = fun(fun(v));

    printf("r: %p (%d, %d)\n", &r, r.x, r.y);
}

{   z: some_t = {0, 0};

    v = map(z, fun, 3);

    printf("v: %p (%d, %d)\n", &v, v.x, v.y);
}



//---------------------------------------------------------------------
#define qwe: (s: v_std_string_t) ~> v_std_string_t  =
block
{
    ret = v_get_break_value();

    v_copy(&ret, &s);

    v_std_string_append(&ret, "A");
};


//{ voidc_verify_jit_module_optimized(true); }
//{ v_debug_print_module(2); }
{
    z: &v_std_string_t := {};

    v_std_string_set(&z, "*");

    v: &v_std_string_t := map(z, qwe, 20);

    printf("v: %s\n", v_std_string_get(&v));
}


//---------------------------------------------------------------------
{   #define asd: (x) = x+1;

    v = map(0, asd, 7);

    printf("v: %d\n", v);
}


//---------------------------------------------------------------------
{   #define zxc: (x) ~> int  =
    {
        #note ("Hi!")

        x + 1       //- Sic!
    };

    v = map(0, zxc, 7);

    printf("v: %d\n", v);

    #if (v_defined(zxc))    #note ("zxc found")
    #else                   #note ("zxc not found")
    #endif
}

#if (v_defined(zxc))    #note ("zxc found")
#else                   #note ("zxc not found")
#endif


//---------------------------------------------------------------------
#if (v_defined(map))    #note ("map found")
#else                   #note ("map not found")
#endif



//---------------------------------------------------------------------
#define (_*_): (s: v_std_string_t, n) ~> v_std_string_t  =
block
{
    ret = v_get_break_value();

    str = v_std_string_get(&s);

    for (i: &int := 0; i < n; ++i)
    {
        v_std_string_append(&ret, str);
    }
};

#define (_.str): (s: *const char) ~> v_std_string_t  =
block
{
    ret = v_get_break_value();

    v_std_string_set(&ret, s);
};


{   ns = ("Qwe" : *const char).str * 20;

    printf("ns: %s\n", v_std_string_get(&ns));
}


#define (_*_): (a: char[4], n) ~> v_std_string_t  =  (a: *const char).str * 20;

{   ns = "Asd" * 20;

    printf("ns: %s\n", v_std_string_get(&ns));
}

#define (_.c_str): (s: &v_std_string_t) ~>       *char  =  v_std_string_get(&s);
#define (_.c_str): (s:  v_std_string_t) ~> *const char  =  v_std_string_get(&s);

{   ns = "Zxc" * 20;

    printf("ns: %s\n", ns.c_str);
}


#define (_[]): (s: &v_std_string_t, i) ~> &char  =  s.c_str[i];
#define (_[]): (s:  v_std_string_t, i) ~>  char  =  s.c_str[i];

{   ns = "Zxc" * 20;

    for (i: &int := 0; i < 10; ++i)   printf("ns[%d]: %c\n", i, ns[i]);
}


#define (_:=_): (lhs: &some_t, rhs: some_t) ~> &some_t  =
{
    v_copy(&lhs, &rhs);

    lhs
};

{   r: &some_t := {1, 2};
    v: some_t = {3, 4};

    printf("r: (%d, %d)\n", r.x, r.y);

    r := v;

    printf("r: (%d, %d)\n", r.x, r.y);
}


#define str: (s)  =  (s: *const char);

{
    printf("[%s]\n", (str("Qwerty").str * 5).c_str);
}


//---------------------------------------------------------------------
v_typeof_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_list_get_item(args, 0), vis);        //- Sic !!!

    t = v_get_result_type();

    v_set_result_type(v_static_type_t);
    v_set_result_value((t: LLVMValueRef));
}

//---------------------------------------------------------------------
eq_types_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("eq_types_intrinsic start\n");
//defer printf("eq_types_intrinsic stop\n");

    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_list_get_item(args, 0), vis);

    v_assert(v_get_result_type() == v_static_type_t);

    v0 = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_list_get_item(args, 1), vis);

    v_assert(v_get_result_type() == v_static_type_t);

    v1 = v_get_result_value();

    tr = v_uint_type(1);
    vr = LLVMConstInt(v_type_get_llvm_type(tr), v0 == v1, false);

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(tr, vr);
}

{   v_add_intrinsic("v_typeof", v_typeof_intrinsic, 0);
    v_add_intrinsic("eq_types", eq_types_intrinsic, 0);
}


//---------------------------------------------------------------------
type_t = v_typeof(int);

#define (_==_): (a: type_t, b: type_t) ~> bool  =  eq_types(a, b);


//---------------------------------------------------------------------
#define check: (t, v) ~> bool  =  t == v_typeof(v);

{
//  ok = check(int, 5);

//  ok = check(float(64), 5.0);

//  ok = check(char[2], "q");

    ok = check(type_t, int);

    printf("ok: %d\n", (ok: int));
}


//{ voidc_verify_jit_module_optimized(true); }
//{ v_debug_print_module(9); }
//---------------------------------------------------------------------
X = { a = 1; a = a+1; a+100500 };

{
    printf("X: %d\n", X);
}

T = { t = int; t = t[2]; t = t[3];  struct { t; } };

{
    v: &T := {};

    v[0][2] := { 7, 8 };

    printf("%zd, {%d, %d}\n", T.size, v[0][2][0], v[0][2][1]);
}


//---------------------------------------------------------------------
#define swap: (a, b)
{'stmt_list'
  {
    tmp: v_typeof(a) := {};

    tmp := a;
    a   := b;
    b   := tmp;
  }
'stmt_list'}

{
    a: &int := 7;
    b: &int := 8;

    printf("a: %d, b: %d\n", a, b);

    swap(a, b);

    printf("a: %d, b: %d\n", a, b);
}


//---------------------------------------------------------------------
#define if: (cond, then, else) ~> v_typeof(then)  =
block
{
    if (cond)   v_break(then);
    else        v_break(else);
};

{
    printf("%d\n", if(true,  777, 888));
    printf("%d\n", if(false, 777, 888));
}


//---------------------------------------------------------------------
Y = { #define s: (x) = x+1;  map(0, s, 7) };

{
    printf("Y: %d\n", Y);
}


//---------------------------------------------------------------------
#define FOO: (x, y = 40+x)  =  x + y;

{
    printf("FOO(1, 1): %d\n", FOO(1, 1));

    printf("FOO(1): %d\n", FOO(1));
}


//=====================================================================
is_overloaded_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);        //- quark
    arg1 = v_list_get_item(args, 1);        //- type

    quark: &v_quark_t := v_undef();

    tag0 = v_ast_base_get_tag(arg0);

    if (tag0 == v_ast_expr_identifier_tag)
    {
        quark := v_ast_expr_identifier_get_name_q(arg0);
    }
    else
    {
        v_assert(tag0 == v_ast_expr_string_tag);

        str = v_ast_expr_string_get_string(arg0);

        quark := v_quark_from_string(str);
    }

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(arg1, vis);

    type = (v_get_result_value() : *v_type_t);

    ret = v_get_overload_q(quark, type) != 0;

    t = v_uint_type(1);
    v = LLVMConstInt(v_type_get_llvm_type(t), ret, 0);

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
static_type_kind_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    type = v_list_get_item(args, 0);

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(type, vis);

    type = (v_get_result_value() : *v_type_t);

    k = v_kind(type);

    t = v_find_type("int");
    v = LLVMConstInt(v_type_get_llvm_type(t), k, 0);

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
{   v_add_overload("v_kind", v_static_type_t, "my.static_type_kind_intrinsic");

    v_add_intrinsic("my.static_type_kind_intrinsic", static_type_kind_intrinsic, 0);

    v_add_intrinsic("is_overloaded", is_overloaded_intrinsic, 0);
}


//---------------------------------------------------------------------
#if (is_overloaded(v_initialize, v_std_string_t))
    #note ("Yes")
#else
    #note ("No")
#endif


//---------------------------------------------------------------------

















{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("llvm-c/Core.void");
}

{   v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    aaa: &char[4] := "aaa";

    aaa := {'a', 'b', 0};

    printf("%s %s\n", aaa, "bbb");
}


//---------------------------------------------------------------------
qwe: &*((*const char, ...) -> int) := printf;

{
    qwe("It works!\n");

    v_load(&qwe)("Does it work?\n");        //- YES !!!

}


//---------------------------------------------------------------------
//- v_ptr - type intrinsic
//---------------------------------------------------------------------
voidc_ptr_type_intrinsic: (vis: voidc_visitor_ptr, *void, args: v_ast_expr_list_ptr) -> void
{
    ast = v_alloca(v_ast_opaque_expr_sptr, 2);
    v_initialize(ast, 2);
    defer v_terminate(ast, 2);

    v_list_get_items(args, 0, ast, 2);


    v_set_result_type(INVIOLABLE_TAG);

    v_ast_accept_visitor((ast+0: v_ast_base_ptr), vis);

    et = (v_get_result_value() : v_type_ptr);


    v_set_result_type(UNREFERENCE_TAG);

    v_ast_accept_visitor((ast+1: v_ast_base_ptr), vis);

    as_v = v_get_result_value();

    as = (LLVMConstIntGetZExtValue(as_v) : unsigned);

    typ = v_pointer_type(et, as);

    v_set_result_type(voidc_static_type);
    v_set_result_value((typ: LLVMValueRef));
}

//---------------------------------------------------------------------
//- v_ref - type intrinsic
//---------------------------------------------------------------------
voidc_ref_type_intrinsic: (vis: voidc_visitor_ptr, *void, args: v_ast_expr_list_ptr) -> void
{
    ast = v_alloca(v_ast_opaque_expr_sptr, 2);
    v_initialize(ast, 2);
    defer v_terminate(ast, 2);

    v_list_get_items(args, 0, ast, 2);


    v_set_result_type(INVIOLABLE_TAG);

    v_ast_accept_visitor((ast+0: v_ast_base_ptr), vis);

    et = (v_get_result_value() : v_type_ptr);


    v_set_result_type(UNREFERENCE_TAG);

    v_ast_accept_visitor((ast+1: v_ast_base_ptr), vis);

    as_v = v_get_result_value();

    as = (LLVMConstIntGetZExtValue(as_v) : unsigned);

    typ = v_reference_type(et, as);

    v_set_result_type(voidc_static_type);
    v_set_result_value((typ: LLVMValueRef));
}

//{
//    v_add_intrinsic("v_ptr", voidc_ptr_type_intrinsic, 0);
//    v_add_intrinsic("v_ref", voidc_ref_type_intrinsic, 0);
//}


//---------------------------------------------------------------------
append_string_repr: (str: v_std_string_ptr, s: *const char) -> void
{
    s: &*const char := s;

    v_std_string_append(str, "\"");

    buf: &char[2] := 0;

    while(c = *s++)
    {
        switch(c)
        {
        case ('\n': char):  v_std_string_append(str, "\\n");  v_break();
        case ('\r': char):  v_std_string_append(str, "\\r");  v_break();
        case ('\t': char):  v_std_string_append(str, "\\t");  v_break();
        case ('\'': char):  v_std_string_append(str, "\\\'"); v_break();
        case ('\"': char):  v_std_string_append(str, "\\\""); v_break();
        case ('\\': char):  v_std_string_append(str, "\\\\"); v_break();

        default:

           buf[0] := c;

           v_std_string_append(str, buf);

           v_break();
        }
    }

    v_std_string_append(str, "\"");
}


//---------------------------------------------------------------------
append_type: (str: v_std_string_ptr, t: v_type_ptr) -> void
{
    flag: &bool := false;

    switch(k = v_kind(t))
    {
    case v_type_kind_void:  v_std_string_append(str, "void");       v_break();
    case v_type_kind_f16:   v_std_string_append(str, "float(16)");  v_break();
    case v_type_kind_f32:   v_std_string_append(str, "float(32)");  v_break();
    case v_type_kind_f64:   v_std_string_append(str, "float(64)");  v_break();
    case v_type_kind_f128:  v_std_string_append(str, "float(128)"); v_break();

    case v_type_kind_int:

        flag := true;

        //- Fallthrough!

    case v_type_kind_uint:

        if (flag)  v_std_string_append(str, "int(");
        else       v_std_string_append(str, "uint(");

        v_std_string_append_number(str, v_type_integer_get_width(t));

        v_std_string_append(str, ")");

        v_break();

    case v_type_kind_function:

        v_std_string_append(str, "((");

        pc = v_type_function_get_param_count(t);
        pt = v_type_function_get_param_types(t);

        for (i: &int := 0; ;)
        {
            append_type(str, pt[i]);

            if (++i == pc)  v_break();

            v_std_string_append(str, ", ");
        }

        v_std_string_append(str, ") -> ");

        append_type(str, v_type_function_get_return_type(t));

        v_std_string_append(str, ")");

        v_break();

    case v_type_kind_pointer:

        flag := true;

        //- Fallthrough!

    case v_type_kind_reference:

        et = v_type_refptr_get_element_type(t);
        as = v_type_refptr_get_address_space(t);

        if (as == 0)
        {
            if (flag) v_std_string_append(str, "*");
            else      v_std_string_append(str, "&");

            append_type(str, et);
        }
        else
        {
            if (flag) v_std_string_append(str, "v_ptr(");       //- Sic!
            else      v_std_string_append(str, "v_ref(");       //- Sic!

            append_type(str, et);

            v_std_string_append(str, ", ");

            v_std_string_append_number(str, as);

            v_std_string_append(str, ")");
        }

        v_break();

    case v_type_kind_struct:

        v_std_string_append(str, "v_struct(");

        if (n = v_type_struct_get_name(t))
        {
            append_string_repr(str, n);

            flag := true;
        }

        if (!flag  &&  !v_type_struct_is_opaque(t))
        {
            if (v_type_struct_is_packed(t))
            {
                v_std_string_append(str, "packed, ");
            }

            v_std_string_append(str, "{");

            ec = v_type_struct_get_element_count(t);
            et = v_type_struct_get_element_types(t);

            for (i: &int := 0; ;)
            {
                append_type(str, et[i]);

                if (++i == ec)  v_break();

                v_std_string_append(str, ", ");
            }

            v_std_string_append(str, "}");
        }

        v_std_string_append(str, ")");

        v_break();

    case v_type_kind_array:

        append_type(str, v_type_array_get_element_type(t));

        v_std_string_append(str, "[");

        v_std_string_append_number(str, v_type_array_get_length(t));

        v_std_string_append(str, "]");

        v_break();

    case v_type_kind_vector:

        flag := true;

        //- Fallthrough!

    case v_type_kind_svector:

        if (flag) v_std_string_append(str, "vec(");
        else      v_std_string_append(str, "svec(");

        append_type(str, v_type_vector_get_element_type(t));

        v_std_string_append(str, ", ");

        v_std_string_append_number(str, v_type_vector_get_size(t));

        v_std_string_append(str, ")");

        v_break();
    }
}

//---------------------------------------------------------------------
static_type_to_string_intrinsic: (vis: voidc_visitor_ptr, aux: *void,
                                  ast: v_ast_expr_ptr,
                                  t0: v_type_ptr, v0: LLVMValueRef
                                  ) -> void
{
    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);
    defer v_terminate(sstr);

    append_type(sstr, (v0: v_type_ptr));

    etmp = v_alloca(v_ast_opaque_expr_sptr);
    v_initialize(etmp);
    defer v_terminate(etmp);

    v_ast_make_expr_string(etmp, v_std_string_get(sstr));

    v_ast_accept_visitor((etmp: v_ast_base_ptr), vis);
}

{
    v_util_function_dict_set(v_quark_from_string(".str"),  voidc_static_type, "v.static_type_to_string");

    v_add_intrinsic("v.static_type_to_string",  static_type_to_string_intrinsic,  0);
}

//---------------------------------------------------------------------
{
    intrinsic_t = (vis: voidc_visitor_ptr, aux: *void,
                   ast: v_ast_expr_ptr,
                   t0: v_type_ptr, v0: LLVMValueRef
                   ) -> void;

    t = intrinsic_t;

    printf("t: %s\n", t.str);

}


//=====================================================================
double = float(64);

log: (double) -> double;

//---------------------------------------------------------------------
{
    ln2x128 = 128*log(2);

    for (i: &int := 2; i < 63; ++i)
    {
        d = ln2x128 / log(i);

        printf("%d: %g\n", i, d);
    }
}





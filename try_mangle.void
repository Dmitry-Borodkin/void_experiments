{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("llvm-c/Core.void");
    v_import("llvm-c/Support.void");
}

{   v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();
}


//---------------------------------------------------------------------
FILE = v_struct("FILE");


//---------------------------------------------------------------------
v_popen: (command: *const char, prop: *const char) -> *FILE;

v_pclose: (*FILE) -> int;

fprintf: (stream: *FILE, format: *const char, ...) -> int;

fscanf: (stream: *FILE, format: *const char, ...) -> int;

fputs: (buf: *char, stream: *FILE) -> int;

sprintf: (str: *char, format: *const char, ...) -> int;

system: (cmd: *const char) -> int;


//---------------------------------------------------------------------
my_source: &char[] :=

"""
#include <stddef.h>
#include <zlib.h>

size_t z_stream_size = sizeof(z_stream) / sizeof(void*);

#define Z_STREAM_OFFSETOF(field) \
size_t z_stream_offsetof_##field = offsetof(z_stream, field);

Z_STREAM_OFFSETOF(zalloc)
Z_STREAM_OFFSETOF(zfree)
Z_STREAM_OFFSETOF(opaque)
Z_STREAM_OFFSETOF(next_in)
Z_STREAM_OFFSETOF(avail_in)
Z_STREAM_OFFSETOF(next_out)
Z_STREAM_OFFSETOF(avail_out)

int
my_deflateInit(z_stream *strm, int level)
{
    return deflateInit(strm, level);
}

int
my_inflateInit(z_stream *strm)
{
    return inflateInit(strm);
}

""";


//---------------------------------------------------------------------
buffer: &*char := 0;

{   buflen = 1024;

    buffer := v_malloc(char, buflen);

    {   p = v_popen("mktemp", "r");
        defer v_pclose(p);

        fscanf(p, "%500s", buffer);
    }

    if (v_find_constant("_WIN32", 0, 0))
    {
        cmd = buffer + 512;

        sprintf(cmd, "cygpath -m %s", buffer);

        p = v_popen(cmd, "r");
        defer v_pclose(p);

        fscanf(p, "%1000s", buffer);
    }

    //-----------------------------------------------------------------
    {   p = v_popen("bash", "w");
        defer v_pclose(p);

        fprintf(p, "clang -x c - -O3 $(pkg-config zlib --cflags --libs) -shared -fPIC -o %s <<HEREDOC\n", buffer);

        fprintf(p, "%s\nHEREDOC\n", my_source);
    }
}

//---------------------------------------------------------------------
{   ok = LLVMLoadLibraryPermanently(buffer);

    printf("ok: %d\n", ok);
}


//---------------------------------------------------------------------
z_stream = v_struct("struct.z_stream");

z_stream_size: &const size_t;

{   printf("sz: %d\n", (z_stream_size: int));

    content_typ = v_array_type(v_pointer_type(void, 0), z_stream_size);

    v_type_struct_set_body(z_stream, &content_typ, 1, false);


    v_add_type("ulong", v_uint_type(v_type_integer_get_width(long)));
}

//---------------------------------------------------------------------
z_data_t = v_struct("z_data_t", {size_t, v_type_ptr});


//---------------------------------------------------------------------
z_stream_field_intrinsic: (vis: voidc_visitor_ptr, aux: *void,
                           ast: v_ast_expr_ptr,
                           t0: v_type_ptr, v0: LLVMValueRef
                           ) -> void
{
    data = *(aux: *z_data_t);

    char_ptr  = v_pointer_type(char, 0);
    char_ptr_ = v_type_get_llvm_type(char_ptr);

    char_   = v_type_get_llvm_type(char);
    size_t_ = v_type_get_llvm_type(size_t);

    builder = v_target_get_builder();

    v = LLVMBuildBitCast(builder, v0, char_ptr_, "");

    v = LLVMBuildGEP2(builder, char_, v, &LLVMConstInt(size_t_, data[0], 0), 1, "");

    t  = v_reference_type(data[1], 0);
    t_ = v_type_get_llvm_type(t);

    v = LLVMBuildBitCast(builder, v, t_, "");

    v_adopt_result(t, v);
}



//---------------------------------------------------------------------
generate_z_stream_fields_table: (vis: voidc_visitor_ptr, *void, args: v_ast_expr_list_ptr) -> void
{
    ast = v_alloca(v_ast_opaque_base_sptr);
    v_initialize(ast);
    defer v_terminate(ast);

    v_list_get_items(args, 0, (ast: v_ast_expr_ptr));

    v_ast_expr_call_get_arg_list((ast: v_ast_expr_ptr), (ast: v_ast_expr_list_ptr));

    v_list_get_items((ast: v_ast_expr_list_ptr), 1, (ast: v_ast_expr_ptr));

    ast_list = (ast: v_ast_generic_list_ptr);

    count = v_list_get_size(ast_list);


    table = v_malloc(z_data_t, count);

    v_add_symbol("z_stream_data_table", 0, table);        //- Sic!


    elst = v_alloca(v_ast_opaque_expr_list_sptr, 2);
    v_initialize(elst, 2);
    defer v_terminate(elst, 2);

    expr = v_alloca(v_ast_opaque_expr_sptr);
    v_initialize(expr);
    defer v_terminate(expr);

    stmt = v_alloca(v_ast_opaque_stmt_sptr);
    v_initialize(stmt);
    defer v_terminate(stmt);


    v_ast_make_expr_string(expr, "z_stream_data_table");

    v_make_list(elst+0, expr, 1);

    v_ast_make_expr_identifier(expr, "v_find_symbol_value");

    v_ast_make_expr_call(expr, expr, elst+0);

    v_make_list(elst+0, expr, 1);

    v_ast_make_expr_identifier(expr, "z_data_t");

    v_make_list(elst+1, expr, 1);

    v_ast_make_expr_integer(expr, 0);

    v_list_append(elst+1, elst+1, expr);

    v_ast_make_expr_identifier(expr, "v_ptr");

    v_ast_make_expr_call(expr, expr, elst+1);

    v_list_append(elst+0, elst+0, expr, 1);

    v_ast_make_expr_identifier(expr, "v_cast");

    v_ast_make_expr_call(expr, expr, elst+0);

    v_ast_make_stmt(stmt, "table", expr);


    v_set_result_type(INVIOLABLE_TAG);

    v_ast_accept_visitor((stmt: v_ast_base_ptr), vis);


    sstr = v_alloca(v_util_opaque_std_string);
    v_initialize(sstr);
    defer v_terminate(sstr);

    z_stream_ref = v_reference_type(z_stream, 0);

    for (i: &int := 0; i < count; ++i)
    {
        v_list_get_items(ast_list, i, (elst: v_ast_base_ptr));

        v_list_get_items(elst, 0, expr);

        name = v_ast_expr_identifier_get_name(expr);

        v_list_get_items(elst, 1, expr);

        v_set_result_type(INVIOLABLE_TAG);

        v_ast_accept_visitor((expr: v_ast_base_ptr), vis);

        type = (v_get_result_value() : v_type_ptr);


        v_std_string_set(sstr, "z_stream_offsetof_");

        v_std_string_append(sstr, name);

        sz = *(v_find_symbol_value(v_std_string_get(sstr)) : *size_t);

        table[i] := {sz, type};


        v_std_string_set(sstr, ".");

        v_std_string_append(sstr, name);

        quark = v_quark_from_string(v_std_string_get(sstr));

        v_std_string_set(sstr, "z_stream.field.");

        v_std_string_append(sstr, name);

        itname = v_std_string_get(sstr);

        v_util_function_dict_set(quark, z_stream_ref, itname);


        //- v_add_intrinsic(itname, z_stream_field_intrinsic, table+i);

        v_ast_make_expr_string(expr, itname);

        v_make_list(elst+0, expr, 1);

        v_ast_make_expr_identifier(expr, "z_stream_field_intrinsic");

        v_list_append(elst+0, elst+0, expr);

        v_ast_make_expr_identifier(expr, "table");

        v_make_list(elst+1, expr, 1);

        v_ast_make_expr_integer(expr, i);

        v_list_append(elst+1, elst+1, expr);

        v_ast_make_expr_identifier(expr, "v_getelementptr");

        v_ast_make_expr_call(expr, expr, elst+1);

        v_list_append(elst+0, elst+0, expr);

        v_ast_make_expr_identifier(expr, "v_add_intrinsic");

        v_ast_make_expr_call(expr, expr, elst+0);


        v_set_result_type(INVIOLABLE_TAG);

        v_ast_accept_visitor((expr: v_ast_base_ptr), vis);
    }

    free: (*void) -> void;

    v_add_local_cleaner(free, table);

    voidc_flush_unit_symbols();             //- Sic!
}

//---------------------------------------------------------------------
{
    v_add_intrinsic("generate_z_stream_fields_table", generate_z_stream_fields_table, 0);
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    generate_z_stream_fields_table
    ((
        zalloc:    *void,
        zfree:     *void,
        opaque:    *void,
        next_in:   *const uint(8),
        avail_in:  ulong,
        next_out:  *uint(8),
        avail_out: ulong
    ));
}


my_deflateInit: (*z_stream, level: int) -> int;

deflate: (*z_stream, flush: int) -> int;

deflateEnd: (*z_stream) -> int;


my_inflateInit: (*z_stream) -> int;

inflate: (*z_stream, flush: int) -> int;

inflateEnd: (*z_stream) -> int;


//---------------------------------------------------------------------
{
    strm: &z_stream := v_undef();

    strm.zalloc := 0;
    strm.zfree  := 0;
    strm.opaque := 0;

    r = my_deflateInit(&strm, 9);

    printf("init: %d\n", r);


    strlen: (*char) -> size_t;

    strm.next_in  := my_source;
    strm.avail_in := strlen(my_source);


    N = 100;

    buf = v_malloc(char, N);
    defer v_free(buf);


    flush: &int := 0;

    loop
    {
        strm.next_out  := buf;
        strm.avail_out := N;

        deflate(&strm, flush);

        n = N - strm.avail_out;

        printf("n: %d\n", (n: int));

        for (i: &size_t := 0; i < n; ++i)
        {
            printf("%02X", buf[i]);
        }

        printf("\n");

        if (n != N  &&  flush) v_break();

        flush := 4;
    }


    r = deflateEnd(&strm);

    printf("end: %d\n", r);
}


//---------------------------------------------------------------------
{
    p = v_popen("bash", "w");
    defer v_pclose(p);

    fprintf(p, "rm %s\n", buffer);

    v_free(buffer);
}



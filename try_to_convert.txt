- Общая идея API ------------------------------------------------------

  - Все-таки это будет ДВА хэндлера (хука):

    v_try_to_adopt: (t0: *v_type_t, v0: LLVMValueRef) ~> bool;

    v_try_to_convert: (t0: *v_type_t, v0: LLVMValueRef,
                       t1: *v_type_t, pv1: *LLVMValueRef
                      ) ~> bool;

  - На их основе реализуются "фиксированные":

    v_adopt_result: (t0: *v_type_t, v0: LLVMValueRef) ~> void;

    v_convert_to_type: (t0: *v_type_t, v0: LLVMValueRef, t1: *v_type_t) ~> LLVMValueRef;

  - "Разделение обязанностей":

    - "Adopt" обрабатывает result_type/result_value:

      - Анализирует полученные result_type/result_value (тэги и тп.)

      - Определяет способ трансформации t0/v0 в result_type/result_value

      - Выполняет эту трансформацию

      - В "простых" случаях вызывает "Convert"

    - "Convert" делает "implicit conversion" v0 из t0 в t1:

      - Работает с "конкретными" типами/значениями

      - "НЕ ТРОГАЕТ" result_type/result_value (!!!)

      - Если нужно, сохраняет/восстанавливает result_type/result_value

  - ОБА хэндлера "условные":

    - Если хэндлер возвращает true - значит работа сделана и больше ничего делать не нужно

    - Если  false  - состояние НЕ изменилось...

    - Эта логика позволит делать перехват "с обоих концов"...


- Stage 0 -------------------------------------------------------------

  - "Convert"...

    - Базовые преобразования  (->)

      - "Скаляры"...

        - Floating point -> floating point,  с увеличением разрядности

        - Integer -> floating point

        - Integer -> integer,  с увеличением(?) разрядности (без ограничения(?) знаковости)

        - 0 -> *T

        - *T -> *void,  (w/a address space?)

      - Ссылки...

        - &T[_] -> *T,  промоушен из массива (в памяти) в указатель

        - &T -> T,  (разыменование ссылки)

        - T -> &T,  (создание ссылки (на константу или временную переменную))

    - "Комбинации" преобразований  (->>)

      - Ссылки на "скаляры"

        - &T ->> U,   (&T -> T -> U),     где T,U - подходящие "скаляры"

        - &T ->> &U,  (&T ->> U -> &U),   ...

        - T ->> &U,   (T -> U -> &U),     ...

      - Ссылки на массивы

        - &T[_] ->> *void,  (&T[_] -> *T -> *void)

        - &T[_] ->> &*T,    (&T[_] -> *T -> &*T)

        - &T[_] ->> &*void, (&T[_] ->> *void -> &*void)

      - Массивы

        - T[_] ->> *T,      (T[_] -> &T[_] -> *T)

        - T[_] ->> *void,   (T[_] ->> *T -> *void)

        - T[_] ->> &*T,     (T[_] ->> *T -> &*T)

        - T[_] ->> &*void,  (T[_] ->> *void -> &*void)

      - ... ??? ...

  - "Adopt"...

    - INVIOLABLE_TAG:   t0/v0 -> result_type/result_value

    - UNREFERENCE_TAG:

      - Из ссылок:

        - &T -> T,  (разыменование)

        - &T[_] -> *T,  промоушен в указатель

      - Из значений:

        - T[_] ->> *T,  промоушен в указатель

      - Специальная "загогулина" для voidc:

        - v_static_type_t  ->  *v_type_t


- Level-01 ------------------------------------------------------------

  - expr_util - Поддержка векторов - "Convert"

    - Базовые перобразования  (->)

      - T -> V(T),        векторизация скаляра

      - V(T) -> V(U),     где T,U - подходящие "скаляры"

    - "Комбинации" преобразований  (->>)

      - T ->> &V(T),      (T -> V(T) -> &V(T))

      - T ->> V(U),       (T -> V(T) -> V(U)),          где T,U - подходящие "скаляры"

      - T ->> &V(U),      (T ->> V(U) -> &V(U)),        ...

      - &T ->> V(T),      (&T -> T -> V(T))

      - &T ->> V(U),      (&T ->> U -> V(U)),           ...

      - &T ->> &V(T),     (&T ->> V(T) -> &V(T))

      - &T ->> &V(U),     (&T ->> V(U) -> &V(U)),       ...

      - V(T) ->> &V(U),   (V(T) -> V(U) -> &V(U)),      ...

      - &V(T) ->> V(U),   (&V(T) -> V(T) -> V(U)),      ...

      - &V(T) ->> &V(U),  (&V(T) ->> V(U) -> &V(U)),    ...


- Level-02 ------------------------------------------------------------

  - aggregates

    - Поддержка "adopt" для  T[] ...


- Level-03 ------------------------------------------------------------

  - local_objects

    - Поддержка "adopt" для  *_VTAG ...

    - Поддержка ссылок на объекты:

      - &T -> T,  NOP для объектов

      - T -> &T,  (?) для объектов

    - ... ??? ...


  - coercions

    - Базовые коерции (~>)

      - T ~> U

    - Комбинации (~>>)

      - &T -> T ~> U

      - T ~> U -> &U

      - &T -> T ~> U -> &U

      - ... ??? ...

    - ...




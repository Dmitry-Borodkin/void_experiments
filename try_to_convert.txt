- Общая идея API ------------------------------------------------------

  - Один(!) handler/hook:

    v_try_to_convert: (t0: *v_type_t, v0: LLVMValueRef,
                       pt1: **v_type_t, pv1: *LLVMValueRef
                      ) ~> bool;

    Т.е. вместо двух хэндлеров (adopt и convert) делаем один с совмещенной семантикой...


- Stage 0 -------------------------------------------------------------

  - "Простые" скалярные преобразования...

    - Floating point -> floating point,  с увеличением разрядности

    - Integer -> floating point

    - Integer -> integer,  с увеличением разрядности (без ограничения знаковости)

    - *T -> *void,  (w/a address space?)

    - T[_] -> *T,  промоушен из массива в указатель

    - &T -> T,  (разыменование ссылки)

    - T -> &T,  (создание ссылки (на константу или временную переменную))

  - "Комбинации" преобразований

    - ... ??? ...

  - "Adopt"...

    - INVIOLABLE_TAG:   t0 -> t1,  v0 -> v1

    - UNREFERENCE_TAG:

      - Из ссылок:

        - &T -> T,  (разыменование)

        - &T[_] -> *T,  промоушен в указатель

      - Из значений:

        - T[_] -> *T,  промоушен в указатель

  - Специальная "загогулина" для voidc:

    - v_static_type_t  ->  *v_type_t,  в случае UNREFERENCE_TAG


- Level-01 ------------------------------------------------------------

  - expr_util

    - Поддержка векторов...


- Level-02 ------------------------------------------------------------

  - aggregates

    - Поддержка "adopt" для  T[] ...


- Level-03 ------------------------------------------------------------

  - local_objects

    - Поддержка "adopt" для  *_VTAG ...

    - Поддержка ссылок на объекты:

      - &T -> T,  NOP для объектов

      - T -> &T,  (?) для объектов

    - ... ??? ...


  - coercions

    - ...




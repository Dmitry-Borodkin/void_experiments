{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("llvm-c/Core.void");
}

{   v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
table62: &char[62] := v_undef();

{   p: &*char := table62;

    for (c: &char := '0'; c <= '9'; ++c)  *p++ := c;
    for (c: &char := 'A'; c <= 'Z'; ++c)  *p++ := c;
    for (c: &char := 'a'; c <= 'z'; ++c)  *p++ := c;
}

//---------------------------------------------------------------------
byte = uint(8);

exit: (int) -> void;


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
struct myz_ctx_t
{
    next_in:    *const byte;        //- "next_in"
    avail_in:   size_t;             //- "avail_in"

    next_out:   *byte;              //- "next_out"
    avail_out:  size_t;             //- "avail_out"

    //-------------------------------------------------------------
    remain_in:  uint(8);            //- Input bits remain (out of 8)
    buffer_in:  uint(8);            //- Input bits buffer

    remain_out: uint(8);            //- Output bits remain (out of 8)
    buffer_out: uint(8);            //- Output bits buffer

    //-------------------------------------------------------------
    check_in: *((&myz_ctx_t) -> bool);
    aux_in:   *void;

    check_out: *((&myz_ctx_t) -> bool);
    aux_out:   *void;

    //- ...

};


//---------------------------------------------------------------------
//- Get one byte
//---------------------------------------------------------------------
myz_get_byte: (ctx: &myz_ctx_t) -> byte
{
    if (ctx.avail_in == 0  &&  !(ctx.check_in  &&  ctx.check_in(ctx)))
    {
        printf("\nError: input empty\n");

        exit(-1);
    }

    //- assert(ctx.avail_in != 0);

    ctx.avail_in--;

    v_return(*ctx.next_in++);
}

//---------------------------------------------------------------------
//- Get one bit
//---------------------------------------------------------------------
myz_get_bit: (ctx: &myz_ctx_t) -> bool
{
    if (ctx.remain_in == 0)
    {
        ctx.buffer_in := myz_get_byte(ctx);
        ctx.remain_in := 8;
    }

    b = ctx.buffer_in;

    r = b & 1;

    b >>= 1;

    ctx.remain_in -= 1;

    v_return((r: bool));
}

//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
read_bits: (ctx: &myz_ctx_t, bits: int) -> unsigned
{
    code: &unsigned := 0;

    for (i: &int := 0; i < bits; ++i)
    {
        b = myz_get_bit(ctx);

        code |= (b: unsigned) << i;
    }

    v_return(code);
}

//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
check_eod: (ctx: &myz_ctx_t) -> bool
{
    v_return(ctx.avail_in == 0  &&  ctx.buffer_in == 1);
}


//---------------------------------------------------------------------
//- Put one byte
//---------------------------------------------------------------------
myz_put_byte: (ctx: &myz_ctx_t, b: byte) -> void
{
    if (ctx.avail_out == 0  &&  !(ctx.check_out  &&  ctx.check_out(ctx)))
    {
        printf("\nError: output full\n");

        exit(-1);
    }

    //- assert(ctx.avail_out != 0);

    ctx.avail_out--;

    *ctx.next_out++ := b;
}

//---------------------------------------------------------------------
//- Put one bit
//---------------------------------------------------------------------
myz_put_bit: (ctx: &myz_ctx_t, bit: bool) -> void
{
    b = ctx.buffer_out;
    n = ctx.remain_out;

    b |= bit << n;

    n += 1;

    if (n == 8)
    {
        myz_put_byte(ctx, b);

        b := 0;
        n := 0;
    }
}

//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
write_bits: (ctx: &myz_ctx_t, code: unsigned, bits: int) -> void
{
    code: &unsigned := code;

    for (i: &int := 0; i < bits; ++i)
    {
        myz_put_bit(ctx, (code & 1 : bool));

        code >>= 1;
    }
}

//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
write_eod: (ctx: &myz_ctx_t) -> void
{
    write_bits(ctx, 1, 8);
}


//---------------------------------------------------------------------
//- Dictionaries ...
//---------------------------------------------------------------------
struct myz_enc_t
{
    next: unsigned[256];
};

struct dict_enc_t
{
    list: v_ast_generic_list_t;
};


//---------------------------------------------------------------------
struct myz_dec_t
{
    prev: unsigned;
    back: unsigned;
    c: byte;
};

struct dict_dec_t
{
    list: v_ast_generic_list_t;
};


//---------------------------------------------------------------------
{   enc_size_v = LLVMSizeOf(v_type_get_llvm_type(myz_enc_t));
    dec_size_v = LLVMSizeOf(v_type_get_llvm_type(myz_dec_t));

    v_add_constant("myz_enc_t_size", size_t, enc_size_v);
    v_add_constant("myz_dec_t_size", size_t, dec_size_v);
}


//---------------------------------------------------------------------
dict_enc_initialize: (p: *dict_enc_t, n: int) -> void
{
    for (i: &int := 0; i < n; ++i)
    {
        v_initialize(&p[i].list);

        v_make_list_nil(&p[i].list, 0);
    }
}

//---------------------------------------------------------------------
dict_enc_terminate: (p: *dict_enc_t, n: int) -> void
{
    for (i: &int := 0; i < n; ++i)  v_terminate(&p[i].list);
}

//---------------------------------------------------------------------
dict_enc_expand: (dict: &dict_enc_t) -> &myz_enc_t
{
    item = v_alloca(v_ast_base_t);
    v_initialize(item);
    defer v_terminate(item);

    v_ast_make_generic(item, 0, myz_enc_t_size);

    v_list_append(&dict.list, &dict.list, item);

    void_obj = v_ast_generic_get_object(item);

    obj = (void_obj: *myz_enc_t);

    *obj := 0;

    v_return(*obj);
}

//---------------------------------------------------------------------
dict_enc_at: (dict: &dict_enc_t, i: int) -> &myz_enc_t
{
    void_obj = v_ast_generic_get_object(v_list_get_item(&dict.list, i));

    obj = (void_obj: *myz_enc_t);

    v_return(*obj);
}

//---------------------------------------------------------------------
{   v_util_register_initialize_impl(dict_enc_t, "dict_enc_initialize");
    v_util_register_terminate_impl( dict_enc_t, "dict_enc_terminate");

    dict_enc_ref = v_reference_type(dict_enc_t, 0);

    q = v_quark_from_string;

    v_util_function_dict_set(q(".expand()"), dict_enc_ref, "dict_enc_expand");

    v_util_function_dict_set(q("op_postfix_index"), dict_enc_ref, "dict_enc_at");
}


//---------------------------------------------------------------------
dict_dec_initialize: (p: *dict_dec_t, n: int) -> void
{
    for (i: &int := 0; i < n; ++i)
    {
        v_initialize(&p[i].list);

        v_make_list_nil(&p[i].list, 0);
    }
}

//---------------------------------------------------------------------
dict_dec_terminate: (p: *dict_dec_t, n: int) -> void
{
    for (i: &int := 0; i < n; ++i)  v_terminate(&p[i].list);
}

//---------------------------------------------------------------------
dict_dec_expand: (dict: &dict_dec_t) -> &myz_dec_t
{
    item = v_alloca(v_ast_base_t);
    v_initialize(item);
    defer v_terminate(item);

    v_ast_make_generic(item, 0, myz_dec_t_size);

    v_list_append(&dict.list, &dict.list, item);

    void_obj = v_ast_generic_get_object(item);

    obj = (void_obj: *myz_dec_t);

    *obj := 0;

    v_return(*obj);
}

//---------------------------------------------------------------------
dict_dec_at: (dict: &dict_dec_t, i: int) -> &myz_dec_t
{
    void_obj = v_ast_generic_get_object(v_list_get_item(&dict.list, i));

    obj = (void_obj: *myz_dec_t);

    v_return(*obj);
}

//---------------------------------------------------------------------
{   v_util_register_initialize_impl(dict_dec_t, "dict_dec_initialize");
    v_util_register_terminate_impl( dict_dec_t, "dict_dec_terminate");

    dict_dec_ref = v_reference_type(dict_dec_t, 0);

    q = v_quark_from_string;

    v_util_function_dict_set(q(".expand()"), dict_dec_ref, "dict_dec_expand");

    v_util_function_dict_set(q("op_postfix_index"), dict_dec_ref, "dict_dec_at");
}


//---------------------------------------------------------------------
//- Encoding ...
//---------------------------------------------------------------------
myz_encode: (ctx: &myz_ctx_t) -> void
{
    bits: &unsigned := 9;

    next_code:  &unsigned := 256;
    next_shift: &unsigned := 512;


    dict: &dict_enc_t := v_undef();
    v_initialize(&dict);
    defer v_terminate(&dict);

    for (i: &int := 0; i < 256; ++i)  dict.expand();


    code: &unsigned := myz_get_byte(ctx);

    for (i: &int := 1; ctx.avail_in || (ctx.check_in && ctx.check_in(ctx)); ++i)
    {
        c = myz_get_byte(ctx);

        if (next = dict[code].next[c])
        {
            code := next;

            v_continue();
        }
        else
        {
            write_bits(ctx, code, bits);

            dict.expand();

            next := next_code++;

            code := c;
        }

        if (next_code == next_shift)
        {
            bits++;

            next_shift *= 2;
        }
    }

    write_bits(ctx, code, bits);
    write_eod(ctx);

    if (ctx.check_out)  ctx.check_out(ctx);

    printf("next_code: %d\n", next_code);
}


//---------------------------------------------------------------------
//- Decoding ...
//---------------------------------------------------------------------
myz_decode: (ctx: &myz_ctx_t) -> void
{
    bits: &unsigned := 9;

    next_code:  &unsigned := 256;
    next_shift: &unsigned := 512;


    dict: &dict_dec_t := v_undef();
    v_initialize(&dict);
    defer v_terminate(&dict);

    for (i: &int := 0; i < 256; ++i)  dict.expand().c := (i: byte);


    while (!check_eod(ctx))
    {
        c: &unsigned := read_bits(ctx, bits);

        if (c >= next_code)
        {
            printf("\nError: bad sequence\n");

            exit(-1);
        }

        dict.expand().prev := c;

        while (c > 255)
        {
            t = dict[c].prev;

            dict[t].back := c;

            c := t;
        }

        dict[next_code-1].c := (c: byte);

        while (it = dict[c], it.back)
        {
            myz_put_byte(ctx, it.c);

            c := it.back;

            it.back := 0;
        }

        myz_put_byte(ctx, dict[c].c);

        if (++next_code >= next_shift)
        {
            ++bits;

            next_shift *= 2;
        }
    }

    if (ctx.check_out)  ctx.check_out(ctx);

    printf("next_code: %d\n", next_code);
}








//=====================================================================
strlen: (*char) -> size_t;
strcmp: (*char, *char) -> int;


//---------------------------------------------------------------------
my_source: &char[] :=
""""Превед!", v_struct({int(64)[2]})""";

//"""*((*v_struct("voidc_visitor_t"), *void, *v_struct("v_ast_expr_t"), *v_struct("v_type_t"), *v_struct("struct.LLVMOpaqueValue")) -> void)""";

//"""
//std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<ast_template_generic_data_t<ast_expr_base_data_t> const, std::allocator<void>, (__gnu_cxx::_Lock_policy)2> > > std::__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<ast_template_generic_data_t<ast_expr_base_data_t> const, std::allocator<void>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<ast_template_generic_data_t<ast_expr_base_data_t> const, std::allocator<void>, (__gnu_cxx::_Lock_policy)2> >&)
//""";

{
    BUFSIZE = 1<<16;

    buf = v_malloc(byte, BUFSIZE);


    ctx: &myz_ctx_t := 0;

    ctx.next_in  := my_source;
    ctx.avail_in := strlen(my_source);

    printf("sz: %d\n", (ctx.avail_in : int));

    ctx.next_out  := buf;
    ctx.avail_out := BUFSIZE;


    //------------------------------
    myz_encode(ctx);
    //------------------------------


    n = BUFSIZE - ctx.avail_out;

    printf("n: %d, %g\n", (n: int), n*11.0/8);

    b64: &uint64_t := 0;

    c: &int := 0;

    for (i: &int := 0; i < n; ++i)
    {
        b64 |= (buf[i]: uint64_t) << (i%8)*8;

        if (i%8 == 7  ||  i == n-1)
        {
            for (j: &int := 0; j < 11; ++j)
            {
                d = b64 % 62;

                printf("%c", table62[d]);

                if (c++ % 100 == 99)  printf("\n");

                b64 /= 62;

                if (b64 == 0  &&  i == n-1)  v_break();
            }
        }
    }

    printf("\n");


    buf2 = v_malloc(byte, BUFSIZE);

    ctx.next_in  := buf;
    ctx.avail_in := n;

    ctx.next_out  := buf2;
    ctx.avail_out := BUFSIZE;


    //------------------------------
    myz_decode(ctx);
    //------------------------------


    m = BUFSIZE - ctx.avail_out;

    printf("m: %d\n", (m: int));

    *ctx.next_out := 0;

    printf("strcmp: %d\n", strcmp(my_source, buf2));


    v_free(buf2);
    v_free(buf);
}





{   v_import("level-00");
    v_import("level-01");

    v_import("printf.void");
}

{   v_enable_level_01(); }


//---------------------------------------------------------------------
mk_stmt_if_then_else_2_grammar_action: (ret: v_util_std_any_ptr, any: v_util_std_any_ptr, size_t) -> void
{
    cond = v_std_any_get_pointer(v_ast_opaque_stmt_list_sptr, any+0);
    tstm = v_std_any_get_pointer(v_ast_opaque_stmt_sptr,      any+1);
    estm = v_std_any_get_pointer(v_ast_opaque_stmt_sptr,      any+2);

    //- {   <cond>...
    //-
    //-     if (<cond>)     //- Kinda...
    //-     <tstm>
    //-     else <estm>
    //- }


    cond_len: &int := v_list_get_size(cond);

    cstm = v_alloca(v_ast_opaque_stmt_sptr);
    v_initialize(cstm);
    defer v_terminate(cstm);

    v_list_get_items(cond, cond_len-1, cstm);


    cexp = v_alloca(v_ast_opaque_expr_sptr);
    v_initialize(cexp);
    defer v_terminate(cexp);

    name = v_ast_stmt_get_name(cstm);

    if (name[0])
    {
        v_ast_make_expr_identifier(cexp, name);
    }
    else
    {
        v_ast_stmt_get_expr(cstm, cexp);

        --cond_len;
    }


    stmp_len = cond_len + 1;


    stmp = v_alloca(v_ast_opaque_stmt_sptr, stmp_len);
    v_initialize(stmp, stmp_len);
    defer v_terminate(stmp, stmp_len);


    //- stmp_cond+0 - if

    stmp_cond = stmp + cond_len;


    else_stmt = stmp_cond+0;    //- Temporary...

    if (estm)   v_copy(else_stmt, estm);

    v_ast_make_stmt_if_then_else(stmp_cond+0, cexp, tstm, else_stmt);


    v_list_get_items(cond, 0, stmp+0, cond_len);

    slst = v_alloca(v_ast_opaque_stmt_list_sptr);
    v_initialize(slst);
    defer v_terminate(slst);

    v_make_list(slst, stmp+0, cond_len+1);

    v_ast_make_stmt_block(stmp+0, slst, false);


    v_std_any_set_pointer(ret, stmp+0);
}


//---------------------------------------------------------------------
mk_stmt_switch_2_grammar_action: (ret: v_util_std_any_ptr, any: v_util_std_any_ptr, size_t) -> void
{
    estm = v_std_any_get_pointer(v_ast_opaque_stmt_list_sptr,    any+0);
    glst = v_std_any_get_pointer(v_ast_opaque_generic_list_sptr, any+1);

    //- {   <estm>...
    //-
    //-     switch (<estm>)     //- Kinda...
    //-     <glst>
    //- }


    estm_len: &int := v_list_get_size(estm);

    etmp = v_alloca(v_ast_opaque_expr_sptr);
    v_initialize(etmp);
    defer v_terminate(etmp);

    {   stmt = v_alloca(v_ast_opaque_stmt_sptr);
        v_initialize(stmt);
        defer v_terminate(stmt);

        v_list_get_items(estm, estm_len-1, stmt);

        name = v_ast_stmt_get_name(stmt);

        if (name[0])
        {
            v_ast_make_expr_identifier(etmp, name);
        }
        else
        {
            v_ast_stmt_get_expr(stmt, etmp);

            --estm_len;
        }
    }


    stmp_len = estm_len + 1;


    stmp = v_alloca(v_ast_opaque_stmt_sptr, stmp_len);
    v_initialize(stmp, stmp_len);
    defer v_terminate(stmp, stmp_len);


    //- stmp_estm+0 - switch

    stmp_estm = stmp + estm_len;


    v_ast_make_stmt_switch(stmp_estm+0, etmp, glst);


    if (estm_len)   v_list_get_items(estm, 0, stmp+0, estm_len);        //- if?


    slst = v_alloca(v_ast_opaque_stmt_list_sptr);
    v_initialize(slst);
    defer v_terminate(slst);

    v_make_list(slst, stmp+0, stmp_len);

    v_ast_make_stmt_block(stmp+0, slst, false);


    v_std_any_set_pointer(ret, stmp+0);
}


//---------------------------------------------------------------------
{
    gr0 = v_alloca(v_peg_opaque_grammar_sptr);
    v_initialize(gr0);
    defer v_terminate(gr0);

    v_peg_get_grammar(gr0);

    grammar gr0
    {
    actions:
        mk_stmt_if_then_else_2 = mk_stmt_if_then_else_2_grammar_action;
        mk_stmt_switch_2       = mk_stmt_switch_2_grammar_action;

    parsers:
        simple_stmt = i:identifier _':'_ t: expr _'='_ v:expr       { mk_stmt_val_defn(i, t, v) }
                    / i:identifier _':'_ tv: expr                   { mk_stmt_var_defn(i, tv) }         //- Sic!!!
                    / i:identifier _ '=' _ v:expr                   { mk_stmt(i, v) }
                    / v:expr                                        { mk_stmt(0, v) }
                    ;

        simple_stmt_list_lr = l:simple_stmt_list_lr _','_ s:simple_stmt     { mk_stmt_list(l, s) }
                            / s:simple_stmt                                 { mk_stmt_list(0, s) }
                            ;

        simple_stmt_list_lr is left-recursive;


        stmt_if_then_else =+ "if" _'('_ c:simple_stmt_list_lr _')'_ t:stmt
                             e:(_ "else" !ident_cont _ stmt)?           { mk_stmt_if_then_else_2(c, t, e) };


        stmt_switch =+ "switch" _'('_ e:simple_stmt_list_lr _')'_
                       '{'_ l:case_list _'}'    { mk_stmt_switch_2(e, l) };
    }

    v_peg_set_grammar(gr0);
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    i: &int := 0;

    loop
    {
        if (i >= 10) v_break();

        if (v: int = i < 5) printf("T %d %d\n", v, i);
        else                printf("F %d %d\n", v, i);

        ++i;
    }

}

//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    printf("\n");

    i: &int := 0;

    loop
    {
        if (i >= 20) v_break();

        switch(f3: int = i%3==0, f5: int = i%5==0, ff = f3+f5)
        {
        case 0:     printf("%d\n", i);  v_break();

        case 1:     if (f3) printf("Fiz\n"); else printf("Buz\n"); v_break();

        case 2:     printf("FizBuz\n"); v_break();
        }

        ++i;
    }

}



{   v_import("voidc_target.void");
    v_import("voidc_types.void");
    v_import("voidc_util.void");

    v_import("function_hack.void");
    v_import("memory.void");
    v_import("if_then_else.void");
    v_import("block.void");
    v_import("loop.void");
    v_import("defer.void");
    v_import("definitions.void");

    v_import("printf.void");
}

{
    voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
    voidc_enable_statement_loop();
    voidc_enable_statement_defer();
    voidc_enable_definitions();
}


//---------------------------------------------------------------------
{   FILE = v_struct_type_named("FILE");

    v_export_type("FILE", FILE);
}

stdout: &*FILE;
stderr: &*FILE;

fflush: (*FILE) -> int;

log: (float(64)) -> float(64);


//---------------------------------------------------------------------
//N = 256;
  N = 65536;
//N = 8388608;


////---------------------------------------------------------------------
////{ v_debug_print_module(1); }
//
//my_div: (a: uint(N), b: uint(N)) -> uint(N)
//{
////void udiv256(I n, I d, I* q) {
////    *q = 0;
////    while (n >= d) {
////        I i = 0, d_t = d;
////        while (n >= (d_t << 1) && ++i)
////            d_t <<= 1;
////        *q |= (I)1 << i;
////        n -= d_t;
////    }
////}
//
//    n: &uint(N+1) := a;
//    d: &uint(N) := b;
//
//    q: &uint(N) := 0;
//
//    loop
//    {
//        if (n < d)  v_break();
//
//        i:   &uint(N) := 0;
//        d_t: &uint(N+1) := d;
//
//        loop
//        {
//            if (!(n >= (d_t << 1)  &&  ++i)) v_break();
//
//            d_t <<= 1;
//        }
//
//        q |= (1 << i);
//
//        n -= d_t;
//    }
//
//    v_return(q);
//}
//
//my_divrem: (a: &uint(N), b: uint(N)) -> uint(N)
//{
//    a1 = my_div(a, b);
//
//    r = a - a1*b;
//
//    a := a1;
//
//    v_return(r);
//}


//---------------------------------------------------------------------
small_divrem: (a: &uint(N), d: uint(32)) -> uint(32)
{
    //- little endian
    //- N % 32 == 0

    K = N / 32;

    A = *(&a : *uint(32)[K]);

    k: &int := K-1;

    v: &uint(64) := 0;

    loop
    {
        if (k < 0) v_break();

        v := (v << 32) | A[k];

        u = v / d;
        r = v % d;

        A[k] := (u : uint(32));

        v := r;

        --k;
    }

    v_return((v : uint(32)));
}


//---------------------------------------------------------------------
//{
//    printf("---\n");
//    fflush(stdout);
//}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
//    printf("---\n");
//    fflush(stdout);

    v: uint(N) = -1;

    len = (N*log(2)/log(10)+1 : int);

    printf("len: %d\n", len);

    s = v_malloc(int(8), len);
    defer v_mfree(s);

    p: &*int(8) := s;

    t: &uint(N) := v;

    loop
    {
        if (t == 0) v_break();

//        d  = t % 10;
//        t := t / 10;

//      d = my_divrem(t, 10);

        d = small_divrem(t, 10);

        *p++ := (d : int(8));
    }

    --p;

    l: &int := -1;

    loop
    {
        if (++l == 100)
        {
            printf("\\\n");

            l := 0;
        }

        printf("%d", *p);

        if (p <= s) v_break();

        --p;
    }

    printf("\n");
}




{ v_import("mainline.void"); }
{ v_enable_mainline(); }

{   v_import("llvm-c/Core.void");
    v_import("llvm-c/Support.void");

    v_import("cstdio.void");
    v_import("type_traits.void");
}



//=====================================================================
//{ v_debug_print_module(1); }
//---------------------------------------------------------------------
{

#if (v_defined(_WIN32))

    libname = v_malloc(char, 1024);
    defer v_free(libname);

    {   p = popen("bash -c \"dlltool -I $(pkg-config --variable=libdir gmp)/libgmp.dll.a\"", "r");
        defer pclose(p);

        fscanf(p, "%1023s", libname);
    }

#else

    libname = "libgmp.so";

#endif

    ok = LLVMLoadLibraryPermanently(libname);

//  printf("ok: %d\n", ok);
}


//=====================================================================
ulong = uint(long.as_integer.width);

double = float(64);

//---------------------------------------------------------------------
struct mpz_t
{
    _mp_alloc: int;
    _mp_size:  int;

    _mp_d: *void;
};


//---------------------------------------------------------------------
//- <x86_64-pc-linux-gnu/gmp.h>
//---------------------------------------------------------------------
__gmpz_init: (*mpz_t) ~> void;
__gmpz_clear: (*mpz_t) ~> void;

//---------------------------------------------------------------------
__gmpz_set: (*mpz_t, *const mpz_t) ~> void;
__gmpz_set_ui: (*mpz_t, ulong) ~> void;
__gmpz_set_si: (*mpz_t, long) ~> void;
__gmpz_set_d: (*mpz_t, double) ~> void;
__gmpz_set_str: (*mpz_t, *const char, int) ~> int;

//---------------------------------------------------------------------
__gmpz_init_set: (*mpz_t, *const mpz_t) ~> void;
__gmpz_init_set_ui: (*mpz_t, ulong) ~> void;
__gmpz_init_set_si: (*mpz_t, long) ~> void;
__gmpz_init_set_d: (*mpz_t, double) ~> void;
__gmpz_init_set_str: (*mpz_t, *const char, int) ~> int;

//---------------------------------------------------------------------
__gmpz_import: (*mpz_t, size_t, int, size_t, int, size_t, *const void) ~> void;

//---------------------------------------------------------------------
__gmpz_add: (*mpz_t, *const mpz_t, *const mpz_t) ~> void;
__gmpz_sub: (*mpz_t, *const mpz_t, *const mpz_t) ~> void;
__gmpz_mul: (*mpz_t, *const mpz_t, *const mpz_t) ~> void;
__gmpz_tdiv_q: (*mpz_t, *const mpz_t, *const mpz_t) ~> void;
__gmpz_tdiv_r: (*mpz_t, *const mpz_t, *const mpz_t) ~> void;
__gmpz_and: (*mpz_t, *const mpz_t, *const mpz_t) ~> void;
__gmpz_ior: (*mpz_t, *const mpz_t, *const mpz_t) ~> void;
__gmpz_xor: (*mpz_t, *const mpz_t, *const mpz_t) ~> void;
__gmpz_com: (*mpz_t, *const mpz_t) ~> void;
__gmpz_neg: (*mpz_t, *const mpz_t) ~> void;
__gmpz_abs: (*mpz_t, *const mpz_t) ~> void;         //- ?

//---------------------------------------------------------------------
__gmpz_mul_2exp: (*mpz_t, *const mpz_t, ulong) ~> void;
__gmpz_fdiv_q_2exp: (*mpz_t, *const mpz_t, ulong) ~> void;

//---------------------------------------------------------------------
__gmpz_cmp: (*const mpz_t, *const mpz_t) ~> int;


//---------------------------------------------------------------------
inlinehint
(v_initialize(_)): (p: *mpz_t, n: size_t) ~> void
{
    for (i: &size_t := 0; i < n; ++i)  __gmpz_init(p+i);
}

inlinehint
(v_terminate(_)): (p: *mpz_t, n: size_t) ~> void
{
    for (i: &size_t := 0; i < n; ++i)  __gmpz_clear(p+i);
}

//---------------------------------------------------------------------
inlinehint
(v_copy(_)): (d: *mpz_t, s: *const mpz_t, n: size_t) ~> void
{
    for (i: &size_t := 0; i < n; ++i)  __gmpz_set(d+i, s+i);
}


////---------------------------------------------------------------------
////- ...
////---------------------------------------------------------------------
//literal_integer_ctx_t = struct
//{
//    fun: *((*void, *voidc_visitor_t, *v_ast_base_t) ~> void);
//
//    aux: *void;
//};
//
////---------------------------------------------------------------------
//my_literal_integer_intrinsic: (aux: *void, vis: *voidc_visitor_t,
//                               self: *v_ast_base_t) ~> void
//{
//    ttag = v_get_result_type();
//    vtag = v_get_result_value();
//
//    v_set_result_type(INVIOLABLE_TAG);
//    v_set_result_value(0);
//
//    ctx = *(aux: *literal_integer_ctx_t);
//
//    ctx.fun(ctx.aux, vis, self);
//
//    t = v_get_result_type();
//    v = v_get_result_value();
//
//    v_set_result_type(ttag);
//    v_set_result_value(vtag);
//
//    v_adopt_result(t, v);
//}
//
////---------------------------------------------------------------------
//literal_integer_ctx: &literal_integer_ctx_t := undef;
//
//{   q = v_quark_from_string("v.literal.integer");
//
//    void_fun = v_get_intrinsic_q(q, &literal_integer_ctx.aux);
//
//    literal_integer_ctx.fun := (void_fun: *((*void, *voidc_visitor_t, *v_ast_base_t) ~> void));
//
//    v_add_intrinsic_q(q, my_literal_integer_intrinsic, &literal_integer_ctx);
//}


////---------------------------------------------------------------------
////- ...
////---------------------------------------------------------------------
//expr_integer_ctx_t = struct
//{
//    fun: *((*void, *voidc_visitor_t, *v_ast_base_t) ~> void);
//
//    aux: *void;
//};
//
////---------------------------------------------------------------------
//my_compile_expr_integer: (aux: *void, vis: *voidc_visitor_t,
//                          self: *v_ast_base_t) ~> void
//{
//    ttag = v_get_result_type();
//
//    if (ttag != v_find_type("mpz_t"))
//    {
//        ctx = *(aux: *expr_integer_ctx_t);
//
//        ctx.fun(ctx.aux, vis, self);
//
//        return;
//    }
//
//    vtag = v_get_result_value();
//
//    vr = v_obtain_special_result_value(vis, ttag);
//
//    expr: &v_ast_expr_t := {};
//
//    v_ast_make_expr_compiled(&expr, v_pointer_type(ttag, 0), vr);
//
//    list: &v_ast_expr_list_t := {};
//
//    v_make_list(&list, &expr);
//
//    v_list_append(&list, &list, (self: *v_ast_expr_t));
//
//    v_ast_make_expr_identifier(&expr, "__gmpz_set_si");
//
//    v_ast_make_expr_call(&expr, &expr, &list);
//
//    v_set_result_type(INVIOLABLE_TAG);
//    v_set_result_value(0);
//
//    v_ast_accept_visitor(&expr, vis);
//
//    v_set_result_type(ttag);
//    v_set_result_value(vtag);
//
//    v_adopt_result(ttag, vr);
//}
//
////---------------------------------------------------------------------
//expr_integer_ctx: &expr_integer_ctx_t := undef;
//
//{   q = v_quark_from_string("expr_integer");
//
//    vis = v_get_compiler();
//
//    expr_integer_ctx.fun := voidc_visitor_get_method(vis, q, &expr_integer_ctx.aux);
//
//    voidc_visitor_set_method(vis, vis, q, my_compile_expr_integer, &expr_integer_ctx);
//}


//---------------------------------------------------------------------
#define gmpz_adopt_to_mpz: (_n) ~> mpz_t  =
block
{
    n = _n;
    t = v_typeof(n);

    #if (t.is_reference)

        n = v_load(&n);

        t = t.as_reference.element_type;

    #endif

    brk = v_get_break_value();

    #if (t.is_floating_point)

        __gmpz_set_d(&brk, n);

    #elif (t.is_integer)

        t = t.as_integer;

        w = t.width;

        #if (w <= long.as_integer.width)

            #if (t.is_signed) __gmpz_set_si(&brk, n);
            #else             __gmpz_set_ui(&brk, n);
            #endif

        #else

            __gmpz_import(&brk, 1, 1, (w+7)/8, 0, (8-w%8)%8, &n);

            #if (t.is_signed)

                if (n < 0)
                {
                    tmp = v_alloca(mpz_t);

                    __gmpz_init_set_ui(tmp, 1);

                    __gmpz_set_ui(tmp, 1);

                    __gmpz_mul_2exp(tmp, tmp, w);

                    __gmpz_sub(&brk, &brk, tmp);

                    __gmpz_clear(tmp);
                }

            #endif

        #endif

    #else

        #error ("!!!")

    #endif
};

//---------------------------------------------------------------------
//private
try_to_adopt_ctx_t = struct
{
    fun: *((*void, *v_type_t, LLVMValueRef) ~> bool);
    aux: *void;
};

//---------------------------------------------------------------------
pr_type: (t: *v_type_t) ~> void
{
    str: &v_std_string_t := {};

    v_std_string_set(&str, "");

    voidc_internal_std_string_append_type(&str, t);

    printf("%s\n", v_std_string_get(&str));
}

//private
try_to_adopt_to_mpz: (aux: *void, t0: *v_type_t, v0: LLVMValueRef) ~> bool
{
//printf("try_to_adopt_to_mpz: start\n");
//defer printf("try_to_adopt_to_mpz: stop\n");

    ctx = *(aux: *try_to_adopt_ctx_t);

    mpz_type = v_find_type("mpz_t");

    block
    {
        t1 = v_get_result_type();

        if (t1 == INVIOLABLE_TAG)  break;
        if (t1 == UNREFERENCE_TAG) break;

        check: &bool := true;

        block
        {
            if (t1 == mpz_type) break;

            if (v_type_is_reference(t1)  &&  v_type_refptr_get_element_type(t1) == mpz_type)  break;

            check := false;
        }

        if (!check)  break;

        block
        {
            tt: &*v_type_t := t0;

            if (v_type_is_reference(t0))  tt := v_type_refptr_get_element_type(t0);

            if (v_type_is_floating_point(tt)  &&  v_type_floating_point_get_width(tt) <= 64)  break;

            if (v_type_is_integer(tt))  break;

            check := false;
        }

        if (!check)  break;

        //- Got it...

        expr: &v_ast_expr_t      := {};
        list: &v_ast_expr_list_t := {};

        v_ast_make_expr_compiled(&expr, t0, v0);

        v_make_list(&list, &expr);

        v_ast_make_expr_identifier(&expr, "gmpz_adopt_to_mpz");

        v_ast_make_expr_call(&expr, &expr, &list);

        v_ast_accept_visitor(&expr, v_get_compiler());

        return  true;
    }

    //- Default treatment...

    return  ctx.fun(ctx.aux, t0, v0);
}

//---------------------------------------------------------------------
try_to_adopt_ctx: &try_to_adopt_ctx_t := undef;

{   try_to_adopt_ctx.fun := v_get_try_to_adopt_hook(&try_to_adopt_ctx.aux);

    v_set_try_to_adopt_hook(try_to_adopt_to_mpz, &try_to_adopt_ctx);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
#define
gmpz_binary_helper: (f, a, b)  =  f(&v_get_return_value(), a, b);

#define
gmpz_unary_helper: (f, a)  =  f(&v_get_return_value(), a);


//---------------------------------------------------------------------
alwaysinline
(_+_): (a: mpz_t, b: mpz_t) ~> mpz_t  { gmpz_binary_helper(__gmpz_add, &a, &b); }

alwaysinline
(_+__): (a: mpz_t, b: mpz_t) ~> mpz_t  =  a + b;

//---------------------------------------------------------------------
alwaysinline
(_-_): (a: mpz_t, b: mpz_t) ~> mpz_t  { gmpz_binary_helper(__gmpz_sub, &a, &b); }

alwaysinline
(_-__): (a: mpz_t, b: mpz_t) ~> mpz_t  =  a - b;

//---------------------------------------------------------------------
alwaysinline
(_*_): (a: mpz_t, b: mpz_t) ~> mpz_t  { gmpz_binary_helper(__gmpz_mul, &a, &b); }

alwaysinline
(_*__): (a: mpz_t, b: mpz_t) ~> mpz_t  =  a * b;

//---------------------------------------------------------------------
alwaysinline
(_/_): (a: mpz_t, b: mpz_t) ~> mpz_t  { gmpz_binary_helper(__gmpz_tdiv_q, &a, &b); }

alwaysinline
(_/__): (a: mpz_t, b: mpz_t) ~> mpz_t  =  a / b;

//---------------------------------------------------------------------
alwaysinline
(_%_): (a: mpz_t, b: mpz_t) ~> mpz_t  { gmpz_binary_helper(__gmpz_tdiv_r, &a, &b); }

alwaysinline
(_%__): (a: mpz_t, b: mpz_t) ~> mpz_t  =  a % b;

//---------------------------------------------------------------------
alwaysinline
(_&_): (a: mpz_t, b: mpz_t) ~> mpz_t  { gmpz_binary_helper(__gmpz_and, &a, &b); }

alwaysinline
(_&__): (a: mpz_t, b: mpz_t) ~> mpz_t  =  a & b;

//---------------------------------------------------------------------
alwaysinline
(_|_): (a: mpz_t, b: mpz_t) ~> mpz_t  { gmpz_binary_helper(__gmpz_ior, &a, &b); }

alwaysinline
(_|__): (a: mpz_t, b: mpz_t) ~> mpz_t  =  a | b;

//---------------------------------------------------------------------
alwaysinline
(_^_): (a: mpz_t, b: mpz_t) ~> mpz_t  { gmpz_binary_helper(__gmpz_xor, &a, &b); }

alwaysinline
(_^__): (a: mpz_t, b: mpz_t) ~> mpz_t  =  a ^ b;

//---------------------------------------------------------------------
alwaysinline
(_<<_): (a: mpz_t, u: ulong) ~> mpz_t  { gmpz_binary_helper(__gmpz_mul_2exp, &a, u); }

//---------------------------------------------------------------------
alwaysinline
(_>>_): (a: mpz_t, u: ulong) ~> mpz_t  { gmpz_binary_helper(__gmpz_fdiv_q_2exp, &a, u); }

//---------------------------------------------------------------------
alwaysinline
(~_): (a: mpz_t) ~> mpz_t  { gmpz_unary_helper(__gmpz_com, &a); }

//---------------------------------------------------------------------
alwaysinline
(-_): (a: mpz_t) ~> mpz_t  { gmpz_unary_helper(__gmpz_neg, &a); }

//---------------------------------------------------------------------
alwaysinline
(_==_): (a: mpz_t, b: mpz_t) ~> bool  =  __gmpz_cmp(&a, &b) == 0;

alwaysinline
(_==__): (a: mpz_t, b: mpz_t) ~> bool  =  a == b;

//---------------------------------------------------------------------
alwaysinline
(_!=_): (a: mpz_t, b: mpz_t) ~> bool  =  __gmpz_cmp(&a, &b) != 0;

alwaysinline
(_!=__): (a: mpz_t, b: mpz_t) ~> bool  =  a != b;

//---------------------------------------------------------------------
alwaysinline
(_<_): (a: mpz_t, b: mpz_t) ~> bool  =  __gmpz_cmp(&a, &b) < 0;

alwaysinline
(_<__): (a: mpz_t, b: mpz_t) ~> bool  =  a < b;

//---------------------------------------------------------------------
alwaysinline
(_<=_): (a: mpz_t, b: mpz_t) ~> bool  =  __gmpz_cmp(&a, &b) <= 0;

alwaysinline
(_<=__): (a: mpz_t, b: mpz_t) ~> bool  =  a <= b;

//---------------------------------------------------------------------
alwaysinline
(_>_): (a: mpz_t, b: mpz_t) ~> bool  =  __gmpz_cmp(&a, &b) > 0;

alwaysinline
(_>__): (a: mpz_t, b: mpz_t) ~> bool  =  a > b;

//---------------------------------------------------------------------
alwaysinline
(_>=_): (a: mpz_t, b: mpz_t) ~> bool  =  __gmpz_cmp(&a, &b) >= 0;

alwaysinline
(_>=__): (a: mpz_t, b: mpz_t) ~> bool  =  a >= b;


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
alwaysinline
(_:=_): (v: &mpz_t, x: mpz_t) ~> &mpz_t  =  { v_copy(&v, &x); v };

alwaysinline (_+=_):  (v: &mpz_t, x: mpz_t) ~> &mpz_t  =  v := v + x;
alwaysinline (_-=_):  (v: &mpz_t, x: mpz_t) ~> &mpz_t  =  v := v - x;
alwaysinline (_*=_):  (v: &mpz_t, x: mpz_t) ~> &mpz_t  =  v := v * x;
alwaysinline (_/=_):  (v: &mpz_t, x: mpz_t) ~> &mpz_t  =  v := v / x;
alwaysinline (_%=_):  (v: &mpz_t, x: mpz_t) ~> &mpz_t  =  v := v % x;
alwaysinline (_&=_):  (v: &mpz_t, x: mpz_t) ~> &mpz_t  =  v := v & x;
alwaysinline (_|=_):  (v: &mpz_t, x: mpz_t) ~> &mpz_t  =  v := v | x;
alwaysinline (_^=_):  (v: &mpz_t, x: mpz_t) ~> &mpz_t  =  v := v ^ x;
alwaysinline (_<<=_): (v: &mpz_t, u: ulong) ~> &mpz_t  =  v := v << u;
alwaysinline (_>>=_): (v: &mpz_t, u: ulong) ~> &mpz_t  =  v := v >> u;


//=====================================================================
//=====================================================================
__gmp_printf: (*const char, ...) ~> int;



//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    N = 256*8;

    num_t = uint(N);

    num: &num_t := 98765432109876543210987654321098765432109876543210987654321098765432109876543210987654321098765432109876543210;

    bnum: &mpz_t := {};

//  __gmpz_import(&bnum, num_t.sizeof, -1, 1, 0, 0, &num);
    __gmpz_import(&bnum, 1, 1, num_t.sizeof, 0, 0, &num);

    __gmp_printf("%Zd\n", &bnum);

}

//---------------------------------------------------------------------
{
    bnum: &mpz_t := {};

    __gmpz_set_str(&bnum, "-100", 8);

    __gmp_printf("%Zd\n", &bnum);

}

//---------------------------------------------------------------------
//{   v_debug_print_module(2);
////    voidc_verify_jit_module_optimized(true);
//}
{
//  val: mpz_t = -0x100;
//  val: mpz_t = -100;
//  val: mpz_t = 1'0;
    val: mpz_t = 98765432109876543210987654321098765432109876543210987654321098765432109876543210987654321098765432109876543210;

    bnum: &mpz_t := val;

    __gmp_printf("%Zd\n", &bnum);

}


//---------------------------------------------------------------------
//{   v_debug_print_module(2);
//    voidc_verify_jit_module_optimized(true);
//}
{
    f: &mpz_t[2] := { 0, 1 };

    N = 4782;

    for (i: &int := 2; i <= N; ++i)
    {
        fn = f[0] + f[1];

        v_assert(f[0] <= f[1] <= fn);

        f[0] := f[1];
        f[1] := fn;
    }

    n: &mpz_t := 1;

    for (i: &int := 0; i < 999; ++i)
    {
        n *= 10;
    }

    v_assert(f[0] < n <= f[1]);

    __gmp_printf("\n%Zd\n", &f[1]);
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    printf("\n");

    r: &mpz_t := 1;

    N = 1000;

    for (i: &int := 1; i <= N; ++i)
    {
        r *= i;
//      r := i * r;

        __gmp_printf("%Zd\n", &r);
    }
}


//---------------------------------------------------------------------
//{   v_debug_print_module(2);
//    voidc_verify_jit_module_optimized(true);
//}
{
    r: &mpz_t := 1u67;

    r <<= 1000;

    __gmp_printf("\n%Zd\n", &r);
}


//---------------------------------------------------------------------
//{   v_debug_print_module(9);
//    voidc_verify_jit_module_optimized(true);
//}

check_fruits: (a: mpz_t, b: mpz_t, c: mpz_t) ~> bool  =
{
    ab = a + b;     ac = a + c;     bc = b + c;

    a*ab*ac + b*ab*bc + c*ac*bc == 4*ab*ac*bc
};

A = 154476802108746166441951315019919837485664325669565431700026634898253202035277999;
B =  36875131794129999827197811565225474825492979968971970996283137471637224634055579;
C =   4373612677928697257861252602371390152816537558161613618621437993378423467772036;

{   if (check_fruits(A, B, C))  printf("\nOK\n");
    else                        printf("\nFail\n");
}



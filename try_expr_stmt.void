{   v_import("mainline.void");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_mainline();
}


//---------------------------------------------------------------------
{
    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("expr_stmt_q", q_ref, q("expr_stmt"));

    v_add_symbol("q_initialize", q_ref, q("v_initialize"));
    v_add_symbol("q_terminate",  q_ref, q("v_terminate"));
    v_add_symbol("q_copy",       q_ref, q("v_copy"));

    v_add_symbol("voidc_internal_break_value_q",                  q_ref, q("voidc.internal_break_value"));
    v_add_symbol("voidc_internal_branch_target_leave_q",          q_ref, q("voidc.internal_branch_target_leave"));
    v_add_symbol("voidc_internal_branch_target_break_variable_q", q_ref, q("voidc.internal_branch_target_break_variable"));
    v_add_symbol("voidc_internal_branch_target_break_q",          q_ref, q("voidc.internal_branch_target_break"));
}


//=====================================================================

//---------------------------------------------------------------------
//- v_ast_expr_stmt_t ...
//---------------------------------------------------------------------
export
struct v_ast_expr_stmt_t
{
    body: v_ast_stmt_t;                 //- Statement...
};

//---------------------------------------------------------------------
private
ast_expr_stmt_init: (void_obj: *void) ~> void
{
    obj = *(void_obj: *v_ast_expr_stmt_t);

    v_initialize(&obj.body);
}

//---------------------------------------------------------------------
private
ast_expr_stmt_term: (void_obj: *void) ~> void
{
    obj = *(void_obj: *v_ast_expr_stmt_t);

    v_terminate(&obj.body);
}


//---------------------------------------------------------------------
ast_expr_stmt_vtable: &v_ast_generic_vtable :=
{
    ast_expr_stmt_init,
    ast_expr_stmt_term,
};

//---------------------------------------------------------------------
export
v_ast_make_expr_stmt: (ret: *v_ast_expr_t, body: *v_ast_stmt_t) ~> void
{
    expr: &v_ast_expr_t := {};      expr = &expr;

    v_ast_make_generic(expr, &ast_expr_stmt_vtable, v_ast_expr_stmt_t.size);

    void_obj = v_ast_generic_get_object(expr);

    obj = *(void_obj: *v_ast_expr_stmt_t);

    if (body)  v_copy(&obj.body, body);

    v_copy(ret,  expr);
}


//---------------------------------------------------------------------
//- Grammar actions ...
//---------------------------------------------------------------------
//private
mk_expr_stmt_grammar_action: (ret: v_std_any_ptr, *void, any: v_std_any_ptr, size_t) ~> void
{
    body = v_std_any_get_pointer(v_ast_stmt_t, any+0);

    expr: &v_ast_expr_t := {};      expr = &expr;

    v_ast_make_expr_stmt(expr, body);

    v_std_any_set_pointer(ret, expr);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
//private
compile_expr_stmt: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    ttag = v_get_result_type();
    vtag = v_get_result_value();

    is_special = v_type_is_special(ttag, q_initialize);

    tr  = ttag;                         //- Sic !!!
    tr_ = v_type_get_llvm_type(tr);

    vr: &LLVMValueRef := v_undef();

    builder = v_target_get_builder();

    if (is_special)
    {
        hnd = *(aux: *voidc_obtain_special_result_value_helper_t);

        vr := hnd(vis, tr);
    }
    else
    {
        vr := LLVMBuildAlloca(builder, tr_, "vr_v");
    }

    void_obj = v_ast_generic_get_object((self: *v_ast_expr_t));

    obj = *(void_obj: *v_ast_expr_stmt_t);

    v_save_variables();

    v_add_variable_q(voidc_internal_break_value_q, tr, vr);

    v_ast_accept_visitor((&obj.body: *v_ast_base_t), vis);

    v_restore_variables();

    if (!is_special)
    {
        vr := LLVMBuildLoad2(builder, tr_, vr, "vr");
    }

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(tr, vr);         //- ?
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
//private
my_break_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
printf("my_break_intrinsic ! start\n");
defer printf("my_break_intrinsic ! stop\n");

    call = (self: *v_ast_expr_t);

    arg_list = v_ast_expr_call_get_arg_list(call);

    builder = v_target_get_builder();

    args_count = v_list_get_size(arg_list);

    if (args_count)
    block
    {
printf("my_break_intrinsic ! %zd\n", args_count);

        arg0 = v_list_get_item(arg_list, 0);

        brk_type  = v_get_variable_type_q(voidc_internal_break_value_q);
        brk_var_v = v_get_variable_value_q(voidc_internal_break_value_q);

        v_set_result_type(brk_type);

        if (!v_type_is_special(brk_type, q_initialize))
        {
            v_set_result_value(0);

            v_ast_accept_visitor((arg0: *v_ast_base_t), vis);

            vr = v_get_result_value();

            builder = v_target_get_builder();

            LLVMBuildStore(builder, vr, brk_var_v);

            v_break();
        }

        v_set_result_value(brk_var_v);

        v_ast_accept_visitor((arg0: *v_ast_base_t), vis);

        t = v_get_result_type();
        v = v_get_result_value();

        if (t != brk_type  ||  v != brk_var_v)          //- WTF?
        {
            v_set_result_type(brk_type);
            v_set_result_value(brk_var_v);

            v_adopt_result(t, v);
        }
    }

    break_var  = v_get_variable_value_q(voidc_internal_branch_target_break_variable_q);
    break_addr = v_get_variable_value_q(voidc_internal_branch_target_break_q);

    voidc_intrinsic_break_helper(break_var, break_addr);
}


////---------------------------------------------------------------------
////- ...
////---------------------------------------------------------------------
//{
//    vis = v_get_compiler();
//
//    handler = voidc_local_objects_context_get_obtain_special_result_value_helper();
//
//    voidc_visitor_set_void_method(vis, vis, expr_stmt_q, compile_expr_stmt, &handler);
//
//    v_add_intrinsic("v_break", my_break_intrinsic, 0);
//
//    ast_expr_stmt_vtable[2] := expr_stmt_q;
//}
//
//
////=====================================================================
//{
//    gr0: &v_peg_grammar_t := {};    gr0 = &gr0;
//
//    v_peg_get_grammar(gr0);
//
//    grammar gr0
//    {
//    actions:
//        mk_expr_stmt = mk_expr_stmt_grammar_action;
//
//    parsers:
//        expr_stmt = stmt_big_block
//                  / stmt_loop
//                  / stmt_switch
//                  / stmt_while
//                  / stmt_for
//                  ;
//
//        prim += s:expr_stmt         { mk_expr_stmt(s) };
//    }
//
//    v_peg_set_grammar(gr0);
//}


//=====================================================================
//{   v_debug_print_module(2);
//    voidc_verify_jit_module_optimized(true);
//}
{
    s: &v_std_string_t := block
    {
        ss: &v_std_string_t := {};

        v_std_string_set(&ss, "qwe");

        v_break(ss);
    };

    printf("s: %s\n", v_std_string_get(&s));

    x: &int := block { v_break(42); };

    printf("x: %d\n", x);

    u: &int[2] := block { v_break({7, 77}); };

    printf("u: (%d, %d)\n", u[0], u[1]);

    v: vec(int, 2) = block { v_break({8, 88}); };

    printf("v: [%d, %d]\n", v[0], v[1]);


}


S: &v_std_string_t := block
{
    ss: &v_std_string_t := {};

    v_std_string_set(&ss, "QWE");

    v_break(ss);
};

{   printf("S: %s\n", v_std_string_get(&S));
}










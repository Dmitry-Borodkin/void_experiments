{   v_import("mainline.void");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_mainline();
}


//---------------------------------------------------------------------
//- <assert.h>
//---------------------------------------------------------------------
#if (v_defined(_WIN32))
    export _assert: (message: *const char, filename: *const char, line: unsigned) ~> void;
#else
    export __assert_fail: (assertion: *const char, file: *const char, line: unsigned, function: *const char) ~> void;
#endif


//=====================================================================
v_assert_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    if (v_find_constant("NDEBUG", 0, 0))   v_return();

    call = (self: *v_ast_expr_t);

    args = v_ast_expr_call_get_arg_list(call);

    arg0 = v_list_get_item(args, 0);

    len: &size_t := 0;

    module = v_get_module();

    filename = LLVMGetSourceFileName(module, &len);

//  printf("filename: %s\n", filename);

#if (!v_defined(_WIN32))

    builder = v_target_get_builder();

    function: &*const char := "";

    if (cur_b = LLVMGetInsertBlock(builder))
    {
        fun = LLVMGetBasicBlockParent(cur_b);

        function := LLVMGetValueName2(fun, &len);
    }

//  printf("function: %s\n", function);

#endif

    line:   &size_t := v_undef();
    column: &size_t := v_undef();

    ps = v_std_any_get_value(size_t, v_ast_get_property((arg0: *v_ast_base_t), v_quark_from_string("pos_start")));
    pe = v_std_any_get_value(size_t, v_ast_get_property((arg0: *v_ast_base_t), v_quark_from_string("pos_end")));

    v_peg_get_line_column(ps, line, column);

//  printf("location: (%zd, %zd)\n", line+1, column+1);

    sstr: &v_std_string_t := {};

    v_peg_take_string(&sstr, ps, pe);

//  printf("assertion: (%s)\n", v_std_string_get(&sstr));

    list: &v_ast_expr_list_t := {};

    v_make_list_nil(&list);

    expr: &v_ast_expr_t := {};

    v_ast_make_expr_string(&expr, v_std_string_get(&sstr));

    v_list_append(&list, &list, &expr);

    v_ast_make_expr_string(&expr, filename);

    v_list_append(&list, &list, &expr);

    v_ast_make_expr_integer(&expr, (line+1 : intptr_t));

    v_list_append(&list, &list, &expr);

#if (v_defined(_WIN32))

    v_ast_make_expr_identifier(&expr, "_assert");

#else

    v_ast_make_expr_string(&expr, function);

    v_list_append(&list, &list, &expr);

    v_ast_make_expr_identifier(&expr, "__assert_fail");

#endif

    v_ast_make_expr_call(&expr, &expr, &list);

    stmt: &v_ast_stmt_t[2] := {};

    v_ast_make_stmt(stmt+1, "", &expr);

    v_ast_make_stmt_if_then_else(stmt+0, arg0, stmt+0, stmt+1);

    v_ast_accept_visitor((stmt+0: *v_ast_base_t), vis);
}

//---------------------------------------------------------------------
v_static_assert_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    if (v_find_constant("NDEBUG", 0, 0))   v_return();

    call = (self: *v_ast_expr_t);

    args = v_ast_expr_call_get_arg_list(call);

    arg0 = v_list_get_item(args, 0);

    len: &size_t := 0;

    module = v_get_module();

    filename = LLVMGetSourceFileName(module, &len);

//  printf("filename: %s\n", filename);

#if (!v_defined(_WIN32))

    builder = v_target_get_builder();

    function: &*const char := "";

    if (cur_b = LLVMGetInsertBlock(builder))
    {
        fun = LLVMGetBasicBlockParent(cur_b);

        function := LLVMGetValueName2(fun, &len);
    }

//  printf("function: %s\n", function);

#endif

    line:   &size_t := v_undef();
    column: &size_t := v_undef();

    ps = v_std_any_get_value(size_t, v_ast_get_property((arg0: *v_ast_base_t), v_quark_from_string("pos_start")));
    pe = v_std_any_get_value(size_t, v_ast_get_property((arg0: *v_ast_base_t), v_quark_from_string("pos_end")));

    v_peg_get_line_column(ps, line, column);

//  printf("location: (%zd, %zd)\n", line+1, column+1);

    sstr: &v_std_string_t := {};

    v_peg_take_string(&sstr, ps, pe);

//  printf("assertion: (%s)\n", v_std_string_get(&sstr));

    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor((arg0: *v_ast_base_t), vis);

    v = v_get_result_value();

    v = LLVMBuildIsNotNull(builder, v, "");

    if (LLVMConstIntGetZExtValue(v))  v_return();

#if (v_defined(_WIN32))

    _assert(v_std_string_get(&sstr), filename, (line+1 : unsigned));

#else

    __assert_fail(v_std_string_get(&sstr), filename, (line+1 : unsigned), function);

#endif
}

{   v_add_intrinsic("v_assert",        v_assert_intrinsic,        0);
    v_add_intrinsic("v_static_assert", v_static_assert_intrinsic, 0);
}


//---------------------------------------------------------------------
{   v_debug_print_module(2);

    voidc_verify_jit_module_optimized(true);
}
{
    v_assert(2 * 2 == 4);
//  v_assert(2 * 2 == 5  &&  "Dynamic!");

    v_static_assert(2 * 2 == 4);
//  v_static_assert(2 * 2 == 5  &&  "Static!");
}




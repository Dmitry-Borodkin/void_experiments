{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");
    v_import("level-03");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();
    v_enable_level_03();
}


//---------------------------------------------------------------------
__assert_fail: (__assertion: *const char, __file: *const char, __line: unsigned, _function: *const char) -> void;


//=====================================================================
v_assert_intrinsic: (vis: *voidc_visitor_t, *void, self: *v_ast_base_t) -> void
{
    if (v_find_constant("NDEBUG", 0, 0))   v_return();

    call = (self: *v_ast_expr_t);

    arg_list = v_ast_expr_call_get_arg_list(call);

    arg0 = v_list_get_item(arg_list, 0);

    len: &size_t := 0;

    module = v_get_module();

    filename = LLVMGetSourceFileName(module, &len);

//  printf("filename: %s\n", filename);

    builder = v_target_get_builder();

    cur_b = LLVMGetInsertBlock(builder);

    fun = LLVMGetBasicBlockParent(cur_b);

    function = LLVMGetValueName2(fun, &len);

//  printf("function: %s\n", function);

    line:   &size_t := v_undef();
    column: &size_t := v_undef();

    ps = v_std_any_get_value(size_t, v_ast_get_property((arg0: *v_ast_base_t), v_quark_from_string("pos_start")));
    pe = v_std_any_get_value(size_t, v_ast_get_property((arg0: *v_ast_base_t), v_quark_from_string("pos_end")));

    v_peg_get_line_column(ps, line, column);

//  printf("location: (%zd, %zd)\n", line+1, column+1);

    sstr: &v_std_string_t := {};

    v_peg_take_string(&sstr, ps, pe);

//  printf("assertion: (%s)\n", v_std_string_get(&sstr));

    list: &v_ast_expr_list_t := {};

    v_make_list_nil(&list);

    expr: &v_ast_expr_t := {};

    v_ast_make_expr_string(&expr, v_std_string_get(sstr));

    v_list_append(&list, &list, &expr);

    v_ast_make_expr_string(&expr, filename);

    v_list_append(&list, &list, &expr);

    v_ast_make_expr_integer(&expr, (line: intptr_t));

    v_list_append(&list, &list, &expr);

    v_ast_make_expr_string(&expr, function);

    v_list_append(&list, &list, &expr);

    v_ast_make_expr_identifier(&expr, "__assert_fail");

    v_ast_make_expr_call(&expr, &expr, &list);

    stmt: &v_ast_stmt_t[2] := {};

    v_ast_make_stmt(&stmt[1], "", &expr);

    v_ast_make_stmt_if_then_else(&stmt, arg0, &stmt[0], &stmt[1]);

    v_ast_accept_visitor(&stmt, vis);
}

{   v_add_intrinsic("v_assert", v_assert_intrinsic, 0);
}


//---------------------------------------------------------------------
{   v_debug_print_module(2);

    voidc_verify_jit_module_optimized(true);
}
{
    v_assert(2 * 2 == 4);
    v_assert(2 * 2 == 5  &&  "Hello!");

}



